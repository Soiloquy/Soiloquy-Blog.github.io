{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/01-1.png","path":"medias/01-1.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/01-2.png","path":"medias/01-2.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/101891205_p0.jpg","path":"medias/101891205_p0.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/background.jpg","path":"medias/background.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/index_top.jpg","path":"medias/index_top.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/01.png","path":"medias/cover/01.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/02.png","path":"medias/cover/02.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/03.png","path":"medias/cover/03.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/04.png","path":"medias/cover/04.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/05.jpg","path":"medias/cover/05.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/06.jpg","path":"medias/cover/06.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/07.jpg","path":"medias/cover/07.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/08.jpg","path":"medias/cover/08.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_date/link.yml","hash":"82cfcde3bbf056782898cea15936b530d1161009","modified":1674369254000},{"_id":"source/_posts/AJAX笔记.md","hash":"62f0cf072a2c46bd5ede64c8e75d7de92168f61e","modified":1679982417747},{"_id":"source/_posts/Vue2核心.md","hash":"17db76647aec40944d732ab9f2b6b3045f0c747a","modified":1681034179229},{"_id":"source/_posts/Vue2组件和脚手架.md","hash":"06d1b8d84ef0cc55d019135bee918f4b797183fe","modified":1681034423744},{"_id":"source/_posts/htnl-CSS总结.md","hash":"2c2d0a95f6c679971c3b08a483207622004b7e21","modified":1674817182000},{"_id":"source/_posts/Csharp笔记.md","hash":"6dd4dba1f815dc7c096b774f0ddf6f40defc4506","modified":1681034669597},{"_id":"source/_posts/我的第一篇博客.md","hash":"f3713851cb77e380e881a3029ab6a0e6a24197bf","modified":1674446478000},{"_id":"source/about/index.md","hash":"c59fc65988547600c63d364a6cf79f6e8735d506","modified":1674374038000},{"_id":"source/categories/index.md","hash":"b0626f6c32790d70bb1909bb945d2eb418d467c3","modified":1674468660000},{"_id":"source/link/index.md","hash":"27c2ad5a4d90d8f864768d537537cfa3e8bcf29d","modified":1672990618000},{"_id":"source/music/index.md","hash":"3d1fcd5841faefdbc6d417c4317473925af681ac","modified":1674445832000},{"_id":"source/tags/index.md","hash":"b1b694033fffa14c130e22018bc2206c9829e760","modified":1672990542000},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1672989450000},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"81913d80786e8f89ddc9cae77c18905b02b361fd","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"d2de76d6c4fbf9d6b329bba8ba808f7ccbd613fa","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"d46811a3c50f7057681ac496de4beda107aa26b6","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"346b6b650b9dee4844f3be7865886002f82da24c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"7dee9b73acdec2a34d41a45119ebe8bb8650bf6c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"919020d4cd7ae68694b2326edeed4328c7f933cd","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"acfe765fb2c607bff7198630dbfa53a888c36357","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"ee3e70098eb0849497d50b75e18cf4a27c397d52","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"763dab5c83f50c1c62fffc9a9dfedea29bb4e629","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"e018dad9f674fc5564112b99032fe5fe8b2d195f","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"7e6631c6971088e17f859de719bfcc6bb82fbede","modified":1674388080000},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"fe4d847177b824e09c75e9c7b723184c708c569a","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"2df5a033104775ee9c8715925bb32c3ec5b75da0","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"aa175e2254704335f4da09175e59ef2375ca7d03","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"6ae047d566289294cc2f6192cacbff297cec9f1a","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"e3d574921fca8e756923bf3b303835e57b9a26b2","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"142621f70bedcb5033ee99a988f7bb6c5eea3493","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"a0010d833ed30211601c1e0bbbc68e85b77428c6","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"a457a0dbe23af21a7b6b8bfc5ee103c9fe92e89c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"8c90483d461e09cb06e91b16d8bb7b3205b0a40c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1672989450000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/07.jpg","hash":"b98c4dab633adc719871a281d3fd9a26b6bfcf1c","modified":1674981026000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/08.jpg","hash":"e76feb7a33b74a755fce3166cae94958e0f0a77f","modified":1674981082000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"49dcc23815e1d5264bb65c91e7dc67b1a723d1ea","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"98ef20f8a3b10c1692f9b2b3c06033d2da8a8eae","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"1c846c8d51649b8554d91536323eaeb20c8fc236","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"c12c898b35dd014780c1f3220ddbe12e7270983c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1672989452000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1672989454000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/04.png","hash":"a2560e39c0d6f4f4ddcfc178077ab11a03c2bb90","modified":1674467266000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/05.jpg","hash":"b978abddf60d0836fcf987439559da4c5d60ce21","modified":1674467318000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/background.jpg","hash":"b720888fa18e84c5fef7a4ea576ac2e6943551f1","modified":1674442306000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/01.png","hash":"7807576e6cb2d492f974b3d974748bae7d47b54f","modified":1674467152000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/06.jpg","hash":"0388ca267f075137854ab31f5e11aa3611102b85","modified":1674467336000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/02.png","hash":"96ac08298d57d9b5bcc641caf04203683a70f8fe","modified":1674467198000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/index_top.jpg","hash":"dc58c4a0c7a611aedcb8df1423c9f2bcd8065e90","modified":1674392152000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/cover/03.png","hash":"232b0ed7cf9c888f60fd90fbff6bcbdd8ff9de35","modified":1674467226000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/01-1.png","hash":"252c6130ea7b9e62c52d637e369e41d4c48e2ffb","modified":1674442098000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/01-2.png","hash":"4a66e22c334ef06a7b0e62e2ae0830a50bd94ebd","modified":1674442388000},{"_id":"node_modules/hexo-theme-butterfly/source/medias/101891205_p0.jpg","hash":"8afbcd76186c72004e95a06e0af81958edb18971","modified":1674022156000},{"_id":"public/search.xml","hash":"8a2f296c3a03b564dfadb2a71fd33c512a09c989","modified":1681038457602},{"_id":"public/about/index.html","hash":"84c434933b6189589643c1d7b08ec89231d39696","modified":1681038457602},{"_id":"public/categories/index.html","hash":"681c28b83d13acc5ea86eedc12755794b02263c6","modified":1681038457602},{"_id":"public/link/index.html","hash":"b0da929dd15e57834b4f0aa1e743f9372f231f7a","modified":1681038457602},{"_id":"public/music/index.html","hash":"159b9171def33e7ad0fccde4a1f1e6373a26d34d","modified":1681038457602},{"_id":"public/tags/index.html","hash":"43e569df0357dd664bbbf5ec857d67f237e0aa2c","modified":1681038457602},{"_id":"public/2023/04/09/Vue2组件和脚手架/index.html","hash":"16354c49ca0c4f387f418d66962635e51cf7a986","modified":1681038457602},{"_id":"public/2023/03/27/Vue2核心/index.html","hash":"551ad4b601943d3d101ca863777b85aa755c4bdb","modified":1681038457602},{"_id":"public/2023/01/30/AJAX笔记/index.html","hash":"db4893863e5348e14670e9a8ccde523678329603","modified":1681038457602},{"_id":"public/2023/01/27/Csharp笔记/index.html","hash":"3bcfbc69024290cf88db47159b50bd3d9e400aba","modified":1681038457602},{"_id":"public/2023/01/23/htnl-CSS总结/index.html","hash":"7699863f811564dc545231497ac7a2ea92e52385","modified":1681038457602},{"_id":"public/2023/01/23/我的第一篇博客/index.html","hash":"43807971f4e31fa95ac150961e4e36a46fb66d7b","modified":1681038457602},{"_id":"public/archives/index.html","hash":"be25cd2cf0a797f95f83bc01e8e77d31b1b1860f","modified":1681038457602},{"_id":"public/archives/2023/index.html","hash":"764d1b5561a1a4db3d6efae80d5704994b4a84c5","modified":1681038457602},{"_id":"public/archives/2023/01/index.html","hash":"aec75a09923d567e11facdb73f93ac1763b77a4e","modified":1681038457602},{"_id":"public/archives/2023/03/index.html","hash":"f2fcd09d6f1011142580b3da43d1576b8394fff3","modified":1681038457602},{"_id":"public/archives/2023/04/index.html","hash":"81f513fb3d36756807cdc7b952e351845beed619","modified":1681038457602},{"_id":"public/index.html","hash":"fcb4615fe05a5885fff1d73f831743844814cd96","modified":1681038457602},{"_id":"public/tags/Markdown/index.html","hash":"67f0e75957d016f4e023489cfcbffc0c93c78953","modified":1681038457602},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1681038457602},{"_id":"public/img/favicon.png","hash":"7e6631c6971088e17f859de719bfcc6bb82fbede","modified":1681038457602},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1681038457602},{"_id":"public/medias/cover/07.jpg","hash":"b98c4dab633adc719871a281d3fd9a26b6bfcf1c","modified":1681038457602},{"_id":"public/medias/cover/08.jpg","hash":"e76feb7a33b74a755fce3166cae94958e0f0a77f","modified":1681038457602},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1681038457602},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1681038457602},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681038457602},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1681038457602},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1681038457602},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1681038457602},{"_id":"public/css/index.css","hash":"228c2806677575ce9d546c3e7cf427b1bdc1b8d0","modified":1681038457602},{"_id":"public/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1681038457602},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1681038457602},{"_id":"public/medias/cover/04.png","hash":"a2560e39c0d6f4f4ddcfc178077ab11a03c2bb90","modified":1681038457602},{"_id":"public/medias/cover/05.jpg","hash":"b978abddf60d0836fcf987439559da4c5d60ce21","modified":1681038457602},{"_id":"public/medias/background.jpg","hash":"b720888fa18e84c5fef7a4ea576ac2e6943551f1","modified":1681038457602},{"_id":"public/medias/cover/01.png","hash":"7807576e6cb2d492f974b3d974748bae7d47b54f","modified":1681038457602},{"_id":"public/medias/cover/06.jpg","hash":"0388ca267f075137854ab31f5e11aa3611102b85","modified":1681038457602},{"_id":"public/medias/cover/02.png","hash":"96ac08298d57d9b5bcc641caf04203683a70f8fe","modified":1681038457602},{"_id":"public/medias/index_top.jpg","hash":"dc58c4a0c7a611aedcb8df1423c9f2bcd8065e90","modified":1681038457602},{"_id":"public/medias/cover/03.png","hash":"232b0ed7cf9c888f60fd90fbff6bcbdd8ff9de35","modified":1681038457602},{"_id":"public/medias/01-1.png","hash":"252c6130ea7b9e62c52d637e369e41d4c48e2ffb","modified":1681038457602},{"_id":"public/medias/01-2.png","hash":"4a66e22c334ef06a7b0e62e2ae0830a50bd94ebd","modified":1681038457602},{"_id":"public/medias/101891205_p0.jpg","hash":"8afbcd76186c72004e95a06e0af81958edb18971","modified":1681038457602}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2023-01-05T04:00:00.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-1-5 12:00:00\n---","updated":"2023-01-22T07:53:58.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"clg9aw93z0000e8uf767s5q1v","content":"","site":{"data":{}},"cover":"/medias/cover/08.jpg","excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-01-23T10:11:00.000Z","path":"categories/index.html","comments":1,"_id":"clg9aw94e0002e8uff0sbatjs","content":"","site":{"data":{}},"cover":"/medias/cover/04.png","excerpt":"","more":""},{"title":"link","date":"2023-01-06T07:36:11.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-01-06 15:36:11\ntype: \"link\"\n---\n","updated":"2023-01-06T07:36:58.000Z","path":"link/index.html","comments":1,"layout":"page","_id":"clg9aw94h0004e8uf3u9k084n","content":"","site":{"data":{}},"cover":"/medias/cover/03.png","excerpt":"","more":""},{"title":"音乐","date":"2023-01-05T04:00:00.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2023-1-5 12:00:00\n---","updated":"2023-01-23T03:50:32.000Z","path":"music/index.html","comments":1,"layout":"page","_id":"clg9aw94k0006e8uf45517pzr","content":"","site":{"data":{}},"cover":"/medias/cover/01.png","excerpt":"","more":""},{"title":"tags","date":"2023-01-06T07:24:58.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-01-06 15:24:58\ntype: \"tags\"\n---\n","updated":"2023-01-06T07:35:42.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clg9aw94m0008e8uf9qxu9r14","content":"","site":{"data":{}},"cover":"/medias/cover/02.png","excerpt":"","more":""}],"Post":[{"title":"AJAX学习笔记","date":"2023-01-30T09:45:41.000Z","_content":"\n# ajax学习笔记\n\n==[课程地址]( https://www.bilibili.com/video/BV1WC4y1b78y)==\n\n## 第一章： 原生Ajax\n\n### 1.1 Ajax简介\n\n- Ajax全称为Asynchronous Javascript And XML，即异步JS和XML\n- 通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：**无刷新获取数据**\n- AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式\n\n### 1.2 XML简介\n\n- XML：可扩展标记语言\n- XML：被设计用来传输和存储数据\n- XML和HTML类似，不同点：**HTML中都是预定义标签，XML中没有预定义标签，全是自定义标签**，用来表示一些数据\n\n`//用XML表示一个学生数据\n<student>\n\t<name>abc</name>\n    <age>18</age>\n    <gender>男</gender>\n</student>`\n\n- 现在已被JSON取代\n\n```json\n{\"name\":\"abc\",\"age\":\"18\",\"gender\":\"男\"}\n```\n\n### 1.3 AJAX 的特点\n\n#### 1.3.1 AJAX的优点\n\n1. 可以无刷新页面与服务端进行通信\n2. 允许你根据用户事件来更新部分页面内容\n\n#### 1.3.2 AJAX 的缺点\n\n1. 没有浏览历史，不能回退\n2. 存在跨域问题（同源）\n3. SEO不友好（爬虫获取不到信息）\n\n### 1.4 HTTP协议[超文本传输协议]\n\n#### 1.4.1 HTTP请求报文\n\n请求由以下元素组成：（摘自MDN）\n\n- 一个 HTTP 的请求[方法](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods)，经常是由一个动词像 [`GET`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET)、[`POST`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST) 或者一个名词像 [`OPTIONS`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS)、[`HEAD`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD) 来定义客户端的动作行为。通常客户端的操作都是获取资源（GET 方法）或者发送 [HTML 表单](https://developer.mozilla.org/zh-CN/docs/Learn/Forms)（POST 方法），虽然在一些情况下也会有其他操作。\n- 要获取的资源的路径，通常是上下文中就很明显的元素资源的 URL，它没有 [protocol](https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol)（`http://`），[domain](https://developer.mozilla.org/zh-CN/docs/Glossary/Domain)（`developer.mozilla.org`），或是 TCP 的 [port (en-US)](https://developer.mozilla.org/en-US/docs/Glossary/Port)（HTTP 一般在 80 端口）。\n- HTTP 协议版本号。\n- 为服务端表达其他信息的可选[标头](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)。\n- 对于一些像 POST 这样的方法，报文的主体（body）就包含了发送的资源，这与响应报文的主体类似。\n\n#### 1.4.1HTTP响应报文\n\n响应报文包含了下面的元素：（摘自MDN）\n\n- HTTP 协议版本号。\n- 一个状态码（[状态码（status code）](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status)），来告知对应请求执行成功或失败，以及失败的原因。\n- 一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。\n- HTTP [标头](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)，与请求标头类似。\n- 可选项，比起请求报文，响应报文中更常见地包含获取资源的主体。\n\n### express基本使用\n\nExpress：高度包容、快速而极简的 [Node.js](http://nodejs.org/) Web 框架\n\n```javascript\n// 1.引入express\nconst { request, response } = require('express');\nconst express = require('express');\n\n// 2.创建引用对象\nconst app = express();\n\n//3.创建路由规则\n//request是对请求报文的封装\n//response 是对响应报文的封装\napp.get('/', (request, response) => {\n    //设置响应\n    response.send('HELLO AJAX');\n});\n\n//4.监听端口启动服务\napp.listen(8000, () => {\n    console.log(\"服务已启动，8000端口监听中。。。\");\n})\n```\n\n\n\n","source":"_posts/AJAX笔记.md","raw":"---\ntitle: AJAX学习笔记\ndate: 2023-01-30 17:45:41\ntags:\n---\n\n# ajax学习笔记\n\n==[课程地址]( https://www.bilibili.com/video/BV1WC4y1b78y)==\n\n## 第一章： 原生Ajax\n\n### 1.1 Ajax简介\n\n- Ajax全称为Asynchronous Javascript And XML，即异步JS和XML\n- 通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：**无刷新获取数据**\n- AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式\n\n### 1.2 XML简介\n\n- XML：可扩展标记语言\n- XML：被设计用来传输和存储数据\n- XML和HTML类似，不同点：**HTML中都是预定义标签，XML中没有预定义标签，全是自定义标签**，用来表示一些数据\n\n`//用XML表示一个学生数据\n<student>\n\t<name>abc</name>\n    <age>18</age>\n    <gender>男</gender>\n</student>`\n\n- 现在已被JSON取代\n\n```json\n{\"name\":\"abc\",\"age\":\"18\",\"gender\":\"男\"}\n```\n\n### 1.3 AJAX 的特点\n\n#### 1.3.1 AJAX的优点\n\n1. 可以无刷新页面与服务端进行通信\n2. 允许你根据用户事件来更新部分页面内容\n\n#### 1.3.2 AJAX 的缺点\n\n1. 没有浏览历史，不能回退\n2. 存在跨域问题（同源）\n3. SEO不友好（爬虫获取不到信息）\n\n### 1.4 HTTP协议[超文本传输协议]\n\n#### 1.4.1 HTTP请求报文\n\n请求由以下元素组成：（摘自MDN）\n\n- 一个 HTTP 的请求[方法](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods)，经常是由一个动词像 [`GET`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET)、[`POST`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST) 或者一个名词像 [`OPTIONS`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS)、[`HEAD`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD) 来定义客户端的动作行为。通常客户端的操作都是获取资源（GET 方法）或者发送 [HTML 表单](https://developer.mozilla.org/zh-CN/docs/Learn/Forms)（POST 方法），虽然在一些情况下也会有其他操作。\n- 要获取的资源的路径，通常是上下文中就很明显的元素资源的 URL，它没有 [protocol](https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol)（`http://`），[domain](https://developer.mozilla.org/zh-CN/docs/Glossary/Domain)（`developer.mozilla.org`），或是 TCP 的 [port (en-US)](https://developer.mozilla.org/en-US/docs/Glossary/Port)（HTTP 一般在 80 端口）。\n- HTTP 协议版本号。\n- 为服务端表达其他信息的可选[标头](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)。\n- 对于一些像 POST 这样的方法，报文的主体（body）就包含了发送的资源，这与响应报文的主体类似。\n\n#### 1.4.1HTTP响应报文\n\n响应报文包含了下面的元素：（摘自MDN）\n\n- HTTP 协议版本号。\n- 一个状态码（[状态码（status code）](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status)），来告知对应请求执行成功或失败，以及失败的原因。\n- 一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。\n- HTTP [标头](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)，与请求标头类似。\n- 可选项，比起请求报文，响应报文中更常见地包含获取资源的主体。\n\n### express基本使用\n\nExpress：高度包容、快速而极简的 [Node.js](http://nodejs.org/) Web 框架\n\n```javascript\n// 1.引入express\nconst { request, response } = require('express');\nconst express = require('express');\n\n// 2.创建引用对象\nconst app = express();\n\n//3.创建路由规则\n//request是对请求报文的封装\n//response 是对响应报文的封装\napp.get('/', (request, response) => {\n    //设置响应\n    response.send('HELLO AJAX');\n});\n\n//4.监听端口启动服务\napp.listen(8000, () => {\n    console.log(\"服务已启动，8000端口监听中。。。\");\n})\n```\n\n\n\n","slug":"AJAX笔记","published":1,"updated":"2023-03-28T05:46:57.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9aw9470001e8uf6c57e8if","content":"<h1>ajax学习笔记</h1>\n<p><mark><a href=\"https://www.bilibili.com/video/BV1WC4y1b78y\">课程地址</a></mark></p>\n<h2 id=\"第一章：-原生Ajax\">第一章： 原生Ajax</h2>\n<h3 id=\"1-1-Ajax简介\">1.1 Ajax简介</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ajax全称为Asynchronous Javascript And XML，即异步JS和XML</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></p>\n</li>\n<li class=\"lvl-2\">\n<p>AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p>\n</li>\n</ul>\n<h3 id=\"1-2-XML简介\">1.2 XML简介</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>XML：可扩展标记语言</p>\n</li>\n<li class=\"lvl-2\">\n<p>XML：被设计用来传输和存储数据</p>\n</li>\n<li class=\"lvl-2\">\n<p>XML和HTML类似，不同点：<strong>HTML中都是预定义标签，XML中没有预定义标签，全是自定义标签</strong>，用来表示一些数据</p>\n</li>\n</ul>\n<p><code>//用XML表示一个学生数据 &lt;student&gt; \t&lt;name&gt;abc&lt;/name&gt;     &lt;age&gt;18&lt;/age&gt;     &lt;gender&gt;男&lt;/gender&gt; &lt;/student&gt;</code></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>现在已被JSON取代</p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;abc&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;18&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;gender&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;男&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-AJAX-的特点\">1.3 AJAX 的特点</h3>\n<h4 id=\"1-3-1-AJAX的优点\">1.3.1 AJAX的优点</h4>\n<ol>\n<li class=\"lvl-3\">\n<p>可以无刷新页面与服务端进行通信</p>\n</li>\n<li class=\"lvl-3\">\n<p>允许你根据用户事件来更新部分页面内容</p>\n</li>\n</ol>\n<h4 id=\"1-3-2-AJAX-的缺点\">1.3.2 AJAX 的缺点</h4>\n<ol>\n<li class=\"lvl-3\">\n<p>没有浏览历史，不能回退</p>\n</li>\n<li class=\"lvl-3\">\n<p>存在跨域问题（同源）</p>\n</li>\n<li class=\"lvl-3\">\n<p>SEO不友好（爬虫获取不到信息）</p>\n</li>\n</ol>\n<h3 id=\"1-4-HTTP协议-超文本传输协议\">1.4 HTTP协议[超文本传输协议]</h3>\n<h4 id=\"1-4-1-HTTP请求报文\">1.4.1 HTTP请求报文</h4>\n<p>请求由以下元素组成：（摘自MDN）</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>一个 HTTP 的请求<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods\">方法</a>，经常是由一个动词像 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\"><code>GET</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\"><code>POST</code></a> 或者一个名词像 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\"><code>OPTIONS</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD\"><code>HEAD</code></a> 来定义客户端的动作行为。通常客户端的操作都是获取资源（GET 方法）或者发送 <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Forms\">HTML 表单</a>（POST 方法），虽然在一些情况下也会有其他操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>要获取的资源的路径，通常是上下文中就很明显的元素资源的 URL，它没有 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol\">protocol</a>（<code>http://</code>），<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Domain\">domain</a>（<code>developer.mozilla.org</code>），或是 TCP 的 <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Port\">port (en-US)</a>（HTTP 一般在 80 端口）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>HTTP 协议版本号。</p>\n</li>\n<li class=\"lvl-2\">\n<p>为服务端表达其他信息的可选<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\">标头</a>。</p>\n</li>\n<li class=\"lvl-2\">\n<p>对于一些像 POST 这样的方法，报文的主体（body）就包含了发送的资源，这与响应报文的主体类似。</p>\n</li>\n</ul>\n<h4 id=\"1-4-1HTTP响应报文\">1.4.1HTTP响应报文</h4>\n<p>响应报文包含了下面的元素：（摘自MDN）</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>HTTP 协议版本号。</p>\n</li>\n<li class=\"lvl-2\">\n<p>一个状态码（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\">状态码（status code）</a>），来告知对应请求执行成功或失败，以及失败的原因。</p>\n</li>\n<li class=\"lvl-2\">\n<p>一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。</p>\n</li>\n<li class=\"lvl-2\">\n<p>HTTP <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\">标头</a>，与请求标头类似。</p>\n</li>\n<li class=\"lvl-2\">\n<p>可选项，比起请求报文，响应报文中更常见地包含获取资源的主体。</p>\n</li>\n</ul>\n<h3 id=\"express基本使用\">express基本使用</h3>\n<p>Express：高度包容、快速而极简的 <a href=\"http://nodejs.org/\">Node.js</a> Web 框架</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.引入express</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; request, response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.创建引用对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.创建路由规则</span></span><br><span class=\"line\"><span class=\"comment\">//request是对请求报文的封装</span></span><br><span class=\"line\"><span class=\"comment\">//response 是对响应报文的封装</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置响应</span></span><br><span class=\"line\">    response.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;HELLO AJAX&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4.监听端口启动服务</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务已启动，8000端口监听中。。。&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"/medias/cover/04.png","excerpt":"","more":"<h1>ajax学习笔记</h1>\n<p><mark><a href=\"https://www.bilibili.com/video/BV1WC4y1b78y\">课程地址</a></mark></p>\n<h2 id=\"第一章：-原生Ajax\">第一章： 原生Ajax</h2>\n<h3 id=\"1-1-Ajax简介\">1.1 Ajax简介</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ajax全称为Asynchronous Javascript And XML，即异步JS和XML</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></p>\n</li>\n<li class=\"lvl-2\">\n<p>AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p>\n</li>\n</ul>\n<h3 id=\"1-2-XML简介\">1.2 XML简介</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>XML：可扩展标记语言</p>\n</li>\n<li class=\"lvl-2\">\n<p>XML：被设计用来传输和存储数据</p>\n</li>\n<li class=\"lvl-2\">\n<p>XML和HTML类似，不同点：<strong>HTML中都是预定义标签，XML中没有预定义标签，全是自定义标签</strong>，用来表示一些数据</p>\n</li>\n</ul>\n<p><code>//用XML表示一个学生数据 &lt;student&gt; \t&lt;name&gt;abc&lt;/name&gt;     &lt;age&gt;18&lt;/age&gt;     &lt;gender&gt;男&lt;/gender&gt; &lt;/student&gt;</code></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>现在已被JSON取代</p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;abc&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;18&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;gender&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;男&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-AJAX-的特点\">1.3 AJAX 的特点</h3>\n<h4 id=\"1-3-1-AJAX的优点\">1.3.1 AJAX的优点</h4>\n<ol>\n<li class=\"lvl-3\">\n<p>可以无刷新页面与服务端进行通信</p>\n</li>\n<li class=\"lvl-3\">\n<p>允许你根据用户事件来更新部分页面内容</p>\n</li>\n</ol>\n<h4 id=\"1-3-2-AJAX-的缺点\">1.3.2 AJAX 的缺点</h4>\n<ol>\n<li class=\"lvl-3\">\n<p>没有浏览历史，不能回退</p>\n</li>\n<li class=\"lvl-3\">\n<p>存在跨域问题（同源）</p>\n</li>\n<li class=\"lvl-3\">\n<p>SEO不友好（爬虫获取不到信息）</p>\n</li>\n</ol>\n<h3 id=\"1-4-HTTP协议-超文本传输协议\">1.4 HTTP协议[超文本传输协议]</h3>\n<h4 id=\"1-4-1-HTTP请求报文\">1.4.1 HTTP请求报文</h4>\n<p>请求由以下元素组成：（摘自MDN）</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>一个 HTTP 的请求<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods\">方法</a>，经常是由一个动词像 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\"><code>GET</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\"><code>POST</code></a> 或者一个名词像 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\"><code>OPTIONS</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD\"><code>HEAD</code></a> 来定义客户端的动作行为。通常客户端的操作都是获取资源（GET 方法）或者发送 <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Forms\">HTML 表单</a>（POST 方法），虽然在一些情况下也会有其他操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>要获取的资源的路径，通常是上下文中就很明显的元素资源的 URL，它没有 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol\">protocol</a>（<code>http://</code>），<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Domain\">domain</a>（<code>developer.mozilla.org</code>），或是 TCP 的 <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Port\">port (en-US)</a>（HTTP 一般在 80 端口）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>HTTP 协议版本号。</p>\n</li>\n<li class=\"lvl-2\">\n<p>为服务端表达其他信息的可选<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\">标头</a>。</p>\n</li>\n<li class=\"lvl-2\">\n<p>对于一些像 POST 这样的方法，报文的主体（body）就包含了发送的资源，这与响应报文的主体类似。</p>\n</li>\n</ul>\n<h4 id=\"1-4-1HTTP响应报文\">1.4.1HTTP响应报文</h4>\n<p>响应报文包含了下面的元素：（摘自MDN）</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>HTTP 协议版本号。</p>\n</li>\n<li class=\"lvl-2\">\n<p>一个状态码（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\">状态码（status code）</a>），来告知对应请求执行成功或失败，以及失败的原因。</p>\n</li>\n<li class=\"lvl-2\">\n<p>一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。</p>\n</li>\n<li class=\"lvl-2\">\n<p>HTTP <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\">标头</a>，与请求标头类似。</p>\n</li>\n<li class=\"lvl-2\">\n<p>可选项，比起请求报文，响应报文中更常见地包含获取资源的主体。</p>\n</li>\n</ul>\n<h3 id=\"express基本使用\">express基本使用</h3>\n<p>Express：高度包容、快速而极简的 <a href=\"http://nodejs.org/\">Node.js</a> Web 框架</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.引入express</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; request, response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.创建引用对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.创建路由规则</span></span><br><span class=\"line\"><span class=\"comment\">//request是对请求报文的封装</span></span><br><span class=\"line\"><span class=\"comment\">//response 是对响应报文的封装</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置响应</span></span><br><span class=\"line\">    response.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;HELLO AJAX&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4.监听端口启动服务</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务已启动，8000端口监听中。。。&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Vue2核心","date":"2023-03-27T13:13:45.000Z","_content":"\n# 初识Vue\n\n[尚硅谷Vue教程](https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=5&share_source=copy_web&vd_source=b57f06a84c65383f958c6198780152f6)\n\n1.想让vue工作，必须创建一个Vue实例，且要传入一个配置对象\n\n2.Vue模板：\n\n```js\nnew Vue({\n        el: '#root',//el用于指定当前Vue实例为那个容器服务，通常用css选择器字符串\n        data: {\n            name: 'xxx'\n        }\n    })\n```\n\n3.Vue实例与容器是一一对应的\n\n4.`{{xxx}}`中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n\n**注意区分**：js表达式和js代码（语句）\n\n  - 表达式：一个表达式会产生一个值，可以放在任何地方：\n    - a+b\n    - demo(1)\n  - js代码（语句）\n    - if语句\n\n# Vue模板语法\n\n- 插值语法：\n  - 功能：用于解析标签体内容\n  - 写法：`{{xxx}}`中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n- 指令语法：\n  - 功能：用于解析标签（包括：标签属性，标签体内容，绑定事件 等等）\n  - 例子：`v-bind:href=\"xxx\"`  或  简写为 ` :href=\"xxx\"`,  xxx同样要写js表达式，且可以自动读取到data中的所有属性\n\nv-bind缩写：\n\n```js\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n```\n\n\n\n**注：**Vue中有许多指令，且形式都是：v-xxxx\n\n# Vue数据绑定\n\n**Vue有两种绑定的方式：**\n\n- 单向绑定（v-bind）：数据只能从data流向页面\n- 双向绑定（v-model）：数据不仅可以从data流向页面，还可以从页面流向data\n\n**注意：**\n\n​\t1.双向绑定（v-model）一般都应用在表单类元素上（如：input、select）\n\n​\t2.v-model：value 可以简写为v-model，因为v-model默认收集的就是value值\n\n# el和data的两种写法\n\n**el的两种写法：**\n\n```js\nconst v=new Vue({\n        //el: '#root',//第一种写法\n        data: {\n            name: 'xxx'\n        }\n    })\nv.$mount('#root')//第二种写法\n```\n\n\n\n**data的两种写法：**\n\n**目前两种写法都行，到组件时，data必须使用函数式**\n\n```js\nnew Vue({\n        el: '#root',\n    //第一种写法：对象式\n        /*data: {\n            name: 'xxx'\n        }*/\n    //第二种写法：函数式\n    data:function(){\n        console.log(this);//此处的this是Vue实例对象\n\t\treturn{\n        \tname:'尚硅谷'\n    \t}\n     }\n    })\n```\n\n**一个重要原则：**\n\n​\t\t由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不是Vue实例了\n\n**==观察发现：==**\n\n​\t1.data中的所有的属性，最后都出现在了vm身上\n\n​\t2. vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用\n\n# 事件处理\n\n### 事件的基本使用（点击事件）：\n\n1. 使用v-on：xxx或 @xxx 绑定事件，其中xxx是事件名\n\n   2. 事件的回调需要配置在methods对象中，最终会在vm上\n   2. methods中配置的函数，不需要箭头函数！否则this不是vm而是windows\n   2. methods中配置的函数，都是被Vue管理的函数，this的指向是vm 或组件实例对象\n   2. @click=\"demo\" 和 @click = \"demo($event)\" 效果一致，但后者可以传参\n\n### Vue中的事件修饰符：\n\n1. ==**prevent：阻止默认事件（常用）**==\n1. ==**stop：阻止事件冒泡（常用）**==\n1. ==**once：事件只触发一次（常用）**==\n1. capture：使用事件的捕获模式\n1. self：只有event.target是当前操作的元素时才触发事件\n1. passive：事件的默认行为立即执行，无需等待事件回调执行完毕\n\n### 键盘事件：\n\n1. Vue中常用的按键别名：\n \t1.  回车=>enter\n \t2.  删除=>delete（捕获\"删除\"和\"退格\"键）\n \t3. 退出=>esc\n \t4. 空格=>space\n \t5. 换行=>tab（特殊，必须配合keydown去使用）\n \t6. 上=>up，下=>down，左=>left，右=>right\n2. Vue未提供别名的按键，可以使用按键原始的key值去绑定，但要注意转为kebab-case（短横线命名）\n3. 系统修饰键（用法特殊）：ctrl、alt、shift、meta\n \t1. 配合keyup使用：按下修饰键的同时，在按下其他键，然后释放其他键，事件才被触发\n \t2. 配合keydown使用：正常触发事件\n4. Vue.config.keyCodes.自定义键名=键码，可以自定义按键别名\n\n# Vue计算属性\n\n1. 定义：通过计算来得到要用的属性\n2. **原理：底层借助了Object.defineproperty 方法提供的 getter 和 setter**\n3. **get 函数什么时候执行**\n \t1. **==初次读取时会执行一次==** \n \t2. ==**当依赖的数据发生改变时会被再次调用**==\n4. 优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便\n5. 备注：\n \t1. 计算属性最终会出现在vm上，直接读取使用即可\n \t2. 如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变\n\n```js\nnew Vue({\n        el: '#root',\n        data: {\n            firstName: '张',\n            lastName: '三'\n        },\n        computed: {\n            fullName: {\n                //get有什么作用：当有人读取fullName时，get就会被调用，且返回值就作为fullName的值\n                //get什么时候被调用：1. 初次读取fullName时  2. 所依赖的数据发生变化时\n                get() {\n                    // 此处的this是vm\n                    console.log(this);\n                    return this.firstName + '-' + this.lastName;\n                },\n                //set什么时候被调用：当fullNmae被修改时\n                set(value) {\n                    console.log(value);\n                    const arr = value.split('-');\n                    this.firstName = arr[0];\n                    this.lastName = arr[1];\n                }\n            }\n        }\n    })\n```\n\n==**当只有get时的简写：**==\n\n```js\nnew Vue({\n        el: '#root',\n        data: {\n            firstName: '张',\n            lastName: '三'\n        },\n        computed: {\n           fullName() {\n               console.log(this);\n               return this.firstName + '-' + this.lastName;\n            }\n        }\n    })\n```\n\n# Vue监视属性\n\n### 监视属性watch：\n\n1. 当被监视的属性变化时，回调函数自动调用，进行相关操作\n2. 监视的属性必须存在，才能进行监视！！\n3. 监视的两种写法：\n \t1. new Vue 时传入watch配置\n \t2. 通过vm.$watch监视\n\n**第一种写法:**\n\n```js\nwatch: {\n            firstName: {\n                //初始化时让handler调用一下\n                immediate: true,\n                //什么时候调用：当被监视的属性发生改变时\n                handler(newValue, oldValue) {\n                    console.log('被监视了', newValue, oldValue);\n                }\n            }\n        }\n```\n\n**第二种写法:**\n\n```js\nvm.$watch('firstName', {\n    //初始化时让handler调用一下\n    immediate: true,\n    //什么时候调用：当被监视的属性发生改变时\n    handler(newValue, oldValue) {\n        console.log('被监视了', newValue, oldValue);\n    }\n})\n```\n\n### 深度监视：\n\n1. Vue中的watch默认不监测对象内部值的改变（一层）\n1. 配置deep：true可以监测对象内部值的改变（多层）\n\n==**注意：**==\n\n1. **Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以**\n1. 使用watch时可根据数据的具体结构，决定是否采用深度监视\n\n```js\nwatch: {\n    //监视多级结构中某个属性的变化\n    'munber.a': {\n      \timmediate: true,\n        handler(newValue, oldValue) {\n            console.log('被监视了', newValue, oldValue);\n           }\n       }\n    //监视多级结构中某个属性的变化\n    munber: {\n        deep:ture,\n        immediate: true,\n         handler(newValue, oldValue) {\n             console.log('被监视了', newValue, oldValue);\n            }\n        }\n     }\n```\n\n## 计算属性与监视属性的区别：\n\n1. computed能完成的功能，watch都可以完成\n1. watch能完成的功能，computed不一定能完成（如：watch可以进行异步操作）\n\n==**两个重要的原则：**==\n\n1. 所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象\n1. 所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm 或 组件实例对象\n\n# Vue绑定样式\n\n### 绑定class样式：\n\n1. 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 `:class=\"mood\"`\n1. 绑定class样式--数组写法，适用于：样式的个数不确定，名字也不确定 `:class=\"classArr\"`\n1. 绑定class样式--对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 `:class=\"classObj\"`\n\n```js\n<body>\n    <div id=\"root\">\n        <!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 -->\n        <div class=\"basic\" :class=\"mood\" @click=\"changeMood\">{{name}}</div><br>\n        <!-- 绑定class样式--数组写法，适用于：样式的个数不确定，名字也不确定 -->\n        <div class=\"basic\" :class=\"classArr\">{{name}}</div><br>\n        <!-- 绑定class样式--对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 -->\n        <div class=\"basic\" :class=\"classObj\">{{name}}</div><br>\n    </div>\n</body>\n<script>\n    new Vue({\n        el: '#root',\n        data: {\n            name: 'XXX',\n            mood: 'normal',\n            classArr: ['a1', 'a2', 'a3'],\n            classObj: {\n                a1: false,\n                a2: false,\n                a3: false\n            }\n        }\n    })\n</script>\n```\n\n### 绑定style样式（较少用）：\n\n```js\n<body>\n\t<div class=\"basic\" :style=\"styleObj\">{{name}}</div>\n</body>\n<script>\n    new Vue({\n        el: '#root',\n        data: {\n            name: 'XXX',\n            mood: 'normal',\n            styleObj: {\n                fontSize: '40px',\n                color: 'red'\n            }\n        }\n    })\n</script>\n```\n\n# Vue渲染\n\n### 条件渲染：\n\n1. **v-if 写法：**\n \t1. v-if=\"表达式\"\n \t2. v-else-if=\"表达式\"\n \t3. v-else=\"表达式\"\n2. 适用于：切换频率较低的场景\n3. 特点：不展示的DOM元素直接被移除\n4. **注意：**v-if可以和 v-else-if、v-else 一起使用，但要求结构不能被打断\n\n\n\n1. **v-show写法：**v-show=\"表达式\"\n2. 适用于：切换频率较高的场景\n3. 特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉\n\n**==备注：==**使用v-if 的时，元素可能无法获取到，而使用v-show一定可以获取到\n\n```js\n//v-if与template的配合使用   \n<template v-if=\"n==1\">\n        <h2>1</h2>\n        <h2>2</h2>\n        <h2>3</h2>\n</template>\n```\n\n### 列表渲染：\n\n**v-for指令：**\n\n1. 用于展示列表数据\n1. 语法：v-for= \"(item，index) in xxx\"    **:key=\"index\"**\n1. 可遍历：数组、对象、字符串（很少用）、指定次数（很少用）\n\n**==react、vue中的key有什么作用？==**\n\n1. 虚拟DOM中的key的作用：key是虚拟DOM对象的标识，当数据发生变化时，**Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较**，比较规则如下：\n2. 对比规则：\n   1. 旧虚拟DOM中找到了与新虚拟DOM相同的key：\n      1. 若虚拟DOM中的内容没变，直接使用之前的真实DOM\n      2. 若虚拟DOM中的内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM\n   2. 旧虚拟DOM中未找到与新虚拟DOM相同的key，则直接创建新的真实DOM，随后渲染到页面中\n3. **用index作为key可能会引发的问题：**\n   1. 若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没有必要的真实DOM的更新==>页面效果没问题,但效率低\n   2. 如果结构中还包括输入类的DOM：会产生错误的更新==>页面有问题\n4. 开发中如何选择key？\n   1. 最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号等\n   1. 如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表用于展示，使用index作为key是没有问题的\n\n# Vue监视数据的原理\n\n1. vue会监视data中所有层次的数据\n2. 如何监测对象中的数据：**==通过setter实现监视，且要在new Vue时就传入要监测的数据==**\n  3. 对象中后追加的属性，Vue默认不做响应式处理\n  4. 如需给后添加的属性做响应式，请使用如下API：\n          \t1. **Vue.set(target，propertyName/index，value)**\n                    \t2. **vm.$set(target，propertyName/index，value)**\n5. 如何监测数组中的数据：通过包裹数组更新元素的方法实现：\n   1. 调用原生对应的方法对数据进行更新\n   2. 重新解析模板，进行更新页面\n6. 在Vue修改数组中的某个元素一定要有如下方法：\n   1. 使用这些API：push()  pop()   shift()  unshift()  splice()  sort()  reverse()\n   2. Vue.set()  或  vm.$set()\n\n**==特别注意：Vue.set（）和vm.$set（）不能给vm或vm的根数据对象添加属性==**\n\n# Vue收集表单数据\n\n1. `<input type=\"text\"/>`，则v-model收集的是value值，用户输入的就是value值\n2. `<input type=\"radio\"/>`，则v-model收集的是value值，且要给标签配置value值\n3. `<input type=\"checkbox\"/>`\n  4. 没有配置input的value属性，那么收集的就是checked（布尔值）\n  5. 配置input的value属性：\n          \t1. v-model的初始值是非数组，那么收集的就是checked（布尔值）\n                    \t2. v-model的初始值是数组，那么收集的就是value组成的数组\n\n**==备注：v-model的三个修饰符：==**\n\n1. lazy：失去焦点在收集数据\n1. number：输入字符串转为有效的数字\n1. trim：输入首尾空格过滤\n\n# Vue过滤器\n\n过滤器定义：对要显示的数据进行特定格式化后再显示（适用于一些简单的逻辑处理）\n\n语法：\n\n1. 注册过滤器：`Vue.filter（name，callback）`或`  new Vue{filter：{}}`\n1. 使用过滤器：`{{xxx | 过滤器名}}`  或  `v-bind`：属性=\"xxx | 过滤器名\"\n\n**备注：**\n\n1. 过滤器也可以接收额外的参数，多个过滤器也可以串联\n1. 并没有改变原本的数据，是产生新的对应的数据\n\n```js\n    // 全局过滤器 \n    Vue.filter('mySlice', function (value) {\n        return value.slice(0, 4)\n    })\n    new Vue({\n        el: '#root',\n        data: {\n            name: 'XXX',\n            mood: 'normal',\n            classArr: ['a1', 'a2', 'a3'],\n        },\n        // 局部过滤器\n        filters: {\n            timeFormater(value) {\n                return dayjs(value).format(str)\n            }\n        }\n    })\n```\n\n# Vue指令\n\n### 我们之前学过的指令：\n\n1. v-bind：单向绑定解析表达式，可简写为\t:xxx\n1. v-model：双向数据绑定\n1. v-for：遍历数组/对象/字符串\n1. v-on：绑定事件监听，可简写为@\n1. v-if：条件渲染：（动态控制节点是否存在）\n1. v-else：条件渲染：（动态控制节点是否存在）\n1. v-show：条件渲染：（动态控制节点是否展示）\n\n### v-test和v-html指令：\n\n**v-test指令：**\n\n1. 作用：向其所在的节点中渲染文本内容\n1. 与插值语法的区别：v-test会替换掉文本内容，`{{xx}}`则不会\n\n**v-htnl指令：**\n\n1. 作用：向指令节点中渲染包含html结构的内容\n2. 与插值语法的区别：\n  3. v-html会替换掉节点中所有的内容，`{{xx}}`则不会\n  4. v-html可以识别html结构\n5. 严重注意：**v-html有安全性问题！！！**\n  6. 在网站上动态渲染任意HTML是非常危险的，容易导致**XSS**攻击\n  7. 一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！\n\n### v-once指令：\n\n1. v-once所在节点在初次动态渲染后，就视为静态内容\n1. 以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能\n\n### v-pre指令：\n\n1. 跳过其所在节点的编译过程\n1. 可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译\n","source":"_posts/Vue2核心.md","raw":"---\ntitle: Vue2核心\ndate: 2023-03-27 21:13:45\ntags:\n---\n\n# 初识Vue\n\n[尚硅谷Vue教程](https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=5&share_source=copy_web&vd_source=b57f06a84c65383f958c6198780152f6)\n\n1.想让vue工作，必须创建一个Vue实例，且要传入一个配置对象\n\n2.Vue模板：\n\n```js\nnew Vue({\n        el: '#root',//el用于指定当前Vue实例为那个容器服务，通常用css选择器字符串\n        data: {\n            name: 'xxx'\n        }\n    })\n```\n\n3.Vue实例与容器是一一对应的\n\n4.`{{xxx}}`中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n\n**注意区分**：js表达式和js代码（语句）\n\n  - 表达式：一个表达式会产生一个值，可以放在任何地方：\n    - a+b\n    - demo(1)\n  - js代码（语句）\n    - if语句\n\n# Vue模板语法\n\n- 插值语法：\n  - 功能：用于解析标签体内容\n  - 写法：`{{xxx}}`中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性\n- 指令语法：\n  - 功能：用于解析标签（包括：标签属性，标签体内容，绑定事件 等等）\n  - 例子：`v-bind:href=\"xxx\"`  或  简写为 ` :href=\"xxx\"`,  xxx同样要写js表达式，且可以自动读取到data中的所有属性\n\nv-bind缩写：\n\n```js\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n```\n\n\n\n**注：**Vue中有许多指令，且形式都是：v-xxxx\n\n# Vue数据绑定\n\n**Vue有两种绑定的方式：**\n\n- 单向绑定（v-bind）：数据只能从data流向页面\n- 双向绑定（v-model）：数据不仅可以从data流向页面，还可以从页面流向data\n\n**注意：**\n\n​\t1.双向绑定（v-model）一般都应用在表单类元素上（如：input、select）\n\n​\t2.v-model：value 可以简写为v-model，因为v-model默认收集的就是value值\n\n# el和data的两种写法\n\n**el的两种写法：**\n\n```js\nconst v=new Vue({\n        //el: '#root',//第一种写法\n        data: {\n            name: 'xxx'\n        }\n    })\nv.$mount('#root')//第二种写法\n```\n\n\n\n**data的两种写法：**\n\n**目前两种写法都行，到组件时，data必须使用函数式**\n\n```js\nnew Vue({\n        el: '#root',\n    //第一种写法：对象式\n        /*data: {\n            name: 'xxx'\n        }*/\n    //第二种写法：函数式\n    data:function(){\n        console.log(this);//此处的this是Vue实例对象\n\t\treturn{\n        \tname:'尚硅谷'\n    \t}\n     }\n    })\n```\n\n**一个重要原则：**\n\n​\t\t由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不是Vue实例了\n\n**==观察发现：==**\n\n​\t1.data中的所有的属性，最后都出现在了vm身上\n\n​\t2. vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用\n\n# 事件处理\n\n### 事件的基本使用（点击事件）：\n\n1. 使用v-on：xxx或 @xxx 绑定事件，其中xxx是事件名\n\n   2. 事件的回调需要配置在methods对象中，最终会在vm上\n   2. methods中配置的函数，不需要箭头函数！否则this不是vm而是windows\n   2. methods中配置的函数，都是被Vue管理的函数，this的指向是vm 或组件实例对象\n   2. @click=\"demo\" 和 @click = \"demo($event)\" 效果一致，但后者可以传参\n\n### Vue中的事件修饰符：\n\n1. ==**prevent：阻止默认事件（常用）**==\n1. ==**stop：阻止事件冒泡（常用）**==\n1. ==**once：事件只触发一次（常用）**==\n1. capture：使用事件的捕获模式\n1. self：只有event.target是当前操作的元素时才触发事件\n1. passive：事件的默认行为立即执行，无需等待事件回调执行完毕\n\n### 键盘事件：\n\n1. Vue中常用的按键别名：\n \t1.  回车=>enter\n \t2.  删除=>delete（捕获\"删除\"和\"退格\"键）\n \t3. 退出=>esc\n \t4. 空格=>space\n \t5. 换行=>tab（特殊，必须配合keydown去使用）\n \t6. 上=>up，下=>down，左=>left，右=>right\n2. Vue未提供别名的按键，可以使用按键原始的key值去绑定，但要注意转为kebab-case（短横线命名）\n3. 系统修饰键（用法特殊）：ctrl、alt、shift、meta\n \t1. 配合keyup使用：按下修饰键的同时，在按下其他键，然后释放其他键，事件才被触发\n \t2. 配合keydown使用：正常触发事件\n4. Vue.config.keyCodes.自定义键名=键码，可以自定义按键别名\n\n# Vue计算属性\n\n1. 定义：通过计算来得到要用的属性\n2. **原理：底层借助了Object.defineproperty 方法提供的 getter 和 setter**\n3. **get 函数什么时候执行**\n \t1. **==初次读取时会执行一次==** \n \t2. ==**当依赖的数据发生改变时会被再次调用**==\n4. 优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便\n5. 备注：\n \t1. 计算属性最终会出现在vm上，直接读取使用即可\n \t2. 如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变\n\n```js\nnew Vue({\n        el: '#root',\n        data: {\n            firstName: '张',\n            lastName: '三'\n        },\n        computed: {\n            fullName: {\n                //get有什么作用：当有人读取fullName时，get就会被调用，且返回值就作为fullName的值\n                //get什么时候被调用：1. 初次读取fullName时  2. 所依赖的数据发生变化时\n                get() {\n                    // 此处的this是vm\n                    console.log(this);\n                    return this.firstName + '-' + this.lastName;\n                },\n                //set什么时候被调用：当fullNmae被修改时\n                set(value) {\n                    console.log(value);\n                    const arr = value.split('-');\n                    this.firstName = arr[0];\n                    this.lastName = arr[1];\n                }\n            }\n        }\n    })\n```\n\n==**当只有get时的简写：**==\n\n```js\nnew Vue({\n        el: '#root',\n        data: {\n            firstName: '张',\n            lastName: '三'\n        },\n        computed: {\n           fullName() {\n               console.log(this);\n               return this.firstName + '-' + this.lastName;\n            }\n        }\n    })\n```\n\n# Vue监视属性\n\n### 监视属性watch：\n\n1. 当被监视的属性变化时，回调函数自动调用，进行相关操作\n2. 监视的属性必须存在，才能进行监视！！\n3. 监视的两种写法：\n \t1. new Vue 时传入watch配置\n \t2. 通过vm.$watch监视\n\n**第一种写法:**\n\n```js\nwatch: {\n            firstName: {\n                //初始化时让handler调用一下\n                immediate: true,\n                //什么时候调用：当被监视的属性发生改变时\n                handler(newValue, oldValue) {\n                    console.log('被监视了', newValue, oldValue);\n                }\n            }\n        }\n```\n\n**第二种写法:**\n\n```js\nvm.$watch('firstName', {\n    //初始化时让handler调用一下\n    immediate: true,\n    //什么时候调用：当被监视的属性发生改变时\n    handler(newValue, oldValue) {\n        console.log('被监视了', newValue, oldValue);\n    }\n})\n```\n\n### 深度监视：\n\n1. Vue中的watch默认不监测对象内部值的改变（一层）\n1. 配置deep：true可以监测对象内部值的改变（多层）\n\n==**注意：**==\n\n1. **Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以**\n1. 使用watch时可根据数据的具体结构，决定是否采用深度监视\n\n```js\nwatch: {\n    //监视多级结构中某个属性的变化\n    'munber.a': {\n      \timmediate: true,\n        handler(newValue, oldValue) {\n            console.log('被监视了', newValue, oldValue);\n           }\n       }\n    //监视多级结构中某个属性的变化\n    munber: {\n        deep:ture,\n        immediate: true,\n         handler(newValue, oldValue) {\n             console.log('被监视了', newValue, oldValue);\n            }\n        }\n     }\n```\n\n## 计算属性与监视属性的区别：\n\n1. computed能完成的功能，watch都可以完成\n1. watch能完成的功能，computed不一定能完成（如：watch可以进行异步操作）\n\n==**两个重要的原则：**==\n\n1. 所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象\n1. 所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm 或 组件实例对象\n\n# Vue绑定样式\n\n### 绑定class样式：\n\n1. 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 `:class=\"mood\"`\n1. 绑定class样式--数组写法，适用于：样式的个数不确定，名字也不确定 `:class=\"classArr\"`\n1. 绑定class样式--对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 `:class=\"classObj\"`\n\n```js\n<body>\n    <div id=\"root\">\n        <!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 -->\n        <div class=\"basic\" :class=\"mood\" @click=\"changeMood\">{{name}}</div><br>\n        <!-- 绑定class样式--数组写法，适用于：样式的个数不确定，名字也不确定 -->\n        <div class=\"basic\" :class=\"classArr\">{{name}}</div><br>\n        <!-- 绑定class样式--对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 -->\n        <div class=\"basic\" :class=\"classObj\">{{name}}</div><br>\n    </div>\n</body>\n<script>\n    new Vue({\n        el: '#root',\n        data: {\n            name: 'XXX',\n            mood: 'normal',\n            classArr: ['a1', 'a2', 'a3'],\n            classObj: {\n                a1: false,\n                a2: false,\n                a3: false\n            }\n        }\n    })\n</script>\n```\n\n### 绑定style样式（较少用）：\n\n```js\n<body>\n\t<div class=\"basic\" :style=\"styleObj\">{{name}}</div>\n</body>\n<script>\n    new Vue({\n        el: '#root',\n        data: {\n            name: 'XXX',\n            mood: 'normal',\n            styleObj: {\n                fontSize: '40px',\n                color: 'red'\n            }\n        }\n    })\n</script>\n```\n\n# Vue渲染\n\n### 条件渲染：\n\n1. **v-if 写法：**\n \t1. v-if=\"表达式\"\n \t2. v-else-if=\"表达式\"\n \t3. v-else=\"表达式\"\n2. 适用于：切换频率较低的场景\n3. 特点：不展示的DOM元素直接被移除\n4. **注意：**v-if可以和 v-else-if、v-else 一起使用，但要求结构不能被打断\n\n\n\n1. **v-show写法：**v-show=\"表达式\"\n2. 适用于：切换频率较高的场景\n3. 特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉\n\n**==备注：==**使用v-if 的时，元素可能无法获取到，而使用v-show一定可以获取到\n\n```js\n//v-if与template的配合使用   \n<template v-if=\"n==1\">\n        <h2>1</h2>\n        <h2>2</h2>\n        <h2>3</h2>\n</template>\n```\n\n### 列表渲染：\n\n**v-for指令：**\n\n1. 用于展示列表数据\n1. 语法：v-for= \"(item，index) in xxx\"    **:key=\"index\"**\n1. 可遍历：数组、对象、字符串（很少用）、指定次数（很少用）\n\n**==react、vue中的key有什么作用？==**\n\n1. 虚拟DOM中的key的作用：key是虚拟DOM对象的标识，当数据发生变化时，**Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较**，比较规则如下：\n2. 对比规则：\n   1. 旧虚拟DOM中找到了与新虚拟DOM相同的key：\n      1. 若虚拟DOM中的内容没变，直接使用之前的真实DOM\n      2. 若虚拟DOM中的内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM\n   2. 旧虚拟DOM中未找到与新虚拟DOM相同的key，则直接创建新的真实DOM，随后渲染到页面中\n3. **用index作为key可能会引发的问题：**\n   1. 若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没有必要的真实DOM的更新==>页面效果没问题,但效率低\n   2. 如果结构中还包括输入类的DOM：会产生错误的更新==>页面有问题\n4. 开发中如何选择key？\n   1. 最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号等\n   1. 如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表用于展示，使用index作为key是没有问题的\n\n# Vue监视数据的原理\n\n1. vue会监视data中所有层次的数据\n2. 如何监测对象中的数据：**==通过setter实现监视，且要在new Vue时就传入要监测的数据==**\n  3. 对象中后追加的属性，Vue默认不做响应式处理\n  4. 如需给后添加的属性做响应式，请使用如下API：\n          \t1. **Vue.set(target，propertyName/index，value)**\n                    \t2. **vm.$set(target，propertyName/index，value)**\n5. 如何监测数组中的数据：通过包裹数组更新元素的方法实现：\n   1. 调用原生对应的方法对数据进行更新\n   2. 重新解析模板，进行更新页面\n6. 在Vue修改数组中的某个元素一定要有如下方法：\n   1. 使用这些API：push()  pop()   shift()  unshift()  splice()  sort()  reverse()\n   2. Vue.set()  或  vm.$set()\n\n**==特别注意：Vue.set（）和vm.$set（）不能给vm或vm的根数据对象添加属性==**\n\n# Vue收集表单数据\n\n1. `<input type=\"text\"/>`，则v-model收集的是value值，用户输入的就是value值\n2. `<input type=\"radio\"/>`，则v-model收集的是value值，且要给标签配置value值\n3. `<input type=\"checkbox\"/>`\n  4. 没有配置input的value属性，那么收集的就是checked（布尔值）\n  5. 配置input的value属性：\n          \t1. v-model的初始值是非数组，那么收集的就是checked（布尔值）\n                    \t2. v-model的初始值是数组，那么收集的就是value组成的数组\n\n**==备注：v-model的三个修饰符：==**\n\n1. lazy：失去焦点在收集数据\n1. number：输入字符串转为有效的数字\n1. trim：输入首尾空格过滤\n\n# Vue过滤器\n\n过滤器定义：对要显示的数据进行特定格式化后再显示（适用于一些简单的逻辑处理）\n\n语法：\n\n1. 注册过滤器：`Vue.filter（name，callback）`或`  new Vue{filter：{}}`\n1. 使用过滤器：`{{xxx | 过滤器名}}`  或  `v-bind`：属性=\"xxx | 过滤器名\"\n\n**备注：**\n\n1. 过滤器也可以接收额外的参数，多个过滤器也可以串联\n1. 并没有改变原本的数据，是产生新的对应的数据\n\n```js\n    // 全局过滤器 \n    Vue.filter('mySlice', function (value) {\n        return value.slice(0, 4)\n    })\n    new Vue({\n        el: '#root',\n        data: {\n            name: 'XXX',\n            mood: 'normal',\n            classArr: ['a1', 'a2', 'a3'],\n        },\n        // 局部过滤器\n        filters: {\n            timeFormater(value) {\n                return dayjs(value).format(str)\n            }\n        }\n    })\n```\n\n# Vue指令\n\n### 我们之前学过的指令：\n\n1. v-bind：单向绑定解析表达式，可简写为\t:xxx\n1. v-model：双向数据绑定\n1. v-for：遍历数组/对象/字符串\n1. v-on：绑定事件监听，可简写为@\n1. v-if：条件渲染：（动态控制节点是否存在）\n1. v-else：条件渲染：（动态控制节点是否存在）\n1. v-show：条件渲染：（动态控制节点是否展示）\n\n### v-test和v-html指令：\n\n**v-test指令：**\n\n1. 作用：向其所在的节点中渲染文本内容\n1. 与插值语法的区别：v-test会替换掉文本内容，`{{xx}}`则不会\n\n**v-htnl指令：**\n\n1. 作用：向指令节点中渲染包含html结构的内容\n2. 与插值语法的区别：\n  3. v-html会替换掉节点中所有的内容，`{{xx}}`则不会\n  4. v-html可以识别html结构\n5. 严重注意：**v-html有安全性问题！！！**\n  6. 在网站上动态渲染任意HTML是非常危险的，容易导致**XSS**攻击\n  7. 一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！\n\n### v-once指令：\n\n1. v-once所在节点在初次动态渲染后，就视为静态内容\n1. 以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能\n\n### v-pre指令：\n\n1. 跳过其所在节点的编译过程\n1. 可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译\n","slug":"Vue2核心","published":1,"updated":"2023-04-09T09:56:19.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9aw94f0003e8uffu9t3qq6","content":"<h1>初识Vue</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=5&amp;share_source=copy_web&amp;vd_source=b57f06a84c65383f958c6198780152f6\">尚硅谷Vue教程</a></p>\n<p>1.想让vue工作，必须创建一个Vue实例，且要传入一个配置对象</p>\n<p>2.Vue模板：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,<span class=\"comment\">//el用于指定当前Vue实例为那个容器服务，通常用css选择器字符串</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>3.Vue实例与容器是一一对应的</p>\n<p>4.<code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</p>\n<p><strong>注意区分</strong>：js表达式和js代码（语句）</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>表达式：一个表达式会产生一个值，可以放在任何地方：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">a+b</li>\n<li class=\"lvl-6\">demo(1)</li>\n</ul>\n</li>\n<li class=\"lvl-4\">\n<p>js代码（语句）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">if语句</li>\n</ul>\n</li>\n</ul>\n<h1>Vue模板语法</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>插值语法：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">功能：用于解析标签体内容</li>\n<li class=\"lvl-4\">写法：<code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>指令语法：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">功能：用于解析标签（包括：标签属性，标签体内容，绑定事件 等等）</li>\n<li class=\"lvl-4\">例子：<code>v-bind:href=&quot;xxx&quot;</code>  或  简写为 <code> :href=&quot;xxx&quot;</code>,  xxx同样要写js表达式，且可以自动读取到data中的所有属性</li>\n</ul>\n</li>\n</ul>\n<p>v-bind缩写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 缩写 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 动态参数的缩写 (<span class=\"number\">2.6</span><span class=\"number\">.0</span>+) --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>**注：**Vue中有许多指令，且形式都是：v-xxxx</p>\n<h1>Vue数据绑定</h1>\n<p><strong>Vue有两种绑定的方式：</strong></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>单向绑定（v-bind）：数据只能从data流向页面</p>\n</li>\n<li class=\"lvl-2\">\n<p>双向绑定（v-model）：数据不仅可以从data流向页面，还可以从页面流向data</p>\n</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>​\t1.双向绑定（v-model）一般都应用在表单类元素上（如：input、select）</p>\n<p>​\t2.v-model：value 可以简写为v-model，因为v-model默认收集的就是value值</p>\n<h1>el和data的两种写法</h1>\n<p><strong>el的两种写法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v=<span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">//el: &#x27;#root&#x27;,//第一种写法</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">v.$mount(<span class=\"string\">&#x27;#root&#x27;</span>)<span class=\"comment\">//第二种写法</span></span><br></pre></td></tr></table></figure>\n<p><strong>data的两种写法：</strong></p>\n<p><strong>目前两种写法都行，到组件时，data必须使用函数式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//第一种写法：对象式</span></span><br><span class=\"line\">        <span class=\"comment\">/*data: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &#x27;xxx&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;*/</span></span><br><span class=\"line\">    <span class=\"comment\">//第二种写法：函数式</span></span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);<span class=\"comment\">//此处的this是Vue实例对象</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        \t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;尚硅谷&#x27;</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>一个重要原则：</strong></p>\n<p>​\t\t由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不是Vue实例了</p>\n<p><strong><mark>观察发现：</mark></strong></p>\n<p>​\t1.data中的所有的属性，最后都出现在了vm身上</p>\n<p>​\t2. vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用</p>\n<h1>事件处理</h1>\n<h3 id=\"事件的基本使用（点击事件）：\">事件的基本使用（点击事件）：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>使用v-on：xxx或 @xxx 绑定事件，其中xxx是事件名</p>\n<ol start=\"2\">\n<li class=\"lvl-6\">事件的回调需要配置在methods对象中，最终会在vm上</li>\n<li class=\"lvl-6\">methods中配置的函数，不需要箭头函数！否则this不是vm而是windows</li>\n<li class=\"lvl-6\">methods中配置的函数，都是被Vue管理的函数，this的指向是vm 或组件实例对象</li>\n<li class=\"lvl-6\">@click=“demo” 和 @click = “demo($event)” 效果一致，但后者可以传参</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Vue中的事件修饰符：\">Vue中的事件修饰符：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p><mark><strong>prevent：阻止默认事件（常用）</strong></mark></p>\n</li>\n<li class=\"lvl-3\">\n<p><mark><strong>stop：阻止事件冒泡（常用）</strong></mark></p>\n</li>\n<li class=\"lvl-3\">\n<p><mark><strong>once：事件只触发一次（常用）</strong></mark></p>\n</li>\n<li class=\"lvl-3\">\n<p>capture：使用事件的捕获模式</p>\n</li>\n<li class=\"lvl-3\">\n<p>self：只有event.target是当前操作的元素时才触发事件</p>\n</li>\n<li class=\"lvl-3\">\n<p>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</p>\n</li>\n</ol>\n<h3 id=\"键盘事件：\">键盘事件：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>Vue中常用的按键别名：</p>\n<ol>\n<li class=\"lvl-8\">回车=&gt;enter</li>\n<li class=\"lvl-8\">删除=&gt;delete（捕获&quot;删除&quot;和&quot;退格&quot;键）</li>\n<li class=\"lvl-7\">退出=&gt;esc</li>\n<li class=\"lvl-7\">空格=&gt;space</li>\n<li class=\"lvl-7\">换行=&gt;tab（特殊，必须配合keydown去使用）</li>\n<li class=\"lvl-7\">上=&gt;up，下=&gt;down，左=&gt;left，右=&gt;right</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但要注意转为kebab-case（短横线命名）</p>\n</li>\n<li class=\"lvl-3\">\n<p>系统修饰键（用法特殊）：ctrl、alt、shift、meta</p>\n<ol>\n<li class=\"lvl-7\">配合keyup使用：按下修饰键的同时，在按下其他键，然后释放其他键，事件才被触发</li>\n<li class=\"lvl-7\">配合keydown使用：正常触发事件</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>Vue.config.keyCodes.自定义键名=键码，可以自定义按键别名</p>\n</li>\n</ol>\n<h1>Vue计算属性</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>定义：通过计算来得到要用的属性</p>\n</li>\n<li class=\"lvl-3\">\n<p><strong>原理：底层借助了Object.defineproperty 方法提供的 getter 和 setter</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p><strong>get 函数什么时候执行</strong></p>\n<ol>\n<li class=\"lvl-7\"><strong><mark>初次读取时会执行一次</mark></strong></li>\n<li class=\"lvl-7\"><mark><strong>当依赖的数据发生改变时会被再次调用</strong></mark></li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</p>\n</li>\n<li class=\"lvl-3\">\n<p>备注：</p>\n<ol>\n<li class=\"lvl-7\">计算属性最终会出现在vm上，直接读取使用即可</li>\n<li class=\"lvl-7\">如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;张&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;三&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">//get有什么作用：当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span><br><span class=\"line\">                <span class=\"comment\">//get什么时候被调用：1. 初次读取fullName时  2. 所依赖的数据发生变化时</span></span><br><span class=\"line\">                <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此处的this是vm</span></span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"comment\">//set什么时候被调用：当fullNmae被修改时</span></span><br><span class=\"line\">                <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> arr = value.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span> = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p><mark><strong>当只有get时的简写：</strong></mark></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;张&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;三&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">           <span class=\"title function_\">fullName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">               <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h1>Vue监视属性</h1>\n<h3 id=\"监视属性watch：\">监视属性watch：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>当被监视的属性变化时，回调函数自动调用，进行相关操作</p>\n</li>\n<li class=\"lvl-3\">\n<p>监视的属性必须存在，才能进行监视！！</p>\n</li>\n<li class=\"lvl-3\">\n<p>监视的两种写法：</p>\n<ol>\n<li class=\"lvl-7\">new Vue 时传入watch配置</li>\n<li class=\"lvl-7\">通过vm.$watch监视</li>\n</ol>\n</li>\n</ol>\n<p><strong>第一种写法:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">firstName</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">//初始化时让handler调用一下</span></span><br><span class=\"line\">                <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"comment\">//什么时候调用：当被监视的属性发生改变时</span></span><br><span class=\"line\">                <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第二种写法:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$watch(<span class=\"string\">&#x27;firstName&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化时让handler调用一下</span></span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">//什么时候调用：当被监视的属性发生改变时</span></span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"深度监视：\">深度监视：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>Vue中的watch默认不监测对象内部值的改变（一层）</p>\n</li>\n<li class=\"lvl-3\">\n<p>配置deep：true可以监测对象内部值的改变（多层）</p>\n</li>\n</ol>\n<p><mark><strong>注意：</strong></mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p><strong>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>使用watch时可根据数据的具体结构，决定是否采用深度监视</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//监视多级结构中某个属性的变化</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;munber.a&#x27;</span>: &#123;</span><br><span class=\"line\">      \t<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    <span class=\"comment\">//监视多级结构中某个属性的变化</span></span><br><span class=\"line\">    <span class=\"attr\">munber</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">deep</span>:ture,</span><br><span class=\"line\">        <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"计算属性与监视属性的区别：\">计算属性与监视属性的区别：</h2>\n<ol>\n<li class=\"lvl-3\">\n<p>computed能完成的功能，watch都可以完成</p>\n</li>\n<li class=\"lvl-3\">\n<p>watch能完成的功能，computed不一定能完成（如：watch可以进行异步操作）</p>\n</li>\n</ol>\n<p><mark><strong>两个重要的原则：</strong></mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象</p>\n</li>\n<li class=\"lvl-3\">\n<p>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm 或 组件实例对象</p>\n</li>\n</ol>\n<h1>Vue绑定样式</h1>\n<h3 id=\"绑定class样式：\">绑定class样式：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>绑定class样式–字符串写法，适用于：样式的类名不确定，需要动态指定 <code>:class=&quot;mood&quot;</code></p>\n</li>\n<li class=\"lvl-3\">\n<p>绑定class样式–数组写法，适用于：样式的个数不确定，名字也不确定 <code>:class=&quot;classArr&quot;</code></p>\n</li>\n<li class=\"lvl-3\">\n<p>绑定class样式–对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 <code>:class=&quot;classObj&quot;</code></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class=\"line\">        &lt;!-- 绑定class样式--数组写法，适用于：样式的个数不确定，名字也不确定 --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class=\"line\">        &lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: &#x27;#root&#x27;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            name: &#x27;XXX&#x27;,</span><br><span class=\"line\">            mood: &#x27;normal&#x27;,</span><br><span class=\"line\">            classArr: [&#x27;a1&#x27;, &#x27;a2&#x27;, &#x27;a3&#x27;],</span><br><span class=\"line\">            classObj: &#123;</span><br><span class=\"line\">                a1: false,</span><br><span class=\"line\">                a2: false,</span><br><span class=\"line\">                a3: false</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绑定style样式（较少用）：\">绑定style样式（较少用）：</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;basic&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;XXX&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">mood</span>: <span class=\"string\">&#x27;normal&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">styleObj</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;40px&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1>Vue渲染</h1>\n<h3 id=\"条件渲染：\">条件渲染：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p><strong>v-if 写法：</strong></p>\n<ol>\n<li class=\"lvl-7\">v-if=“表达式”</li>\n<li class=\"lvl-7\">v-else-if=“表达式”</li>\n<li class=\"lvl-7\">v-else=“表达式”</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>适用于：切换频率较低的场景</p>\n</li>\n<li class=\"lvl-3\">\n<p>特点：不展示的DOM元素直接被移除</p>\n</li>\n<li class=\"lvl-3\">\n<p>**注意：**v-if可以和 v-else-if、v-else 一起使用，但要求结构不能被打断</p>\n</li>\n<li class=\"lvl-3\">\n<p>**v-show写法：**v-show=“表达式”</p>\n</li>\n<li class=\"lvl-3\">\n<p>适用于：切换频率较高的场景</p>\n</li>\n<li class=\"lvl-3\">\n<p>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p>\n</li>\n</ol>\n<p>**<mark>备注：</mark>**使用v-if 的时，元素可能无法获取到，而使用v-show一定可以获取到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//v-if与template的配合使用   </span></span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;n==1&quot;</span>&gt;</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"列表渲染：\">列表渲染：</h3>\n<p><strong>v-for指令：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>用于展示列表数据</p>\n</li>\n<li class=\"lvl-3\">\n<p>语法：v-for= “(item，index) in xxx”    <strong>:key=“index”</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>可遍历：数组、对象、字符串（很少用）、指定次数（很少用）</p>\n</li>\n</ol>\n<p><strong><mark>react、vue中的key有什么作用？</mark></strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>虚拟DOM中的key的作用：key是虚拟DOM对象的标识，当数据发生变化时，<strong>Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较</strong>，比较规则如下：</p>\n</li>\n<li class=\"lvl-3\">\n<p>对比规则：</p>\n<ol>\n<li class=\"lvl-6\">旧虚拟DOM中找到了与新虚拟DOM相同的key：\n<ol>\n<li class=\"lvl-9\">若虚拟DOM中的内容没变，直接使用之前的真实DOM</li>\n<li class=\"lvl-9\">若虚拟DOM中的内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li>\n</ol>\n</li>\n<li class=\"lvl-6\">旧虚拟DOM中未找到与新虚拟DOM相同的key，则直接创建新的真实DOM，随后渲染到页面中</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p><strong>用index作为key可能会引发的问题：</strong></p>\n<ol>\n<li class=\"lvl-6\">若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没有必要的真实DOM的更新==&gt;页面效果没问题,但效率低</li>\n<li class=\"lvl-6\">如果结构中还包括输入类的DOM：会产生错误的更新==&gt;页面有问题</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>开发中如何选择key？</p>\n<ol>\n<li class=\"lvl-6\">最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号等</li>\n<li class=\"lvl-6\">如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</li>\n</ol>\n</li>\n</ol>\n<h1>Vue监视数据的原理</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>vue会监视data中所有层次的数据</p>\n</li>\n<li class=\"lvl-3\">\n<p>如何监测对象中的数据：<strong><mark>通过setter实现监视，且要在new Vue时就传入要监测的数据</mark></strong></p>\n</li>\n<li class=\"lvl-5\">\n<p>对象中后追加的属性，Vue默认不做响应式处理</p>\n</li>\n<li class=\"lvl-5\">\n<p>如需给后添加的属性做响应式，请使用如下API：<br>\n1. <strong>Vue.set(target，propertyName/index，value)</strong><br>\n2. <strong>vm.$set(target，propertyName/index，value)</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>如何监测数组中的数据：通过包裹数组更新元素的方法实现：</p>\n<ol>\n<li class=\"lvl-6\">调用原生对应的方法对数据进行更新</li>\n<li class=\"lvl-6\">重新解析模板，进行更新页面</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>在Vue修改数组中的某个元素一定要有如下方法：</p>\n<ol>\n<li class=\"lvl-6\">使用这些API：push()  pop()   shift()  unshift()  splice()  sort()  reverse()</li>\n<li class=\"lvl-6\">Vue.set()  或  vm.$set()</li>\n</ol>\n</li>\n</ol>\n<p><strong><mark>特别注意：Vue.set（）和vm.$set（）不能给vm或vm的根数据对象添加属性</mark></strong></p>\n<h1>Vue收集表单数据</h1>\n<ol>\n<li class=\"lvl-3\">\n<p><code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值</p>\n</li>\n<li class=\"lvl-3\">\n<p><code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值</p>\n</li>\n<li class=\"lvl-3\">\n<p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p>\n</li>\n<li class=\"lvl-5\">\n<p>没有配置input的value属性，那么收集的就是checked（布尔值）</p>\n</li>\n<li class=\"lvl-5\">\n<p>配置input的value属性：<br>\n1. v-model的初始值是非数组，那么收集的就是checked（布尔值）<br>\n2. v-model的初始值是数组，那么收集的就是value组成的数组</p>\n</li>\n</ol>\n<p><strong><mark>备注：v-model的三个修饰符：</mark></strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>lazy：失去焦点在收集数据</p>\n</li>\n<li class=\"lvl-3\">\n<p>number：输入字符串转为有效的数字</p>\n</li>\n<li class=\"lvl-3\">\n<p>trim：输入首尾空格过滤</p>\n</li>\n</ol>\n<h1>Vue过滤器</h1>\n<p>过滤器定义：对要显示的数据进行特定格式化后再显示（适用于一些简单的逻辑处理）</p>\n<p>语法：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>注册过滤器：<code>Vue.filter（name，callback）</code>或<code>  new Vue&#123;filter：&#123;&#125;&#125;</code></p>\n</li>\n<li class=\"lvl-3\">\n<p>使用过滤器：<code>&#123;&#123;xxx | 过滤器名&#125;&#125;</code>  或  <code>v-bind</code>：属性=“xxx | 过滤器名”</p>\n</li>\n</ol>\n<p><strong>备注：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>过滤器也可以接收额外的参数，多个过滤器也可以串联</p>\n</li>\n<li class=\"lvl-3\">\n<p>并没有改变原本的数据，是产生新的对应的数据</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局过滤器 </span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">filter</span>(<span class=\"string\">&#x27;mySlice&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;XXX&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">mood</span>: <span class=\"string\">&#x27;normal&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">classArr</span>: [<span class=\"string\">&#x27;a1&#x27;</span>, <span class=\"string\">&#x27;a2&#x27;</span>, <span class=\"string\">&#x27;a3&#x27;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 局部过滤器</span></span><br><span class=\"line\">    <span class=\"attr\">filters</span>: &#123;</span><br><span class=\"line\">        <span class=\"title function_\">timeFormater</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">dayjs</span>(value).<span class=\"title function_\">format</span>(str)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1>Vue指令</h1>\n<h3 id=\"我们之前学过的指令：\">我们之前学过的指令：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>v-bind：单向绑定解析表达式，可简写为\t:xxx</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-model：双向数据绑定</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-for：遍历数组/对象/字符串</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-on：绑定事件监听，可简写为@</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-if：条件渲染：（动态控制节点是否存在）</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-else：条件渲染：（动态控制节点是否存在）</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-show：条件渲染：（动态控制节点是否展示）</p>\n</li>\n</ol>\n<h3 id=\"v-test和v-html指令：\">v-test和v-html指令：</h3>\n<p><strong>v-test指令：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>作用：向其所在的节点中渲染文本内容</p>\n</li>\n<li class=\"lvl-3\">\n<p>与插值语法的区别：v-test会替换掉文本内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</p>\n</li>\n</ol>\n<p><strong>v-htnl指令：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>作用：向指令节点中渲染包含html结构的内容</p>\n</li>\n<li class=\"lvl-3\">\n<p>与插值语法的区别：</p>\n</li>\n<li class=\"lvl-5\">\n<p>v-html会替换掉节点中所有的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</p>\n</li>\n<li class=\"lvl-5\">\n<p>v-html可以识别html结构</p>\n</li>\n<li class=\"lvl-3\">\n<p>严重注意：<strong>v-html有安全性问题！！！</strong></p>\n</li>\n<li class=\"lvl-5\">\n<p>在网站上动态渲染任意HTML是非常危险的，容易导致<strong>XSS</strong>攻击</p>\n</li>\n<li class=\"lvl-5\">\n<p>一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p>\n</li>\n</ol>\n<h3 id=\"v-once指令：\">v-once指令：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>v-once所在节点在初次动态渲染后，就视为静态内容</p>\n</li>\n<li class=\"lvl-3\">\n<p>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</p>\n</li>\n</ol>\n<h3 id=\"v-pre指令：\">v-pre指令：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>跳过其所在节点的编译过程</p>\n</li>\n<li class=\"lvl-3\">\n<p>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</p>\n</li>\n</ol>\n","site":{"data":{}},"cover":"/medias/cover/02.png","excerpt":"","more":"<h1>初识Vue</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=5&amp;share_source=copy_web&amp;vd_source=b57f06a84c65383f958c6198780152f6\">尚硅谷Vue教程</a></p>\n<p>1.想让vue工作，必须创建一个Vue实例，且要传入一个配置对象</p>\n<p>2.Vue模板：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,<span class=\"comment\">//el用于指定当前Vue实例为那个容器服务，通常用css选择器字符串</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>3.Vue实例与容器是一一对应的</p>\n<p>4.<code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</p>\n<p><strong>注意区分</strong>：js表达式和js代码（语句）</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>表达式：一个表达式会产生一个值，可以放在任何地方：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">a+b</li>\n<li class=\"lvl-6\">demo(1)</li>\n</ul>\n</li>\n<li class=\"lvl-4\">\n<p>js代码（语句）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">if语句</li>\n</ul>\n</li>\n</ul>\n<h1>Vue模板语法</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>插值语法：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">功能：用于解析标签体内容</li>\n<li class=\"lvl-4\">写法：<code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>指令语法：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">功能：用于解析标签（包括：标签属性，标签体内容，绑定事件 等等）</li>\n<li class=\"lvl-4\">例子：<code>v-bind:href=&quot;xxx&quot;</code>  或  简写为 <code> :href=&quot;xxx&quot;</code>,  xxx同样要写js表达式，且可以自动读取到data中的所有属性</li>\n</ul>\n</li>\n</ul>\n<p>v-bind缩写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 缩写 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 动态参数的缩写 (<span class=\"number\">2.6</span><span class=\"number\">.0</span>+) --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>**注：**Vue中有许多指令，且形式都是：v-xxxx</p>\n<h1>Vue数据绑定</h1>\n<p><strong>Vue有两种绑定的方式：</strong></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>单向绑定（v-bind）：数据只能从data流向页面</p>\n</li>\n<li class=\"lvl-2\">\n<p>双向绑定（v-model）：数据不仅可以从data流向页面，还可以从页面流向data</p>\n</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>​\t1.双向绑定（v-model）一般都应用在表单类元素上（如：input、select）</p>\n<p>​\t2.v-model：value 可以简写为v-model，因为v-model默认收集的就是value值</p>\n<h1>el和data的两种写法</h1>\n<p><strong>el的两种写法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v=<span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">//el: &#x27;#root&#x27;,//第一种写法</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">v.$mount(<span class=\"string\">&#x27;#root&#x27;</span>)<span class=\"comment\">//第二种写法</span></span><br></pre></td></tr></table></figure>\n<p><strong>data的两种写法：</strong></p>\n<p><strong>目前两种写法都行，到组件时，data必须使用函数式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//第一种写法：对象式</span></span><br><span class=\"line\">        <span class=\"comment\">/*data: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            name: &#x27;xxx&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;*/</span></span><br><span class=\"line\">    <span class=\"comment\">//第二种写法：函数式</span></span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);<span class=\"comment\">//此处的this是Vue实例对象</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        \t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;尚硅谷&#x27;</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>一个重要原则：</strong></p>\n<p>​\t\t由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不是Vue实例了</p>\n<p><strong><mark>观察发现：</mark></strong></p>\n<p>​\t1.data中的所有的属性，最后都出现在了vm身上</p>\n<p>​\t2. vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用</p>\n<h1>事件处理</h1>\n<h3 id=\"事件的基本使用（点击事件）：\">事件的基本使用（点击事件）：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>使用v-on：xxx或 @xxx 绑定事件，其中xxx是事件名</p>\n<ol start=\"2\">\n<li class=\"lvl-6\">事件的回调需要配置在methods对象中，最终会在vm上</li>\n<li class=\"lvl-6\">methods中配置的函数，不需要箭头函数！否则this不是vm而是windows</li>\n<li class=\"lvl-6\">methods中配置的函数，都是被Vue管理的函数，this的指向是vm 或组件实例对象</li>\n<li class=\"lvl-6\">@click=“demo” 和 @click = “demo($event)” 效果一致，但后者可以传参</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Vue中的事件修饰符：\">Vue中的事件修饰符：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p><mark><strong>prevent：阻止默认事件（常用）</strong></mark></p>\n</li>\n<li class=\"lvl-3\">\n<p><mark><strong>stop：阻止事件冒泡（常用）</strong></mark></p>\n</li>\n<li class=\"lvl-3\">\n<p><mark><strong>once：事件只触发一次（常用）</strong></mark></p>\n</li>\n<li class=\"lvl-3\">\n<p>capture：使用事件的捕获模式</p>\n</li>\n<li class=\"lvl-3\">\n<p>self：只有event.target是当前操作的元素时才触发事件</p>\n</li>\n<li class=\"lvl-3\">\n<p>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</p>\n</li>\n</ol>\n<h3 id=\"键盘事件：\">键盘事件：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>Vue中常用的按键别名：</p>\n<ol>\n<li class=\"lvl-8\">回车=&gt;enter</li>\n<li class=\"lvl-8\">删除=&gt;delete（捕获&quot;删除&quot;和&quot;退格&quot;键）</li>\n<li class=\"lvl-7\">退出=&gt;esc</li>\n<li class=\"lvl-7\">空格=&gt;space</li>\n<li class=\"lvl-7\">换行=&gt;tab（特殊，必须配合keydown去使用）</li>\n<li class=\"lvl-7\">上=&gt;up，下=&gt;down，左=&gt;left，右=&gt;right</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但要注意转为kebab-case（短横线命名）</p>\n</li>\n<li class=\"lvl-3\">\n<p>系统修饰键（用法特殊）：ctrl、alt、shift、meta</p>\n<ol>\n<li class=\"lvl-7\">配合keyup使用：按下修饰键的同时，在按下其他键，然后释放其他键，事件才被触发</li>\n<li class=\"lvl-7\">配合keydown使用：正常触发事件</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>Vue.config.keyCodes.自定义键名=键码，可以自定义按键别名</p>\n</li>\n</ol>\n<h1>Vue计算属性</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>定义：通过计算来得到要用的属性</p>\n</li>\n<li class=\"lvl-3\">\n<p><strong>原理：底层借助了Object.defineproperty 方法提供的 getter 和 setter</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p><strong>get 函数什么时候执行</strong></p>\n<ol>\n<li class=\"lvl-7\"><strong><mark>初次读取时会执行一次</mark></strong></li>\n<li class=\"lvl-7\"><mark><strong>当依赖的数据发生改变时会被再次调用</strong></mark></li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</p>\n</li>\n<li class=\"lvl-3\">\n<p>备注：</p>\n<ol>\n<li class=\"lvl-7\">计算属性最终会出现在vm上，直接读取使用即可</li>\n<li class=\"lvl-7\">如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;张&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;三&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">//get有什么作用：当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span><br><span class=\"line\">                <span class=\"comment\">//get什么时候被调用：1. 初次读取fullName时  2. 所依赖的数据发生变化时</span></span><br><span class=\"line\">                <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此处的this是vm</span></span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"comment\">//set什么时候被调用：当fullNmae被修改时</span></span><br><span class=\"line\">                <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> arr = value.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span> = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p><mark><strong>当只有get时的简写：</strong></mark></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;张&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;三&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">           <span class=\"title function_\">fullName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">               <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h1>Vue监视属性</h1>\n<h3 id=\"监视属性watch：\">监视属性watch：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>当被监视的属性变化时，回调函数自动调用，进行相关操作</p>\n</li>\n<li class=\"lvl-3\">\n<p>监视的属性必须存在，才能进行监视！！</p>\n</li>\n<li class=\"lvl-3\">\n<p>监视的两种写法：</p>\n<ol>\n<li class=\"lvl-7\">new Vue 时传入watch配置</li>\n<li class=\"lvl-7\">通过vm.$watch监视</li>\n</ol>\n</li>\n</ol>\n<p><strong>第一种写法:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">firstName</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">//初始化时让handler调用一下</span></span><br><span class=\"line\">                <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"comment\">//什么时候调用：当被监视的属性发生改变时</span></span><br><span class=\"line\">                <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第二种写法:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$watch(<span class=\"string\">&#x27;firstName&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化时让handler调用一下</span></span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">//什么时候调用：当被监视的属性发生改变时</span></span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"深度监视：\">深度监视：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>Vue中的watch默认不监测对象内部值的改变（一层）</p>\n</li>\n<li class=\"lvl-3\">\n<p>配置deep：true可以监测对象内部值的改变（多层）</p>\n</li>\n</ol>\n<p><mark><strong>注意：</strong></mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p><strong>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>使用watch时可根据数据的具体结构，决定是否采用深度监视</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//监视多级结构中某个属性的变化</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;munber.a&#x27;</span>: &#123;</span><br><span class=\"line\">      \t<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    <span class=\"comment\">//监视多级结构中某个属性的变化</span></span><br><span class=\"line\">    <span class=\"attr\">munber</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">deep</span>:ture,</span><br><span class=\"line\">        <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"计算属性与监视属性的区别：\">计算属性与监视属性的区别：</h2>\n<ol>\n<li class=\"lvl-3\">\n<p>computed能完成的功能，watch都可以完成</p>\n</li>\n<li class=\"lvl-3\">\n<p>watch能完成的功能，computed不一定能完成（如：watch可以进行异步操作）</p>\n</li>\n</ol>\n<p><mark><strong>两个重要的原则：</strong></mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象</p>\n</li>\n<li class=\"lvl-3\">\n<p>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm 或 组件实例对象</p>\n</li>\n</ol>\n<h1>Vue绑定样式</h1>\n<h3 id=\"绑定class样式：\">绑定class样式：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>绑定class样式–字符串写法，适用于：样式的类名不确定，需要动态指定 <code>:class=&quot;mood&quot;</code></p>\n</li>\n<li class=\"lvl-3\">\n<p>绑定class样式–数组写法，适用于：样式的个数不确定，名字也不确定 <code>:class=&quot;classArr&quot;</code></p>\n</li>\n<li class=\"lvl-3\">\n<p>绑定class样式–对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 <code>:class=&quot;classObj&quot;</code></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class=\"line\">        &lt;!-- 绑定class样式--数组写法，适用于：样式的个数不确定，名字也不确定 --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class=\"line\">        &lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Vue(&#123;</span><br><span class=\"line\">        el: &#x27;#root&#x27;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            name: &#x27;XXX&#x27;,</span><br><span class=\"line\">            mood: &#x27;normal&#x27;,</span><br><span class=\"line\">            classArr: [&#x27;a1&#x27;, &#x27;a2&#x27;, &#x27;a3&#x27;],</span><br><span class=\"line\">            classObj: &#123;</span><br><span class=\"line\">                a1: false,</span><br><span class=\"line\">                a2: false,</span><br><span class=\"line\">                a3: false</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绑定style样式（较少用）：\">绑定style样式（较少用）：</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;basic&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;XXX&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">mood</span>: <span class=\"string\">&#x27;normal&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">styleObj</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;40px&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1>Vue渲染</h1>\n<h3 id=\"条件渲染：\">条件渲染：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p><strong>v-if 写法：</strong></p>\n<ol>\n<li class=\"lvl-7\">v-if=“表达式”</li>\n<li class=\"lvl-7\">v-else-if=“表达式”</li>\n<li class=\"lvl-7\">v-else=“表达式”</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>适用于：切换频率较低的场景</p>\n</li>\n<li class=\"lvl-3\">\n<p>特点：不展示的DOM元素直接被移除</p>\n</li>\n<li class=\"lvl-3\">\n<p>**注意：**v-if可以和 v-else-if、v-else 一起使用，但要求结构不能被打断</p>\n</li>\n<li class=\"lvl-3\">\n<p>**v-show写法：**v-show=“表达式”</p>\n</li>\n<li class=\"lvl-3\">\n<p>适用于：切换频率较高的场景</p>\n</li>\n<li class=\"lvl-3\">\n<p>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p>\n</li>\n</ol>\n<p>**<mark>备注：</mark>**使用v-if 的时，元素可能无法获取到，而使用v-show一定可以获取到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//v-if与template的配合使用   </span></span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;n==1&quot;</span>&gt;</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"列表渲染：\">列表渲染：</h3>\n<p><strong>v-for指令：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>用于展示列表数据</p>\n</li>\n<li class=\"lvl-3\">\n<p>语法：v-for= “(item，index) in xxx”    <strong>:key=“index”</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>可遍历：数组、对象、字符串（很少用）、指定次数（很少用）</p>\n</li>\n</ol>\n<p><strong><mark>react、vue中的key有什么作用？</mark></strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>虚拟DOM中的key的作用：key是虚拟DOM对象的标识，当数据发生变化时，<strong>Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较</strong>，比较规则如下：</p>\n</li>\n<li class=\"lvl-3\">\n<p>对比规则：</p>\n<ol>\n<li class=\"lvl-6\">旧虚拟DOM中找到了与新虚拟DOM相同的key：\n<ol>\n<li class=\"lvl-9\">若虚拟DOM中的内容没变，直接使用之前的真实DOM</li>\n<li class=\"lvl-9\">若虚拟DOM中的内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li>\n</ol>\n</li>\n<li class=\"lvl-6\">旧虚拟DOM中未找到与新虚拟DOM相同的key，则直接创建新的真实DOM，随后渲染到页面中</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p><strong>用index作为key可能会引发的问题：</strong></p>\n<ol>\n<li class=\"lvl-6\">若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没有必要的真实DOM的更新==&gt;页面效果没问题,但效率低</li>\n<li class=\"lvl-6\">如果结构中还包括输入类的DOM：会产生错误的更新==&gt;页面有问题</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>开发中如何选择key？</p>\n<ol>\n<li class=\"lvl-6\">最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号等</li>\n<li class=\"lvl-6\">如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</li>\n</ol>\n</li>\n</ol>\n<h1>Vue监视数据的原理</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>vue会监视data中所有层次的数据</p>\n</li>\n<li class=\"lvl-3\">\n<p>如何监测对象中的数据：<strong><mark>通过setter实现监视，且要在new Vue时就传入要监测的数据</mark></strong></p>\n</li>\n<li class=\"lvl-5\">\n<p>对象中后追加的属性，Vue默认不做响应式处理</p>\n</li>\n<li class=\"lvl-5\">\n<p>如需给后添加的属性做响应式，请使用如下API：<br>\n1. <strong>Vue.set(target，propertyName/index，value)</strong><br>\n2. <strong>vm.$set(target，propertyName/index，value)</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>如何监测数组中的数据：通过包裹数组更新元素的方法实现：</p>\n<ol>\n<li class=\"lvl-6\">调用原生对应的方法对数据进行更新</li>\n<li class=\"lvl-6\">重新解析模板，进行更新页面</li>\n</ol>\n</li>\n<li class=\"lvl-3\">\n<p>在Vue修改数组中的某个元素一定要有如下方法：</p>\n<ol>\n<li class=\"lvl-6\">使用这些API：push()  pop()   shift()  unshift()  splice()  sort()  reverse()</li>\n<li class=\"lvl-6\">Vue.set()  或  vm.$set()</li>\n</ol>\n</li>\n</ol>\n<p><strong><mark>特别注意：Vue.set（）和vm.$set（）不能给vm或vm的根数据对象添加属性</mark></strong></p>\n<h1>Vue收集表单数据</h1>\n<ol>\n<li class=\"lvl-3\">\n<p><code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值</p>\n</li>\n<li class=\"lvl-3\">\n<p><code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值</p>\n</li>\n<li class=\"lvl-3\">\n<p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p>\n</li>\n<li class=\"lvl-5\">\n<p>没有配置input的value属性，那么收集的就是checked（布尔值）</p>\n</li>\n<li class=\"lvl-5\">\n<p>配置input的value属性：<br>\n1. v-model的初始值是非数组，那么收集的就是checked（布尔值）<br>\n2. v-model的初始值是数组，那么收集的就是value组成的数组</p>\n</li>\n</ol>\n<p><strong><mark>备注：v-model的三个修饰符：</mark></strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>lazy：失去焦点在收集数据</p>\n</li>\n<li class=\"lvl-3\">\n<p>number：输入字符串转为有效的数字</p>\n</li>\n<li class=\"lvl-3\">\n<p>trim：输入首尾空格过滤</p>\n</li>\n</ol>\n<h1>Vue过滤器</h1>\n<p>过滤器定义：对要显示的数据进行特定格式化后再显示（适用于一些简单的逻辑处理）</p>\n<p>语法：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>注册过滤器：<code>Vue.filter（name，callback）</code>或<code>  new Vue&#123;filter：&#123;&#125;&#125;</code></p>\n</li>\n<li class=\"lvl-3\">\n<p>使用过滤器：<code>&#123;&#123;xxx | 过滤器名&#125;&#125;</code>  或  <code>v-bind</code>：属性=“xxx | 过滤器名”</p>\n</li>\n</ol>\n<p><strong>备注：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>过滤器也可以接收额外的参数，多个过滤器也可以串联</p>\n</li>\n<li class=\"lvl-3\">\n<p>并没有改变原本的数据，是产生新的对应的数据</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局过滤器 </span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">filter</span>(<span class=\"string\">&#x27;mySlice&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;XXX&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">mood</span>: <span class=\"string\">&#x27;normal&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">classArr</span>: [<span class=\"string\">&#x27;a1&#x27;</span>, <span class=\"string\">&#x27;a2&#x27;</span>, <span class=\"string\">&#x27;a3&#x27;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 局部过滤器</span></span><br><span class=\"line\">    <span class=\"attr\">filters</span>: &#123;</span><br><span class=\"line\">        <span class=\"title function_\">timeFormater</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">dayjs</span>(value).<span class=\"title function_\">format</span>(str)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1>Vue指令</h1>\n<h3 id=\"我们之前学过的指令：\">我们之前学过的指令：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>v-bind：单向绑定解析表达式，可简写为\t:xxx</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-model：双向数据绑定</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-for：遍历数组/对象/字符串</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-on：绑定事件监听，可简写为@</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-if：条件渲染：（动态控制节点是否存在）</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-else：条件渲染：（动态控制节点是否存在）</p>\n</li>\n<li class=\"lvl-3\">\n<p>v-show：条件渲染：（动态控制节点是否展示）</p>\n</li>\n</ol>\n<h3 id=\"v-test和v-html指令：\">v-test和v-html指令：</h3>\n<p><strong>v-test指令：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>作用：向其所在的节点中渲染文本内容</p>\n</li>\n<li class=\"lvl-3\">\n<p>与插值语法的区别：v-test会替换掉文本内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</p>\n</li>\n</ol>\n<p><strong>v-htnl指令：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>作用：向指令节点中渲染包含html结构的内容</p>\n</li>\n<li class=\"lvl-3\">\n<p>与插值语法的区别：</p>\n</li>\n<li class=\"lvl-5\">\n<p>v-html会替换掉节点中所有的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</p>\n</li>\n<li class=\"lvl-5\">\n<p>v-html可以识别html结构</p>\n</li>\n<li class=\"lvl-3\">\n<p>严重注意：<strong>v-html有安全性问题！！！</strong></p>\n</li>\n<li class=\"lvl-5\">\n<p>在网站上动态渲染任意HTML是非常危险的，容易导致<strong>XSS</strong>攻击</p>\n</li>\n<li class=\"lvl-5\">\n<p>一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p>\n</li>\n</ol>\n<h3 id=\"v-once指令：\">v-once指令：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>v-once所在节点在初次动态渲染后，就视为静态内容</p>\n</li>\n<li class=\"lvl-3\">\n<p>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</p>\n</li>\n</ol>\n<h3 id=\"v-pre指令：\">v-pre指令：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>跳过其所在节点的编译过程</p>\n</li>\n<li class=\"lvl-3\">\n<p>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</p>\n</li>\n</ol>\n"},{"title":"Vue2组件和脚手架","date":"2023-04-09T09:59:25.000Z","_content":"\n# 非单文件组件\n\n**Vue使用组件的三大步骤：**\n\n1. 定义组件（创建组件）\n1. 注册组件\n1. 使用组件（写组件标签）\n\n**如何定义一个组件：**\n\n==使用Vue.extend(options)创建，其中options和 new Vue（options）时传入的那个options几乎一样，但也有点区别：==\n\n1. el不用写 ---- 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器\n1. data必须写成函数 ---- 避免组件被复用时，数据存在引用关系\n\n备注：使用template可以配置组件结构\n\n### 注册组件：\n\n1. 局部注册：靠new Vue的时候传入components选项\n1. 全局注册：靠Vue.component（'组件名',组件）\n\n```js\n<body>\n    <div id=\"root\">\n        <!-- 编写组件标签 -->\n        <school></school>\n        <student></student>\n    </div>\n</body>\n<script>\n    // 第一步：创建school组件\n    const school = Vue.extend({\n        template: `\n        <div>\n            <h2>学校名称：{{schoolName}}</h2>\n            <h2>学校地址：{{address}}</h2>\n        </div>\n        `,\n        data() {\n            return {\n                schoolName: 'XXXX',\n                address: 'MMMMM'\n            }\n        },\n    })\n    // 第一步：创建student组件\n    const student = Vue.extend({\n        template: `\n        <div>\n            <h2>学生姓名：{{studentName}}</h2>\n            <h2>学生年龄：{{age}}</h2>\n        </div>\n        `,\n        data() {\n            return {\n                studentName: 'Tom',\n                age: '19'\n            }\n        },\n    })\n    // 第二步：注册组件（全局注册）\n    Vue.component('student', student);\n    // 创建vm\n    new Vue({\n        el: '#root',\n        // 第二步：注册组件（局部注册）\n        components: {\n            school\n        }\n    })\n</script>\n```\n\n### 注意点：\n\n1. 关于组件名：\n  2. 由一个单词组成：(1) 首字母小写   (2) 首字母大写\n  3. 多个单词组成：(1) kebab-case命名：my-school   (2) CamelCase命名：Myschool **(需要Vue脚手架)**\n  4. 备注:**可使用name配置项指定组件在开发者工具中呈现的名字**\n5. 关于组件标签：\n  6. <school></school>\n  7. <school/>(不使用脚手架时，<school/>会导致后续组件不能渲染)\n8. 一个简写方式：`const school=Vue.extend(options)==>const school = options`\n\n### VueComponent构造函数\n\n1. school 组件本质是一个名为VueComponent的构造函数,且不是程序员定义的，是Vue.extend 生成的\n2. 在写<school></school>或<school/>时，Vue解析时会帮我们创建school组件的实例对象，**即执行：VueComponent（options）**\n3. **特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！**\n4. 关于this的指向：\n  5. 组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【VueComponent实例对象】\n  6. new  Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【Vue实例对象】\n7. VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）\n\n**==重要的内置关系：==**`VueComponent.prototype.__proto__===Vue.prototype`\n\n![图解](D:\\桌面\\Note\\vm实例对象.png)\n\n**作用：让组件实例对象可以访问到Vue原型上的属性、方法**\n\n# 单文件组件：\n\n### 脚手架安装：\n\n第一步（仅第一次执行）：全局安装@vue/cli：`npm install -g @vue/cli `\n\n第二步：切换到你要创建项目的目录，然后使用命令创建项目 `vue create xxxx `\n\n第三步：启动项目 `npm run serve `\n\n==**备注： **==\n\n1. 如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry https://registry.npm.taobao.or\n2. Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc 配置， 请执行：`vue inspect > output.js`\n\n\n\n不同版本的Vue：\n\n1. vue.js与vun.runtime.xxx.js的区别:\n  2. vue.js是完整版的Vue，包含：核心功能 和 模板解析器\n  3. vun.runtime.xxx.js是运行版的Vue，只包含：核心功能\n4. 因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要render函数接收的createElement函数去指定具体的内容\n\n### 模板项目的结构:\n\n```js\n├── node_modules \n├── public \n│ ├── favicon.ico: 页签图标 \n│ └── index.html: 主页面 \n├── src \n│ ├── assets: 存放静态资源 \n│ │ └── logo.png \n│ │── component: 存放组件 \n│ │ └── HelloWorld.vue \n│ │── App.vue: 汇总所有组件 \n│ │── main.js: 入口文件 \n├── .gitignore: git 版本管制忽略的配置 \n├── babel.config.js: babel 的配置文件 \n├── package.json: 应用包配置文件 \n├── README.md: 应用描述文件 \n├── package-lock.json：包版本控制文件\n```\n\n### ref属性：\n\n1. 被用来给元素或子组件注册引用消息（id的替代者）\n2. 应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）\n3. 使用方式：\n  4. 打标识：`<h1 ref=\"xxx\">....</h1>`或`<School ref=\"xxx\"></School>`\n  5. 获取：`this.$refs.xxx`\n\n### 配置项props：\n\n**功能：让组件接收外部传过来的数据**\n\n 1. 传递数据：`<Demo name=\"xxx\"/>`\n\n 2. 接收数据：第一种方式（只接收）：`props：['name']`   第二种方式：(限制类型)：`props:{name:String}`\n\n    第三种方式（限制类型、限制必要性、指定默认值）\n\n    ```js\n    props:{\n        name:{\n    \t\ttype:String,//类型\n            required:true,//必要性\n            default:'XXX'//默认值\n        }\n    }\n    ```\n\n    **备注:props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据**\n\n### mixin（混入）：\n\n**==功能：可以把多个组件共用的配置提取成一个混入对象==**\n\n使用方法：**第一步：**定义混合，例如：\n\n```js\n{\n    data(){....},\n    methods:{....}\n    ....\n}\n```\n\n**第二步：**使用混合，例如：\n\n(1). 全局混入：`Vue.mixin(xxx)`\n\n(2). 局部混入：`mixin:['xxx']`\n\n### Vue插件：\n\n**==插件本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。==**\n\n**定义插件：**\n\n```js\n对象.install=function(Vue,options){\n    //添加全局过滤器\n    Vue.filter(...)\n               \n    //添加全局指令\n   \tVue.directive(...)\n    \n    //配置全局混入\n    Vue.mixin(...)\n              \n    //添加实例方法\n    Vue.prototype.$myMethod=function(){...}\n    Vue.prototype.$myProperty=xxxx\n}\n```\n\n**使用插件：`Vue.use(插件名)`**\n\n# 组件化编码流程：\n\n1. 拆分静态组件：组件要按功能点拆分，命名不能和html元素冲突\n2. 实现动态组件：考虑好数据的存放位置，数据是一个组件在用还是一些组件在用\n  3. 一个组件在用：放在组件自身即可\n  4. 一些组件在用：放在他们共同的父组件上（==状态提升==）\n5. 实现交互：从绑定事件开始\n\n**props适用于：**\n\n1. 父组件==>子组件 通信\n1. 子组件==>父组件 通信(要求父给子一个函数)\n\n# webStorage\n\n**浏览器端通过`Window.seesionStorage`和`Window.localStorage`属性来实现本地存储机制**\n\n==相关API==\n\n1. `xxxxStorage.setItem('key'，'value')`;  接收一个键值对作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值\n2. xxxxStorage.getItem('key'); 接收一个键名作为参数，返回键名对应的值\n3. xxxxStorage.removeItem('key'); 该方法接收一个键名作为参数，并把键名从该存储中删除\n4. xxxxStorage.clear()  该方法会清空存储中的所有数据\n\n==备注：==`xxxxStorage.getItem('key')`;如果对应的value获取不到，那么getItem的返回值是null\n\n# 组件的自定义事件：\n\n 1. 一种组件间通信的方式，适用于：**==子组件----->>父组件==**\n\n 2. 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（==事件的回调在A中==）\n\n 3. 绑定自定义事件：\n\n    1. 第一种方式：在父组件中：`<Demo @atguigu=\"test\"/>`或`<Demo v-on:atguigu=\"test\"/>`\n    2. 第二种方式，在父组件中：\n\n    ```js\n    <Demo ref=\"demo\"/>\n        .....\n        mounted(){\n            this.$refs.xxx.$on('atguigu',this.test)\n        }\n    ```\n\n    3. 若想让自定义事件只触发一次，可以使用once修饰符，或`$once`方法\n\n 4. 触发自定义事件:`this.$emit('atguigu',数据)`\n\n 5. 解绑自定义事件:`this.$off('atguigu')`\n\n 6. 组件上也可以<span style=\"color:red\">绑定原生DOM事件，需要使用`native`修饰符</span>\n\n 7. 注意：通过`this.$refs.xxx.$on('atguigu',回调函数)`绑定自定义事件时,回调**==要么配置在methods中，要么用箭头函数==**，否则this指向会出问题！\n\n# 全局事件总线（GlobalEventBus）\n\n1. 一种组件间通信的方式，适用于**任意组件间通信**\n1. 安装全局事件总线：\n\n```js\nnew Vue({\n    .....\n    beforeCreate(){\n    \tVue.prototype.$bus=this//安装全局事件总线，$bus就是当前应用的vm\n\t},\n    ....\n})\n```\n\n 3. 使用事件总线:\n\n    1.  接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件,**事件的回调留在A组件自身**\n\n    ```js\n    methods(){\n        demo(data){.......}\n    }\n    .........\n    mounted(){\n        this.$bus.$on('xxxxx',this.demo)\n    }\n    ```\n\n    ​\t2. 提供数据：`this.$bus,$emit('xxxx',数据)`\n\n  4. 最好在`beforeDestroy`钩子中用`$off`去<span style=\"color:red\">解绑当前组件所用的事件</span>\n\n# 消息订阅与发布(pubsub)\n\n 1. 一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span>\n\n 2. 所有步骤：\n\n    1. 安装pubsub：`npm i pubsub-js`\n\n    2. 引入：`import pubsub form 'pubsub-js'`\n\n    3. 接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的**回调留在A组件自身**\n\n       ```js\n       methods(){\n           demo(data){.....}\n       }\n       .....\n       mounted(){\n           this.pid=pubsub.subscribe('xxx',this.demo)//订阅消息\n       }\n       ```\n\n       4. 提供数据：`pubsub.publish('xxx',数据)`\n       5. 最好在`beforeDestroy`钩子中，用`pubsub.unsubscribe(pid)`去<span style=\"color:red\">取消订阅</span>\n\n### 补充：nextTick\n\n1. 语法：`this.$nextTick(回调函数)`\n1. 作用：在下一次DOM更新结束后执行其指定的回调\n1. 什么时候用：当改变数据后，要基于更新后的新`DOM`进行某些操作时，要在`nextTick`所指定的回调函数中执行\n\n# Vue封装的过度与动画\n\n**作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名**\n\n### 写法：\n\n \t1. 准备好样式：\n \t - 元素进入的样式：\n \t   1. v-enter：进入的起点\n \t   2. v-enter-active：进入过程中\n \t   3. v-enter-to：进入的终点\n \t - 元素离开的样式：\n \t   1. v-leave：离开的起点\n \t   2. v-leave-active：离开过程中\n \t   3. v-leave-to：离开的终点\n \t2. 使用`<transition>`包裹要过度的元素,并配置name属性\n\n```js\n<transition name=\"hello\">\n    <h1 v-show=\"isShow\">你好啊! </h1>\n</transition>\n```\n\n3. 备注:若有多个元素需要过度,则需要使用:`<transition-group>`，且每个元素都要指定`key`值\n\n# Vue脚手架配置代理\n\n### 方法一：\n\n在`vue.config.js`中添加如下配置：\n\n```js\ndevServe:{\n\tproxy:\"http://localhost:5000\"\n}\n```\n\n说明:\n\n1. 优点：配置简单，请求资源时直接发给前端（8080）即可\n2. 缺点：不能配置多个代理，不能灵活的控制请求是否走代理\n3. 工作方法：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）\n\n### 方法二：\n\n编写`vue.config.js`配置具体代理规则：\n\n```js\nmodule.exports={\n    devServer:{\n        proxy:{\n            '/api1':{//匹配所有以'/api1'开头的请求路径\n                target:'http://localhost:5000',//代理目标的基础路径\n                changeOrigin:true,\n                pathRewrite:{'^/api1':''}//将/api1替换为空字符\n            }\n        },\n        proxy:{\n            '/api2':{//匹配所有以'/api2'开头的请求路径\n                target:'http://localhost:5050',//代理目标的基础路径\n                changeOrigin:true,\n                pathRewrite:{'^/api2':''}//将/api1替换为空字符\n            }\n        }\n    }\n}\n/*\n\tchangeOrigin设置为true时,服务器收到的请求头中的host为:localhost:5000\n\tchangeOrigin设置为false时,服务器收到的请求头中的host为:localhost:8080\n\tchangeOrigin默认值是true\n*/\n```\n\n说明：\n\n1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理\n2. 缺点：配置略微繁琐，请求资源时必须加前缀\n","source":"_posts/Vue2组件和脚手架.md","raw":"---\ntitle: Vue2组件和脚手架\ndate: 2023-04-09 17:59:25\ntags:\n---\n\n# 非单文件组件\n\n**Vue使用组件的三大步骤：**\n\n1. 定义组件（创建组件）\n1. 注册组件\n1. 使用组件（写组件标签）\n\n**如何定义一个组件：**\n\n==使用Vue.extend(options)创建，其中options和 new Vue（options）时传入的那个options几乎一样，但也有点区别：==\n\n1. el不用写 ---- 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器\n1. data必须写成函数 ---- 避免组件被复用时，数据存在引用关系\n\n备注：使用template可以配置组件结构\n\n### 注册组件：\n\n1. 局部注册：靠new Vue的时候传入components选项\n1. 全局注册：靠Vue.component（'组件名',组件）\n\n```js\n<body>\n    <div id=\"root\">\n        <!-- 编写组件标签 -->\n        <school></school>\n        <student></student>\n    </div>\n</body>\n<script>\n    // 第一步：创建school组件\n    const school = Vue.extend({\n        template: `\n        <div>\n            <h2>学校名称：{{schoolName}}</h2>\n            <h2>学校地址：{{address}}</h2>\n        </div>\n        `,\n        data() {\n            return {\n                schoolName: 'XXXX',\n                address: 'MMMMM'\n            }\n        },\n    })\n    // 第一步：创建student组件\n    const student = Vue.extend({\n        template: `\n        <div>\n            <h2>学生姓名：{{studentName}}</h2>\n            <h2>学生年龄：{{age}}</h2>\n        </div>\n        `,\n        data() {\n            return {\n                studentName: 'Tom',\n                age: '19'\n            }\n        },\n    })\n    // 第二步：注册组件（全局注册）\n    Vue.component('student', student);\n    // 创建vm\n    new Vue({\n        el: '#root',\n        // 第二步：注册组件（局部注册）\n        components: {\n            school\n        }\n    })\n</script>\n```\n\n### 注意点：\n\n1. 关于组件名：\n  2. 由一个单词组成：(1) 首字母小写   (2) 首字母大写\n  3. 多个单词组成：(1) kebab-case命名：my-school   (2) CamelCase命名：Myschool **(需要Vue脚手架)**\n  4. 备注:**可使用name配置项指定组件在开发者工具中呈现的名字**\n5. 关于组件标签：\n  6. <school></school>\n  7. <school/>(不使用脚手架时，<school/>会导致后续组件不能渲染)\n8. 一个简写方式：`const school=Vue.extend(options)==>const school = options`\n\n### VueComponent构造函数\n\n1. school 组件本质是一个名为VueComponent的构造函数,且不是程序员定义的，是Vue.extend 生成的\n2. 在写<school></school>或<school/>时，Vue解析时会帮我们创建school组件的实例对象，**即执行：VueComponent（options）**\n3. **特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！**\n4. 关于this的指向：\n  5. 组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【VueComponent实例对象】\n  6. new  Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【Vue实例对象】\n7. VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）\n\n**==重要的内置关系：==**`VueComponent.prototype.__proto__===Vue.prototype`\n\n![图解](D:\\桌面\\Note\\vm实例对象.png)\n\n**作用：让组件实例对象可以访问到Vue原型上的属性、方法**\n\n# 单文件组件：\n\n### 脚手架安装：\n\n第一步（仅第一次执行）：全局安装@vue/cli：`npm install -g @vue/cli `\n\n第二步：切换到你要创建项目的目录，然后使用命令创建项目 `vue create xxxx `\n\n第三步：启动项目 `npm run serve `\n\n==**备注： **==\n\n1. 如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry https://registry.npm.taobao.or\n2. Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc 配置， 请执行：`vue inspect > output.js`\n\n\n\n不同版本的Vue：\n\n1. vue.js与vun.runtime.xxx.js的区别:\n  2. vue.js是完整版的Vue，包含：核心功能 和 模板解析器\n  3. vun.runtime.xxx.js是运行版的Vue，只包含：核心功能\n4. 因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要render函数接收的createElement函数去指定具体的内容\n\n### 模板项目的结构:\n\n```js\n├── node_modules \n├── public \n│ ├── favicon.ico: 页签图标 \n│ └── index.html: 主页面 \n├── src \n│ ├── assets: 存放静态资源 \n│ │ └── logo.png \n│ │── component: 存放组件 \n│ │ └── HelloWorld.vue \n│ │── App.vue: 汇总所有组件 \n│ │── main.js: 入口文件 \n├── .gitignore: git 版本管制忽略的配置 \n├── babel.config.js: babel 的配置文件 \n├── package.json: 应用包配置文件 \n├── README.md: 应用描述文件 \n├── package-lock.json：包版本控制文件\n```\n\n### ref属性：\n\n1. 被用来给元素或子组件注册引用消息（id的替代者）\n2. 应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）\n3. 使用方式：\n  4. 打标识：`<h1 ref=\"xxx\">....</h1>`或`<School ref=\"xxx\"></School>`\n  5. 获取：`this.$refs.xxx`\n\n### 配置项props：\n\n**功能：让组件接收外部传过来的数据**\n\n 1. 传递数据：`<Demo name=\"xxx\"/>`\n\n 2. 接收数据：第一种方式（只接收）：`props：['name']`   第二种方式：(限制类型)：`props:{name:String}`\n\n    第三种方式（限制类型、限制必要性、指定默认值）\n\n    ```js\n    props:{\n        name:{\n    \t\ttype:String,//类型\n            required:true,//必要性\n            default:'XXX'//默认值\n        }\n    }\n    ```\n\n    **备注:props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据**\n\n### mixin（混入）：\n\n**==功能：可以把多个组件共用的配置提取成一个混入对象==**\n\n使用方法：**第一步：**定义混合，例如：\n\n```js\n{\n    data(){....},\n    methods:{....}\n    ....\n}\n```\n\n**第二步：**使用混合，例如：\n\n(1). 全局混入：`Vue.mixin(xxx)`\n\n(2). 局部混入：`mixin:['xxx']`\n\n### Vue插件：\n\n**==插件本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。==**\n\n**定义插件：**\n\n```js\n对象.install=function(Vue,options){\n    //添加全局过滤器\n    Vue.filter(...)\n               \n    //添加全局指令\n   \tVue.directive(...)\n    \n    //配置全局混入\n    Vue.mixin(...)\n              \n    //添加实例方法\n    Vue.prototype.$myMethod=function(){...}\n    Vue.prototype.$myProperty=xxxx\n}\n```\n\n**使用插件：`Vue.use(插件名)`**\n\n# 组件化编码流程：\n\n1. 拆分静态组件：组件要按功能点拆分，命名不能和html元素冲突\n2. 实现动态组件：考虑好数据的存放位置，数据是一个组件在用还是一些组件在用\n  3. 一个组件在用：放在组件自身即可\n  4. 一些组件在用：放在他们共同的父组件上（==状态提升==）\n5. 实现交互：从绑定事件开始\n\n**props适用于：**\n\n1. 父组件==>子组件 通信\n1. 子组件==>父组件 通信(要求父给子一个函数)\n\n# webStorage\n\n**浏览器端通过`Window.seesionStorage`和`Window.localStorage`属性来实现本地存储机制**\n\n==相关API==\n\n1. `xxxxStorage.setItem('key'，'value')`;  接收一个键值对作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值\n2. xxxxStorage.getItem('key'); 接收一个键名作为参数，返回键名对应的值\n3. xxxxStorage.removeItem('key'); 该方法接收一个键名作为参数，并把键名从该存储中删除\n4. xxxxStorage.clear()  该方法会清空存储中的所有数据\n\n==备注：==`xxxxStorage.getItem('key')`;如果对应的value获取不到，那么getItem的返回值是null\n\n# 组件的自定义事件：\n\n 1. 一种组件间通信的方式，适用于：**==子组件----->>父组件==**\n\n 2. 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（==事件的回调在A中==）\n\n 3. 绑定自定义事件：\n\n    1. 第一种方式：在父组件中：`<Demo @atguigu=\"test\"/>`或`<Demo v-on:atguigu=\"test\"/>`\n    2. 第二种方式，在父组件中：\n\n    ```js\n    <Demo ref=\"demo\"/>\n        .....\n        mounted(){\n            this.$refs.xxx.$on('atguigu',this.test)\n        }\n    ```\n\n    3. 若想让自定义事件只触发一次，可以使用once修饰符，或`$once`方法\n\n 4. 触发自定义事件:`this.$emit('atguigu',数据)`\n\n 5. 解绑自定义事件:`this.$off('atguigu')`\n\n 6. 组件上也可以<span style=\"color:red\">绑定原生DOM事件，需要使用`native`修饰符</span>\n\n 7. 注意：通过`this.$refs.xxx.$on('atguigu',回调函数)`绑定自定义事件时,回调**==要么配置在methods中，要么用箭头函数==**，否则this指向会出问题！\n\n# 全局事件总线（GlobalEventBus）\n\n1. 一种组件间通信的方式，适用于**任意组件间通信**\n1. 安装全局事件总线：\n\n```js\nnew Vue({\n    .....\n    beforeCreate(){\n    \tVue.prototype.$bus=this//安装全局事件总线，$bus就是当前应用的vm\n\t},\n    ....\n})\n```\n\n 3. 使用事件总线:\n\n    1.  接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件,**事件的回调留在A组件自身**\n\n    ```js\n    methods(){\n        demo(data){.......}\n    }\n    .........\n    mounted(){\n        this.$bus.$on('xxxxx',this.demo)\n    }\n    ```\n\n    ​\t2. 提供数据：`this.$bus,$emit('xxxx',数据)`\n\n  4. 最好在`beforeDestroy`钩子中用`$off`去<span style=\"color:red\">解绑当前组件所用的事件</span>\n\n# 消息订阅与发布(pubsub)\n\n 1. 一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span>\n\n 2. 所有步骤：\n\n    1. 安装pubsub：`npm i pubsub-js`\n\n    2. 引入：`import pubsub form 'pubsub-js'`\n\n    3. 接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的**回调留在A组件自身**\n\n       ```js\n       methods(){\n           demo(data){.....}\n       }\n       .....\n       mounted(){\n           this.pid=pubsub.subscribe('xxx',this.demo)//订阅消息\n       }\n       ```\n\n       4. 提供数据：`pubsub.publish('xxx',数据)`\n       5. 最好在`beforeDestroy`钩子中，用`pubsub.unsubscribe(pid)`去<span style=\"color:red\">取消订阅</span>\n\n### 补充：nextTick\n\n1. 语法：`this.$nextTick(回调函数)`\n1. 作用：在下一次DOM更新结束后执行其指定的回调\n1. 什么时候用：当改变数据后，要基于更新后的新`DOM`进行某些操作时，要在`nextTick`所指定的回调函数中执行\n\n# Vue封装的过度与动画\n\n**作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名**\n\n### 写法：\n\n \t1. 准备好样式：\n \t - 元素进入的样式：\n \t   1. v-enter：进入的起点\n \t   2. v-enter-active：进入过程中\n \t   3. v-enter-to：进入的终点\n \t - 元素离开的样式：\n \t   1. v-leave：离开的起点\n \t   2. v-leave-active：离开过程中\n \t   3. v-leave-to：离开的终点\n \t2. 使用`<transition>`包裹要过度的元素,并配置name属性\n\n```js\n<transition name=\"hello\">\n    <h1 v-show=\"isShow\">你好啊! </h1>\n</transition>\n```\n\n3. 备注:若有多个元素需要过度,则需要使用:`<transition-group>`，且每个元素都要指定`key`值\n\n# Vue脚手架配置代理\n\n### 方法一：\n\n在`vue.config.js`中添加如下配置：\n\n```js\ndevServe:{\n\tproxy:\"http://localhost:5000\"\n}\n```\n\n说明:\n\n1. 优点：配置简单，请求资源时直接发给前端（8080）即可\n2. 缺点：不能配置多个代理，不能灵活的控制请求是否走代理\n3. 工作方法：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）\n\n### 方法二：\n\n编写`vue.config.js`配置具体代理规则：\n\n```js\nmodule.exports={\n    devServer:{\n        proxy:{\n            '/api1':{//匹配所有以'/api1'开头的请求路径\n                target:'http://localhost:5000',//代理目标的基础路径\n                changeOrigin:true,\n                pathRewrite:{'^/api1':''}//将/api1替换为空字符\n            }\n        },\n        proxy:{\n            '/api2':{//匹配所有以'/api2'开头的请求路径\n                target:'http://localhost:5050',//代理目标的基础路径\n                changeOrigin:true,\n                pathRewrite:{'^/api2':''}//将/api1替换为空字符\n            }\n        }\n    }\n}\n/*\n\tchangeOrigin设置为true时,服务器收到的请求头中的host为:localhost:5000\n\tchangeOrigin设置为false时,服务器收到的请求头中的host为:localhost:8080\n\tchangeOrigin默认值是true\n*/\n```\n\n说明：\n\n1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理\n2. 缺点：配置略微繁琐，请求资源时必须加前缀\n","slug":"Vue2组件和脚手架","published":1,"updated":"2023-04-09T10:00:23.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9aw94i0005e8uf2eyw47t7","content":"<h1>非单文件组件</h1>\n<p><strong>Vue使用组件的三大步骤：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>定义组件（创建组件）</p>\n</li>\n<li class=\"lvl-3\">\n<p>注册组件</p>\n</li>\n<li class=\"lvl-3\">\n<p>使用组件（写组件标签）</p>\n</li>\n</ol>\n<p><strong>如何定义一个组件：</strong></p>\n<p><mark>使用Vue.extend(options)创建，其中options和 new Vue（options）时传入的那个options几乎一样，但也有点区别：</mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p>el不用写 ---- 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器</p>\n</li>\n<li class=\"lvl-3\">\n<p>data必须写成函数 ---- 避免组件被复用时，数据存在引用关系</p>\n</li>\n</ol>\n<p>备注：使用template可以配置组件结构</p>\n<h3 id=\"注册组件：\">注册组件：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>局部注册：靠new Vue的时候传入components选项</p>\n</li>\n<li class=\"lvl-3\">\n<p>全局注册：靠Vue.component（‘组件名’,组件）</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"comment\">&lt;!-- 编写组件标签 --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">school</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">school</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    // 第一步：创建school组件</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    const school = Vue.extend(&#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        template: `</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>学校名称：</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">schoolName</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>学校地址：</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">address</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        `,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        data() &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            return &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">                schoolName: &#x27;XXXX&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">                address: &#x27;MMMMM&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            &#125;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        &#125;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    &#125;)</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    // 第一步：创建student组件</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    const student = Vue.extend(&#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        template: `</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>学生姓名：</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">studentName</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>学生年龄：</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">age</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        `,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        data() &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            return &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">                studentName: &#x27;Tom&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">                age: &#x27;19&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            &#125;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        &#125;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    &#125;)</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    // 第二步：注册组件（全局注册）</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    Vue.component(&#x27;student&#x27;, student);</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    // 创建vm</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    new Vue(&#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        el: &#x27;#root&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        // 第二步：注册组件（局部注册）</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        components: &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            school</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        &#125;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    &#125;)</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点：\">注意点：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>关于组件名：</p>\n</li>\n<li class=\"lvl-5\">\n<p>由一个单词组成：(1) 首字母小写   (2) 首字母大写</p>\n</li>\n<li class=\"lvl-5\">\n<p>多个单词组成：(1) kebab-case命名：my-school   (2) CamelCase命名：Myschool <strong>(需要Vue脚手架)</strong></p>\n</li>\n<li class=\"lvl-5\">\n<p>备注:<strong>可使用name配置项指定组件在开发者工具中呈现的名字</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>关于组件标签：</p>\n</li>\n<li class=\"lvl-5\">\n<p><school></school></p>\n</li>\n<li class=\"lvl-5\">\n<p><school>(不使用脚手架时，<school>会导致后续组件不能渲染)</school></school></p>\n</li>\n<li class=\"lvl-3\">\n<p>一个简写方式：<code>const school=Vue.extend(options)==&gt;const school = options</code></p>\n</li>\n</ol>\n<h3 id=\"VueComponent构造函数\">VueComponent构造函数</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>school 组件本质是一个名为VueComponent的构造函数,且不是程序员定义的，是Vue.extend 生成的</p>\n</li>\n<li class=\"lvl-3\">\n<p>在写<school></school>或<school>时，Vue解析时会帮我们创建school组件的实例对象，<strong>即执行：VueComponent（options）</strong></school></p>\n</li>\n<li class=\"lvl-3\">\n<p><strong>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>关于this的指向：</p>\n</li>\n<li class=\"lvl-5\">\n<p>组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【VueComponent实例对象】</p>\n</li>\n<li class=\"lvl-5\">\n<p>new  Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【Vue实例对象】</p>\n</li>\n<li class=\"lvl-3\">\n<p>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）</p>\n</li>\n</ol>\n<p><strong><mark>重要的内置关系：</mark></strong><code>VueComponent.prototype.__proto__===Vue.prototype</code></p>\n<p><img src=\"/Soiloquy-Blog.github.io/.io//D:%5C%E6%A1%8C%E9%9D%A2%5CNote%5Cvm%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1.png\" alt=\"图解\"></p>\n<p><strong>作用：让组件实例对象可以访问到Vue原型上的属性、方法</strong></p>\n<h1>单文件组件：</h1>\n<h3 id=\"脚手架安装：\">脚手架安装：</h3>\n<p>第一步（仅第一次执行）：全局安装@vue/cli：<code>npm install -g @vue/cli </code></p>\n<p>第二步：切换到你要创建项目的目录，然后使用命令创建项目 <code>vue create xxxx </code></p>\n<p>第三步：启动项目 <code>npm run serve </code></p>\n<p><mark>**备注： **</mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p>如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry <a href=\"https://registry.npm.taobao.or\">https://registry.npm.taobao.or</a></p>\n</li>\n<li class=\"lvl-3\">\n<p>Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc 配置， 请执行：<code>vue inspect &gt; output.js</code></p>\n</li>\n</ol>\n<p>不同版本的Vue：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>vue.js与vun.runtime.xxx.js的区别:</p>\n</li>\n<li class=\"lvl-5\">\n<p>vue.js是完整版的Vue，包含：核心功能 和 模板解析器</p>\n</li>\n<li class=\"lvl-5\">\n<p>vun.runtime.xxx.js是运行版的Vue，只包含：核心功能</p>\n</li>\n<li class=\"lvl-3\">\n<p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要render函数接收的createElement函数去指定具体的内容</p>\n</li>\n</ol>\n<h3 id=\"模板项目的结构\">模板项目的结构:</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── node_modules </span><br><span class=\"line\">├── public </span><br><span class=\"line\">│ ├── favicon.<span class=\"property\">ico</span>: 页签图标 </span><br><span class=\"line\">│ └── index.<span class=\"property\">html</span>: 主页面 </span><br><span class=\"line\">├── src </span><br><span class=\"line\">│ ├── <span class=\"attr\">assets</span>: 存放静态资源 </span><br><span class=\"line\">│ │ └── logo.<span class=\"property\">png</span> </span><br><span class=\"line\">│ │── <span class=\"attr\">component</span>: 存放组件 </span><br><span class=\"line\">│ │ └── <span class=\"title class_\">HelloWorld</span>.<span class=\"property\">vue</span> </span><br><span class=\"line\">│ │── <span class=\"title class_\">App</span>.<span class=\"property\">vue</span>: 汇总所有组件 </span><br><span class=\"line\">│ │── main.<span class=\"property\">js</span>: 入口文件 </span><br><span class=\"line\">├── .<span class=\"property\">gitignore</span>: git 版本管制忽略的配置 </span><br><span class=\"line\">├── babel.<span class=\"property\">config</span>.<span class=\"property\">js</span>: babel 的配置文件 </span><br><span class=\"line\">├── package.<span class=\"property\">json</span>: 应用包配置文件 </span><br><span class=\"line\">├── <span class=\"variable constant_\">README</span>.<span class=\"property\">md</span>: 应用描述文件 </span><br><span class=\"line\">├── package-lock.<span class=\"property\">json</span>：包版本控制文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"ref属性：\">ref属性：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>被用来给元素或子组件注册引用消息（id的替代者）</p>\n</li>\n<li class=\"lvl-3\">\n<p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</p>\n</li>\n<li class=\"lvl-3\">\n<p>使用方式：</p>\n</li>\n<li class=\"lvl-5\">\n<p>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;....&lt;/h1&gt;</code>或<code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></p>\n</li>\n<li class=\"lvl-5\">\n<p>获取：<code>this.$refs.xxx</code></p>\n</li>\n</ol>\n<h3 id=\"配置项props：\">配置项props：</h3>\n<p><strong>功能：让组件接收外部传过来的数据</strong></p>\n<ol>\n<li class=\"lvl-4\">\n<p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>接收数据：第一种方式（只接收）：<code>props：['name']</code>   第二种方式：(限制类型)：<code>props:&#123;name:String&#125;</code></p>\n<p>第三种方式（限制类型、限制必要性、指定默认值）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">type</span>:<span class=\"title class_\">String</span>,<span class=\"comment\">//类型</span></span><br><span class=\"line\">        <span class=\"attr\">required</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//必要性</span></span><br><span class=\"line\">        <span class=\"attr\">default</span>:<span class=\"string\">&#x27;XXX&#x27;</span><span class=\"comment\">//默认值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>备注:props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据</strong></p>\n</li>\n</ol>\n<h3 id=\"mixin（混入）：\">mixin（混入）：</h3>\n<p><strong><mark>功能：可以把多个组件共用的配置提取成一个混入对象</mark></strong></p>\n<p>使用方法：**第一步：**定义混合，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;....&#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>:&#123;....&#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>**第二步：**使用混合，例如：</p>\n<p>(1). 全局混入：<code>Vue.mixin(xxx)</code></p>\n<p>(2). 局部混入：<code>mixin:['xxx']</code></p>\n<h3 id=\"Vue插件：\">Vue插件：</h3>\n<p><strong><mark>插件本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</mark></strong></p>\n<p><strong>定义插件：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象.<span class=\"property\">install</span>=<span class=\"keyword\">function</span>(<span class=\"params\">Vue,options</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加全局过滤器</span></span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">filter</span>(...)</span><br><span class=\"line\">               </span><br><span class=\"line\">    <span class=\"comment\">//添加全局指令</span></span><br><span class=\"line\">   \t<span class=\"title class_\">Vue</span>.<span class=\"title function_\">directive</span>(...)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//配置全局混入</span></span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">mixin</span>(...)</span><br><span class=\"line\">              </span><br><span class=\"line\">    <span class=\"comment\">//添加实例方法</span></span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$myMethod</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$myProperty</span>=xxxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用插件：<code>Vue.use(插件名)</code></strong></p>\n<h1>组件化编码流程：</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>拆分静态组件：组件要按功能点拆分，命名不能和html元素冲突</p>\n</li>\n<li class=\"lvl-3\">\n<p>实现动态组件：考虑好数据的存放位置，数据是一个组件在用还是一些组件在用</p>\n</li>\n<li class=\"lvl-5\">\n<p>一个组件在用：放在组件自身即可</p>\n</li>\n<li class=\"lvl-5\">\n<p>一些组件在用：放在他们共同的父组件上（<mark>状态提升</mark>）</p>\n</li>\n<li class=\"lvl-3\">\n<p>实现交互：从绑定事件开始</p>\n</li>\n</ol>\n<p><strong>props适用于：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>父组件==&gt;子组件 通信</p>\n</li>\n<li class=\"lvl-3\">\n<p>子组件==&gt;父组件 通信(要求父给子一个函数)</p>\n</li>\n</ol>\n<h1>webStorage</h1>\n<p><strong>浏览器端通过<code>Window.seesionStorage</code>和<code>Window.localStorage</code>属性来实现本地存储机制</strong></p>\n<p><mark>相关API</mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p><code>xxxxStorage.setItem('key'，'value')</code>;  接收一个键值对作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</p>\n</li>\n<li class=\"lvl-3\">\n<p>xxxxStorage.getItem(‘key’); 接收一个键名作为参数，返回键名对应的值</p>\n</li>\n<li class=\"lvl-3\">\n<p>xxxxStorage.removeItem(‘key’); 该方法接收一个键名作为参数，并把键名从该存储中删除</p>\n</li>\n<li class=\"lvl-3\">\n<p>xxxxStorage.clear()  该方法会清空存储中的所有数据</p>\n</li>\n</ol>\n<p><mark>备注：</mark><code>xxxxStorage.getItem('key')</code>;如果对应的value获取不到，那么getItem的返回值是null</p>\n<h1>组件的自定义事件：</h1>\n<ol>\n<li class=\"lvl-4\">\n<p>一种组件间通信的方式，适用于：<strong><mark>子组件-----&gt;&gt;父组件</mark></strong></p>\n</li>\n<li class=\"lvl-4\">\n<p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<mark>事件的回调在A中</mark>）</p>\n</li>\n<li class=\"lvl-4\">\n<p>绑定自定义事件：</p>\n<ol>\n<li class=\"lvl-7\">第一种方式：在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>或<code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></li>\n<li class=\"lvl-7\">第二种方式，在父组件中：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Demo</span> ref=<span class=\"string\">&quot;demo&quot;</span>/&gt;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">xxx</span>.$on(<span class=\"string\">&#x27;atguigu&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">test</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li class=\"lvl-7\">\n<p>若想让自定义事件只触发一次，可以使用once修饰符，或<code>$once</code>方法</p>\n</li>\n</ol>\n</li>\n<li class=\"lvl-4\">\n<p>触发自定义事件:<code>this.$emit('atguigu',数据)</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>解绑自定义事件:<code>this.$off('atguigu')</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>组件上也可以<span style=\"color:red\">绑定原生DOM事件，需要使用<code>native</code>修饰符</span></p>\n</li>\n<li class=\"lvl-4\">\n<p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调函数)</code>绑定自定义事件时,回调**<mark>要么配置在methods中，要么用箭头函数</mark>**，否则this指向会出问题！</p>\n</li>\n</ol>\n<h1>全局事件总线（GlobalEventBus）</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>一种组件间通信的方式，适用于<strong>任意组件间通信</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>安装全局事件总线：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    <span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    \t<span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$bus</span>=<span class=\"variable language_\">this</span><span class=\"comment\">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li class=\"lvl-4\">\n<p>使用事件总线:</p>\n<ol>\n<li class=\"lvl-8\">接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件,<strong>事件的回调留在A组件自身</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">methods</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">demo</span>(<span class=\"params\">data</span>)&#123;.......&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.........</span><br><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$bus</span>.$on(<span class=\"string\">&#x27;xxxxx&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">demo</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t2. 提供数据：<code>this.$bus,$emit('xxxx',数据)</code></p>\n</li>\n<li class=\"lvl-5\">\n<p>最好在<code>beforeDestroy</code>钩子中用<code>$off</code>去<span style=\"color:red\">解绑当前组件所用的事件</span></p>\n</li>\n</ol>\n<h1>消息订阅与发布(pubsub)</h1>\n<ol>\n<li class=\"lvl-4\">\n<p>一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span></p>\n</li>\n<li class=\"lvl-4\">\n<p>所有步骤：</p>\n<ol>\n<li class=\"lvl-7\">\n<p>安装pubsub：<code>npm i pubsub-js</code></p>\n</li>\n<li class=\"lvl-7\">\n<p>引入：<code>import pubsub form 'pubsub-js'</code></p>\n</li>\n<li class=\"lvl-7\">\n<p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<strong>回调留在A组件自身</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">methods</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">demo</span>(<span class=\"params\">data</span>)&#123;.....&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pid</span>=pubsub.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&#x27;xxx&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">demo</span>)<span class=\"comment\">//订阅消息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li class=\"lvl-10\">\n<p>提供数据：<code>pubsub.publish('xxx',数据)</code></p>\n</li>\n<li class=\"lvl-10\">\n<p>最好在<code>beforeDestroy</code>钩子中，用<code>pubsub.unsubscribe(pid)</code>去<span style=\"color:red\">取消订阅</span></p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"补充：nextTick\">补充：nextTick</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>语法：<code>this.$nextTick(回调函数)</code></p>\n</li>\n<li class=\"lvl-3\">\n<p>作用：在下一次DOM更新结束后执行其指定的回调</p>\n</li>\n<li class=\"lvl-3\">\n<p>什么时候用：当改变数据后，要基于更新后的新<code>DOM</code>进行某些操作时，要在<code>nextTick</code>所指定的回调函数中执行</p>\n</li>\n</ol>\n<h1>Vue封装的过度与动画</h1>\n<p><strong>作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名</strong></p>\n<h3 id=\"写法：\">写法：</h3>\n<pre><code>1. 准备好样式：\n - 元素进入的样式：\n   1. v-enter：进入的起点\n   2. v-enter-active：进入过程中\n   3. v-enter-to：进入的终点\n - 元素离开的样式：\n   1. v-leave：离开的起点\n   2. v-leave-active：离开过程中\n   3. v-leave-to：离开的终点\n2. 使用`&lt;transition&gt;`包裹要过度的元素,并配置name属性\n</code></pre>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition name=<span class=\"string\">&quot;hello&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span>你好啊! <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li class=\"lvl-3\">\n<p>备注:若有多个元素需要过度,则需要使用:<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</p>\n</li>\n</ol>\n<h1>Vue脚手架配置代理</h1>\n<h3 id=\"方法一：\">方法一：</h3>\n<p>在<code>vue.config.js</code>中添加如下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServe</span>:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">proxy</span>:<span class=\"string\">&quot;http://localhost:5000&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明:</p>\n<ol>\n<li class=\"lvl-3\">\n<p>优点：配置简单，请求资源时直接发给前端（8080）即可</p>\n</li>\n<li class=\"lvl-3\">\n<p>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</p>\n</li>\n<li class=\"lvl-3\">\n<p>工作方法：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</p>\n</li>\n</ol>\n<h3 id=\"方法二：\">方法二：</h3>\n<p>编写<code>vue.config.js</code>配置具体代理规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>=&#123;</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;/api1&#x27;</span>:&#123;<span class=\"comment\">//匹配所有以&#x27;/api1&#x27;开头的请求路径</span></span><br><span class=\"line\">                <span class=\"attr\">target</span>:<span class=\"string\">&#x27;http://localhost:5000&#x27;</span>,<span class=\"comment\">//代理目标的基础路径</span></span><br><span class=\"line\">                <span class=\"attr\">changeOrigin</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">pathRewrite</span>:&#123;<span class=\"string\">&#x27;^/api1&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;<span class=\"comment\">//将/api1替换为空字符</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;/api2&#x27;</span>:&#123;<span class=\"comment\">//匹配所有以&#x27;/api2&#x27;开头的请求路径</span></span><br><span class=\"line\">                <span class=\"attr\">target</span>:<span class=\"string\">&#x27;http://localhost:5050&#x27;</span>,<span class=\"comment\">//代理目标的基础路径</span></span><br><span class=\"line\">                <span class=\"attr\">changeOrigin</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">pathRewrite</span>:&#123;<span class=\"string\">&#x27;^/api2&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;<span class=\"comment\">//将/api1替换为空字符</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tchangeOrigin设置为true时,服务器收到的请求头中的host为:localhost:5000</span></span><br><span class=\"line\"><span class=\"comment\">\tchangeOrigin设置为false时,服务器收到的请求头中的host为:localhost:8080</span></span><br><span class=\"line\"><span class=\"comment\">\tchangeOrigin默认值是true</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</p>\n</li>\n<li class=\"lvl-3\">\n<p>缺点：配置略微繁琐，请求资源时必须加前缀</p>\n</li>\n</ol>\n","site":{"data":{}},"cover":"/medias/cover/01.png","excerpt":"","more":"<h1>非单文件组件</h1>\n<p><strong>Vue使用组件的三大步骤：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>定义组件（创建组件）</p>\n</li>\n<li class=\"lvl-3\">\n<p>注册组件</p>\n</li>\n<li class=\"lvl-3\">\n<p>使用组件（写组件标签）</p>\n</li>\n</ol>\n<p><strong>如何定义一个组件：</strong></p>\n<p><mark>使用Vue.extend(options)创建，其中options和 new Vue（options）时传入的那个options几乎一样，但也有点区别：</mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p>el不用写 ---- 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器</p>\n</li>\n<li class=\"lvl-3\">\n<p>data必须写成函数 ---- 避免组件被复用时，数据存在引用关系</p>\n</li>\n</ol>\n<p>备注：使用template可以配置组件结构</p>\n<h3 id=\"注册组件：\">注册组件：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>局部注册：靠new Vue的时候传入components选项</p>\n</li>\n<li class=\"lvl-3\">\n<p>全局注册：靠Vue.component（‘组件名’,组件）</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"comment\">&lt;!-- 编写组件标签 --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">school</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">school</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    // 第一步：创建school组件</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    const school = Vue.extend(&#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        template: `</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>学校名称：</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">schoolName</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>学校地址：</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">address</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        `,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        data() &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            return &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">                schoolName: &#x27;XXXX&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">                address: &#x27;MMMMM&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            &#125;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        &#125;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    &#125;)</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    // 第一步：创建student组件</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    const student = Vue.extend(&#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        template: `</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>学生姓名：</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">studentName</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>学生年龄：</span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">age</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        `,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        data() &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            return &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">                studentName: &#x27;Tom&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">                age: &#x27;19&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            &#125;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        &#125;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    &#125;)</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    // 第二步：注册组件（全局注册）</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    Vue.component(&#x27;student&#x27;, student);</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    // 创建vm</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    new Vue(&#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        el: &#x27;#root&#x27;,</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        // 第二步：注册组件（局部注册）</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        components: &#123;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">            school</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">        &#125;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    &#125;)</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点：\">注意点：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>关于组件名：</p>\n</li>\n<li class=\"lvl-5\">\n<p>由一个单词组成：(1) 首字母小写   (2) 首字母大写</p>\n</li>\n<li class=\"lvl-5\">\n<p>多个单词组成：(1) kebab-case命名：my-school   (2) CamelCase命名：Myschool <strong>(需要Vue脚手架)</strong></p>\n</li>\n<li class=\"lvl-5\">\n<p>备注:<strong>可使用name配置项指定组件在开发者工具中呈现的名字</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>关于组件标签：</p>\n</li>\n<li class=\"lvl-5\">\n<p><school></school></p>\n</li>\n<li class=\"lvl-5\">\n<p><school>(不使用脚手架时，<school>会导致后续组件不能渲染)</school></school></p>\n</li>\n<li class=\"lvl-3\">\n<p>一个简写方式：<code>const school=Vue.extend(options)==&gt;const school = options</code></p>\n</li>\n</ol>\n<h3 id=\"VueComponent构造函数\">VueComponent构造函数</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>school 组件本质是一个名为VueComponent的构造函数,且不是程序员定义的，是Vue.extend 生成的</p>\n</li>\n<li class=\"lvl-3\">\n<p>在写<school></school>或<school>时，Vue解析时会帮我们创建school组件的实例对象，<strong>即执行：VueComponent（options）</strong></school></p>\n</li>\n<li class=\"lvl-3\">\n<p><strong>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>关于this的指向：</p>\n</li>\n<li class=\"lvl-5\">\n<p>组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【VueComponent实例对象】</p>\n</li>\n<li class=\"lvl-5\">\n<p>new  Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【Vue实例对象】</p>\n</li>\n<li class=\"lvl-3\">\n<p>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）</p>\n</li>\n</ol>\n<p><strong><mark>重要的内置关系：</mark></strong><code>VueComponent.prototype.__proto__===Vue.prototype</code></p>\n<p><img src=\"/Soiloquy-Blog.github.io/.io//D:%5C%E6%A1%8C%E9%9D%A2%5CNote%5Cvm%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1.png\" alt=\"图解\"></p>\n<p><strong>作用：让组件实例对象可以访问到Vue原型上的属性、方法</strong></p>\n<h1>单文件组件：</h1>\n<h3 id=\"脚手架安装：\">脚手架安装：</h3>\n<p>第一步（仅第一次执行）：全局安装@vue/cli：<code>npm install -g @vue/cli </code></p>\n<p>第二步：切换到你要创建项目的目录，然后使用命令创建项目 <code>vue create xxxx </code></p>\n<p>第三步：启动项目 <code>npm run serve </code></p>\n<p><mark>**备注： **</mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p>如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry <a href=\"https://registry.npm.taobao.or\">https://registry.npm.taobao.or</a></p>\n</li>\n<li class=\"lvl-3\">\n<p>Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc 配置， 请执行：<code>vue inspect &gt; output.js</code></p>\n</li>\n</ol>\n<p>不同版本的Vue：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>vue.js与vun.runtime.xxx.js的区别:</p>\n</li>\n<li class=\"lvl-5\">\n<p>vue.js是完整版的Vue，包含：核心功能 和 模板解析器</p>\n</li>\n<li class=\"lvl-5\">\n<p>vun.runtime.xxx.js是运行版的Vue，只包含：核心功能</p>\n</li>\n<li class=\"lvl-3\">\n<p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要render函数接收的createElement函数去指定具体的内容</p>\n</li>\n</ol>\n<h3 id=\"模板项目的结构\">模板项目的结构:</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── node_modules </span><br><span class=\"line\">├── public </span><br><span class=\"line\">│ ├── favicon.<span class=\"property\">ico</span>: 页签图标 </span><br><span class=\"line\">│ └── index.<span class=\"property\">html</span>: 主页面 </span><br><span class=\"line\">├── src </span><br><span class=\"line\">│ ├── <span class=\"attr\">assets</span>: 存放静态资源 </span><br><span class=\"line\">│ │ └── logo.<span class=\"property\">png</span> </span><br><span class=\"line\">│ │── <span class=\"attr\">component</span>: 存放组件 </span><br><span class=\"line\">│ │ └── <span class=\"title class_\">HelloWorld</span>.<span class=\"property\">vue</span> </span><br><span class=\"line\">│ │── <span class=\"title class_\">App</span>.<span class=\"property\">vue</span>: 汇总所有组件 </span><br><span class=\"line\">│ │── main.<span class=\"property\">js</span>: 入口文件 </span><br><span class=\"line\">├── .<span class=\"property\">gitignore</span>: git 版本管制忽略的配置 </span><br><span class=\"line\">├── babel.<span class=\"property\">config</span>.<span class=\"property\">js</span>: babel 的配置文件 </span><br><span class=\"line\">├── package.<span class=\"property\">json</span>: 应用包配置文件 </span><br><span class=\"line\">├── <span class=\"variable constant_\">README</span>.<span class=\"property\">md</span>: 应用描述文件 </span><br><span class=\"line\">├── package-lock.<span class=\"property\">json</span>：包版本控制文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"ref属性：\">ref属性：</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>被用来给元素或子组件注册引用消息（id的替代者）</p>\n</li>\n<li class=\"lvl-3\">\n<p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</p>\n</li>\n<li class=\"lvl-3\">\n<p>使用方式：</p>\n</li>\n<li class=\"lvl-5\">\n<p>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;....&lt;/h1&gt;</code>或<code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></p>\n</li>\n<li class=\"lvl-5\">\n<p>获取：<code>this.$refs.xxx</code></p>\n</li>\n</ol>\n<h3 id=\"配置项props：\">配置项props：</h3>\n<p><strong>功能：让组件接收外部传过来的数据</strong></p>\n<ol>\n<li class=\"lvl-4\">\n<p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>接收数据：第一种方式（只接收）：<code>props：['name']</code>   第二种方式：(限制类型)：<code>props:&#123;name:String&#125;</code></p>\n<p>第三种方式（限制类型、限制必要性、指定默认值）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">type</span>:<span class=\"title class_\">String</span>,<span class=\"comment\">//类型</span></span><br><span class=\"line\">        <span class=\"attr\">required</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//必要性</span></span><br><span class=\"line\">        <span class=\"attr\">default</span>:<span class=\"string\">&#x27;XXX&#x27;</span><span class=\"comment\">//默认值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>备注:props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据</strong></p>\n</li>\n</ol>\n<h3 id=\"mixin（混入）：\">mixin（混入）：</h3>\n<p><strong><mark>功能：可以把多个组件共用的配置提取成一个混入对象</mark></strong></p>\n<p>使用方法：**第一步：**定义混合，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;....&#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>:&#123;....&#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>**第二步：**使用混合，例如：</p>\n<p>(1). 全局混入：<code>Vue.mixin(xxx)</code></p>\n<p>(2). 局部混入：<code>mixin:['xxx']</code></p>\n<h3 id=\"Vue插件：\">Vue插件：</h3>\n<p><strong><mark>插件本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</mark></strong></p>\n<p><strong>定义插件：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象.<span class=\"property\">install</span>=<span class=\"keyword\">function</span>(<span class=\"params\">Vue,options</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加全局过滤器</span></span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">filter</span>(...)</span><br><span class=\"line\">               </span><br><span class=\"line\">    <span class=\"comment\">//添加全局指令</span></span><br><span class=\"line\">   \t<span class=\"title class_\">Vue</span>.<span class=\"title function_\">directive</span>(...)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//配置全局混入</span></span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">mixin</span>(...)</span><br><span class=\"line\">              </span><br><span class=\"line\">    <span class=\"comment\">//添加实例方法</span></span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$myMethod</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$myProperty</span>=xxxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用插件：<code>Vue.use(插件名)</code></strong></p>\n<h1>组件化编码流程：</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>拆分静态组件：组件要按功能点拆分，命名不能和html元素冲突</p>\n</li>\n<li class=\"lvl-3\">\n<p>实现动态组件：考虑好数据的存放位置，数据是一个组件在用还是一些组件在用</p>\n</li>\n<li class=\"lvl-5\">\n<p>一个组件在用：放在组件自身即可</p>\n</li>\n<li class=\"lvl-5\">\n<p>一些组件在用：放在他们共同的父组件上（<mark>状态提升</mark>）</p>\n</li>\n<li class=\"lvl-3\">\n<p>实现交互：从绑定事件开始</p>\n</li>\n</ol>\n<p><strong>props适用于：</strong></p>\n<ol>\n<li class=\"lvl-3\">\n<p>父组件==&gt;子组件 通信</p>\n</li>\n<li class=\"lvl-3\">\n<p>子组件==&gt;父组件 通信(要求父给子一个函数)</p>\n</li>\n</ol>\n<h1>webStorage</h1>\n<p><strong>浏览器端通过<code>Window.seesionStorage</code>和<code>Window.localStorage</code>属性来实现本地存储机制</strong></p>\n<p><mark>相关API</mark></p>\n<ol>\n<li class=\"lvl-3\">\n<p><code>xxxxStorage.setItem('key'，'value')</code>;  接收一个键值对作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</p>\n</li>\n<li class=\"lvl-3\">\n<p>xxxxStorage.getItem(‘key’); 接收一个键名作为参数，返回键名对应的值</p>\n</li>\n<li class=\"lvl-3\">\n<p>xxxxStorage.removeItem(‘key’); 该方法接收一个键名作为参数，并把键名从该存储中删除</p>\n</li>\n<li class=\"lvl-3\">\n<p>xxxxStorage.clear()  该方法会清空存储中的所有数据</p>\n</li>\n</ol>\n<p><mark>备注：</mark><code>xxxxStorage.getItem('key')</code>;如果对应的value获取不到，那么getItem的返回值是null</p>\n<h1>组件的自定义事件：</h1>\n<ol>\n<li class=\"lvl-4\">\n<p>一种组件间通信的方式，适用于：<strong><mark>子组件-----&gt;&gt;父组件</mark></strong></p>\n</li>\n<li class=\"lvl-4\">\n<p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<mark>事件的回调在A中</mark>）</p>\n</li>\n<li class=\"lvl-4\">\n<p>绑定自定义事件：</p>\n<ol>\n<li class=\"lvl-7\">第一种方式：在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>或<code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></li>\n<li class=\"lvl-7\">第二种方式，在父组件中：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Demo</span> ref=<span class=\"string\">&quot;demo&quot;</span>/&gt;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">xxx</span>.$on(<span class=\"string\">&#x27;atguigu&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">test</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li class=\"lvl-7\">\n<p>若想让自定义事件只触发一次，可以使用once修饰符，或<code>$once</code>方法</p>\n</li>\n</ol>\n</li>\n<li class=\"lvl-4\">\n<p>触发自定义事件:<code>this.$emit('atguigu',数据)</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>解绑自定义事件:<code>this.$off('atguigu')</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>组件上也可以<span style=\"color:red\">绑定原生DOM事件，需要使用<code>native</code>修饰符</span></p>\n</li>\n<li class=\"lvl-4\">\n<p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调函数)</code>绑定自定义事件时,回调**<mark>要么配置在methods中，要么用箭头函数</mark>**，否则this指向会出问题！</p>\n</li>\n</ol>\n<h1>全局事件总线（GlobalEventBus）</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>一种组件间通信的方式，适用于<strong>任意组件间通信</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>安装全局事件总线：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    <span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    \t<span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$bus</span>=<span class=\"variable language_\">this</span><span class=\"comment\">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li class=\"lvl-4\">\n<p>使用事件总线:</p>\n<ol>\n<li class=\"lvl-8\">接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件,<strong>事件的回调留在A组件自身</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">methods</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">demo</span>(<span class=\"params\">data</span>)&#123;.......&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.........</span><br><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$bus</span>.$on(<span class=\"string\">&#x27;xxxxx&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">demo</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t2. 提供数据：<code>this.$bus,$emit('xxxx',数据)</code></p>\n</li>\n<li class=\"lvl-5\">\n<p>最好在<code>beforeDestroy</code>钩子中用<code>$off</code>去<span style=\"color:red\">解绑当前组件所用的事件</span></p>\n</li>\n</ol>\n<h1>消息订阅与发布(pubsub)</h1>\n<ol>\n<li class=\"lvl-4\">\n<p>一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span></p>\n</li>\n<li class=\"lvl-4\">\n<p>所有步骤：</p>\n<ol>\n<li class=\"lvl-7\">\n<p>安装pubsub：<code>npm i pubsub-js</code></p>\n</li>\n<li class=\"lvl-7\">\n<p>引入：<code>import pubsub form 'pubsub-js'</code></p>\n</li>\n<li class=\"lvl-7\">\n<p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<strong>回调留在A组件自身</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">methods</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">demo</span>(<span class=\"params\">data</span>)&#123;.....&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pid</span>=pubsub.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&#x27;xxx&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">demo</span>)<span class=\"comment\">//订阅消息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li class=\"lvl-10\">\n<p>提供数据：<code>pubsub.publish('xxx',数据)</code></p>\n</li>\n<li class=\"lvl-10\">\n<p>最好在<code>beforeDestroy</code>钩子中，用<code>pubsub.unsubscribe(pid)</code>去<span style=\"color:red\">取消订阅</span></p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"补充：nextTick\">补充：nextTick</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>语法：<code>this.$nextTick(回调函数)</code></p>\n</li>\n<li class=\"lvl-3\">\n<p>作用：在下一次DOM更新结束后执行其指定的回调</p>\n</li>\n<li class=\"lvl-3\">\n<p>什么时候用：当改变数据后，要基于更新后的新<code>DOM</code>进行某些操作时，要在<code>nextTick</code>所指定的回调函数中执行</p>\n</li>\n</ol>\n<h1>Vue封装的过度与动画</h1>\n<p><strong>作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名</strong></p>\n<h3 id=\"写法：\">写法：</h3>\n<pre><code>1. 准备好样式：\n - 元素进入的样式：\n   1. v-enter：进入的起点\n   2. v-enter-active：进入过程中\n   3. v-enter-to：进入的终点\n - 元素离开的样式：\n   1. v-leave：离开的起点\n   2. v-leave-active：离开过程中\n   3. v-leave-to：离开的终点\n2. 使用`&lt;transition&gt;`包裹要过度的元素,并配置name属性\n</code></pre>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition name=<span class=\"string\">&quot;hello&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span>你好啊! <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li class=\"lvl-3\">\n<p>备注:若有多个元素需要过度,则需要使用:<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</p>\n</li>\n</ol>\n<h1>Vue脚手架配置代理</h1>\n<h3 id=\"方法一：\">方法一：</h3>\n<p>在<code>vue.config.js</code>中添加如下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServe</span>:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">proxy</span>:<span class=\"string\">&quot;http://localhost:5000&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明:</p>\n<ol>\n<li class=\"lvl-3\">\n<p>优点：配置简单，请求资源时直接发给前端（8080）即可</p>\n</li>\n<li class=\"lvl-3\">\n<p>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</p>\n</li>\n<li class=\"lvl-3\">\n<p>工作方法：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</p>\n</li>\n</ol>\n<h3 id=\"方法二：\">方法二：</h3>\n<p>编写<code>vue.config.js</code>配置具体代理规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>=&#123;</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;/api1&#x27;</span>:&#123;<span class=\"comment\">//匹配所有以&#x27;/api1&#x27;开头的请求路径</span></span><br><span class=\"line\">                <span class=\"attr\">target</span>:<span class=\"string\">&#x27;http://localhost:5000&#x27;</span>,<span class=\"comment\">//代理目标的基础路径</span></span><br><span class=\"line\">                <span class=\"attr\">changeOrigin</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">pathRewrite</span>:&#123;<span class=\"string\">&#x27;^/api1&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;<span class=\"comment\">//将/api1替换为空字符</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;/api2&#x27;</span>:&#123;<span class=\"comment\">//匹配所有以&#x27;/api2&#x27;开头的请求路径</span></span><br><span class=\"line\">                <span class=\"attr\">target</span>:<span class=\"string\">&#x27;http://localhost:5050&#x27;</span>,<span class=\"comment\">//代理目标的基础路径</span></span><br><span class=\"line\">                <span class=\"attr\">changeOrigin</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">pathRewrite</span>:&#123;<span class=\"string\">&#x27;^/api2&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;<span class=\"comment\">//将/api1替换为空字符</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tchangeOrigin设置为true时,服务器收到的请求头中的host为:localhost:5000</span></span><br><span class=\"line\"><span class=\"comment\">\tchangeOrigin设置为false时,服务器收到的请求头中的host为:localhost:8080</span></span><br><span class=\"line\"><span class=\"comment\">\tchangeOrigin默认值是true</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</p>\n</li>\n<li class=\"lvl-3\">\n<p>缺点：配置略微繁琐，请求资源时必须加前缀</p>\n</li>\n</ol>\n"},{"title":"htnl+CSS总结","date":"2023-01-23T11:12:51.000Z","_content":"\n# HTML\n\n### 表格标签\n\n#### 表格标签使用\n\n- <table></table>定义表格的标签\n\n- <tr></tr>表示表格的行\n\n- <td></td>表格的单元格\n\n#### 表格结构标签\n\n- <thead></thead>表格的头部\n- <tbody></tbody>表格的主体\n\n#### 合并单元格\n\n- 跨行合并：rowspan\n- 跨列合并：colspan\n\n### 列表标签\n\n- 无序列表：ul>li\n- 有序列表：ol>li\n- 自定义列表：dl>dt+dd\n\n### 表单标签\n\n- <form></form>表单域\n\n  ###### 表单控件\n\n  ```css\n  <input type=\"属性\"/>\n  ```\n  \n  - 属性值：\n  - button\n  - checkout\n  - file\n  - hidden\n  - image\n  - password\n  - radio\n  - reset\n  - submit\n  - text\n\nname 表单名字\n\nvalue可在文本框中呈现\n\n- label 标签：绑定表单元素\n- select>option 选择元素\n- textarea：输入内容多时用\n\n# CSS\n\n### CSS选择器\n\n- 基础选择器：\n  - 标签选择器\n  - 类选择器\n  - id选择器\n  - 通配符选择器\n- 复合选择器\n  - 子集选择器\n  - 并集选择器\n  - 链接伪类选择器\n\n### CSS字体属性\n\n- font-family：字体\n- font-size：字体大小\n- font-weight：字体粗细\n- font-style：字体样式\n\nline-height：行高\n\n### CSS文本属性\n\n- 颜色：color\n  - 表示方法：预定义，十六进制，RGB\n- 对齐文本：text-align：left/right/center\n- 装饰文本：text-decoration\n- 文本缩进：text-indent\n\n### 元素显示模式\n\n##### 块元素：\n\n- h1~h6 , p , div , ul ol li\n- 可设置高 宽 内外边距\n\n##### 行内元素：\n\n- a , strong , span等\n- 不可设置高 宽\n\n##### 行内块元素：\n\n- img input td\n- 具有块元素和行内元素的特点\n\n##### 元素显示模式转换\n\n- display：block 转换为块元素\n- display：inline 转换为行内元素\n- display：inline-block 转换为行内块元素\n\n### CSS背景\n\n- 背景颜色：background-color：transparent（透明）\n- 背景图片：background-image：url（）\n- 背景平铺：background-repeat：no-repeat\n- 背景图片位置：background-position：x y\n- 背景图像固定：background-attachment：scroll/fixed\n- 半透明：rgba\n\n### CSS三大特性\n\n- 层叠性\n- 继承性\n- 优先级：选择器权重\n\n### 盒模型\n\n- 边框（border）\n  - border-width：粗细\n  - border-style：样式\n  - border-color：颜色\n  - border-collapse：collapse：相邻边框合并\n- 内边距（padding）\n  - padding：5px 10px\n- 外边距（margin）\n\n外边距合并：为父元素添加：overflow：hidden\n\n圆角边框：border-radius\n\n- 盒子阴影：box-shadow：h-shadow v-shadow blur spread color inset\n  - h-shadow :水平阴影\n  - v-shadow：垂直阴影\n  - blur：虚实\n  - spread：阴影大小\n  - color：颜色\n  - inset：内阴影\n- 文字阴影：text-shadow（属性与盒子阴影相同）\n\n### 浮动（float）\n\n##### 特点：\n\n- 脱标\n- 不占有原来的位置\n\n##### 清除浮动：\n\n- 在浮动元素末尾加上：\n\n```css\n<div style=\"clear:both\"></div>\n```\n\n- 给父级添加overflow:hidden\n\n- 给父级添加：\n\n  ```css\n  .clearfix::after{\n      content: '';\n      display: block;\n      height: 0;\n      width: 0;\n      clear: both;\n      visibility: hidden;\n  }\n  ```\n\n### 定位（position）\n\n#### 静态定位：\n\n默认定位方式，无定位。\n\n#### 相对定位（position:relative）：\n\n- 移动的位置是相对于自身\n- 原来的位置继续占有\n\n#### 绝对定位（position:absolute）：\n\n- 子绝父相\n- 不占有原来的位置（脱标）\n\n#### 固定定位（position:fixed）：\n\n- 元素不随滚动条滚动\n\n#### 粘性定位（position:sticky）：\n\n- 相当于固定定位和相对定位的混合\n- 占有原来的位置\n\n==定位层叠次序（z-index）==\n\n### 元素的显示和隐藏：\n\n#### visibility可见性\n\n- visibility:visible  元素可视\n- visibility:hidden  元素隐藏**占有原来的位置**\n\n#### overflow溢出\n\n- overflow:visible  默认（不隐藏）\n- overflow:hidden  超出的部分隐藏\n- overflow:hidden  无论是否超出都显示滚动条\n- overflow:auto  超出的部分显示滚动条，不超出不显示\n\n### flex弹性布局\n\n#### flex布局父盒子常用属性\n\n###### flex-direction设置主轴方向\n\n属性值：\n\n- row，row-reverse，column，column-reverse\n\n###### justify-content设置主轴子元素排列方式\n\n属性值：\n\n- flex-start，flex-end，center，space-around，space-between\n\n###### flex-warp子元素是否换行\n\n###### align-items设置侧轴子元素排列方式（单行）\n\n属性值：\n\n- flex-start，flex-end，center，stretch\n\n###### align-content设置侧轴子元素排列方式（多行）\n\n属性值：同上\n\n#### flex子项常见布局\n\n###### flex属性：子项分配剩余空间\n\n```css\nflex<number>\n```\n\n###### align-self子项在侧轴的排列方式\n\n###### order定义项目的排列顺序\n\n### Grid布局\n\n#### grid-template属性：\n\n###### grid-template-columns属性设置列宽\n\n###### grod-template-rows属性设置行高\n\n```css\n.wrapper {\n  display: grid;\n  /*  声明了三列，宽度分别为 200px 100px 200px */\n  grid-template-columns: 200px 100px 200px;\n  grid-gap: 5px;\n  /*  声明了两行，行高分别为 50px 50px  */\n  grid-template-rows: 50px 50px;\n}\n```\n\n#### repeat()函数\n\n**简化重复的值**\n\n```css\n.wrapper-1 {\n  display: grid;\n  grid-template-columns: 200px 100px 200px;\n  grid-gap: 5px;\n  /*  2行，而且行高都为 50px  */\n  grid-template-rows: repeat(2, 50px);\n}\n```\n\n**补充：**\n\n==**auto-fill 关键字**：表示自动填充，让一行（或者一列）中尽可能的容纳更多元素==\n\neg：**grid-template-columns: repeat(auto-fill, 200px)**\n\n==**fr 关键字**：等分关键字==\n\neg：**grid-template-columns: 200px 1fr 2fr**\n\n表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3\n\n==**auto 关键字**：由浏览器决定长度==\n\n#### minmax函数\n\n给网格元素最大和最小像素：grid-template-columns: 1fr 1fr minmax(300px, 2fr)\n\n#### grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性\n\n**说明：`grid-row-gap` 属性、`grid-column-gap` 属性分别设置行间距和列间距。`grid-gap` 属性是两者的简写形式。**\n\n#### grid-template-areas 属性\n\n`grid-template-areas` 属性用于定义区域，一个区域由一个或者多个单元格组成\n\n一般这个属性跟网格元素的 `grid-area` 一起使用，我们在这里一起介绍。 `grid-area` 属性指定项目放在哪一个区域\n\n==注：== `.` 符号代表空的单元格，也就是没有用到该单元格。\n\n```css\n.wrapper {\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: 120px  120px  120px;\n  grid-template-areas:\n    \". header  header\"\n    \"sidebar content content\";\n  background-color: #fff;\n  color: #444;\n}\n\n.sidebar {\n  grid-area: sidebar;\n}\n\n.content {\n  grid-area: content;\n}\n\n.header {\n  grid-area: header;\n}\n```\n\n#### grid-auto-flow 属性\n\n`grid-auto-flow` 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是\"先行后列\"\n\n| 属性值    | 描述                           |\n| :-------- | :----------------------------- |\n| row       | 多的格子一行一行陈列。默认值。 |\n| column    | 多的格子一列一列排列。         |\n| dense     | 多的格子填充掉空白             |\n| row dense | 行排列，填充掉空白             |\n| row dense | 列排列，填充掉空白             |\n\n#### justify-items 属性、align-items 属性以及 place-items 属性\n\n`justify-items` 属性设置单元格内容的水平位置（左中右），`align-items` 属性设置单元格的垂直位置（上中下）\n\n| 属性值  | 描述                                 |\n| :------ | :----------------------------------- |\n| start   | 对齐单元格的起始边缘                 |\n| end     | 对齐单元格的结束边缘                 |\n| center  | 单元格内部居中                       |\n| stretch | 拉伸，占满单元格的整个宽度（默认值） |\n\n## 2D转换\n\n#### 移动（translate）\n\n- transform:translate(x,y)\n- transform:translateX(n)\n- transform:translateY(n)\n\n==注：translate中百分比是相对自身==\n\n#### 选转（rotate）\n\n语法：**transform:rotate(度数**)\n\n1.默认选转中心是元素中心点\n\n2.正顺负逆\n\n#### 2D转换中心点：transform-origin\n\n语法：**transform-origin:x y;**\n\n==参数可为像素，百分比，方位名词==\n\n#### 缩放（scale）\n\n语法：**transform:scale(x,y);**\n\n注：1.可更换中心点\n\n2.参数不跟单位\n\n#### 综合写法：\n\n==**transform:translate() rotate() scale() ...**==\n\n其顺序会影响转换效果，位移一般放最前面\n\n## 3D转换\n\n#### 3D位移：translate3d（x，y，z）\n\n3D各轴可分开写\n\n#### 透视perspective\n\n==指人眼单屏幕的距离==\n\n==距离视觉点越近的在电脑屏幕的成像越大==\n\n==**透视写到被观察的父盒子上**==\n\n#### 3D旋转（rotate3d）\n\n**可让元素在平面沿着x轴，y轴，z轴或自定义轴进行旋转**\n\n```css\ntransform:rotate3d(x,y,z,deg)\n\n/*x,y,z表示旋转轴的矢量*/\n```\n\n#### 3D呈现（transform-style）\n\n==给父盒子添加==\n\n作用：控制子盒子是否开启三维立体环境\n\n```css\ntransform-style:preserve-3d;\n```\n\n## CSS动画\n\n### 定义动画：\n\n```css\n@keyframs 动画名称{\n    /*开始状态*/\n    0%{\n        css-code;\n    }\n    50%{\n        css-code;\n    }\n    /*结束状态*/\n    100%{\n        css-code;\n    }\n}\n```\n\n###  在元素中调用元素\n\n```css\nanimation-name:move;//动画名称\nanimation-duration;//持续时间\n```\n\n==简写：animation：名称 持续时间 曲线 何时开始 是否循环 是否反向 起始结束状态==\n\n\n\n","source":"_posts/htnl-CSS总结.md","raw":"---\ntitle: htnl+CSS总结\ndate: 2023-01-23 19:12:51\ntags:\n---\n\n# HTML\n\n### 表格标签\n\n#### 表格标签使用\n\n- <table></table>定义表格的标签\n\n- <tr></tr>表示表格的行\n\n- <td></td>表格的单元格\n\n#### 表格结构标签\n\n- <thead></thead>表格的头部\n- <tbody></tbody>表格的主体\n\n#### 合并单元格\n\n- 跨行合并：rowspan\n- 跨列合并：colspan\n\n### 列表标签\n\n- 无序列表：ul>li\n- 有序列表：ol>li\n- 自定义列表：dl>dt+dd\n\n### 表单标签\n\n- <form></form>表单域\n\n  ###### 表单控件\n\n  ```css\n  <input type=\"属性\"/>\n  ```\n  \n  - 属性值：\n  - button\n  - checkout\n  - file\n  - hidden\n  - image\n  - password\n  - radio\n  - reset\n  - submit\n  - text\n\nname 表单名字\n\nvalue可在文本框中呈现\n\n- label 标签：绑定表单元素\n- select>option 选择元素\n- textarea：输入内容多时用\n\n# CSS\n\n### CSS选择器\n\n- 基础选择器：\n  - 标签选择器\n  - 类选择器\n  - id选择器\n  - 通配符选择器\n- 复合选择器\n  - 子集选择器\n  - 并集选择器\n  - 链接伪类选择器\n\n### CSS字体属性\n\n- font-family：字体\n- font-size：字体大小\n- font-weight：字体粗细\n- font-style：字体样式\n\nline-height：行高\n\n### CSS文本属性\n\n- 颜色：color\n  - 表示方法：预定义，十六进制，RGB\n- 对齐文本：text-align：left/right/center\n- 装饰文本：text-decoration\n- 文本缩进：text-indent\n\n### 元素显示模式\n\n##### 块元素：\n\n- h1~h6 , p , div , ul ol li\n- 可设置高 宽 内外边距\n\n##### 行内元素：\n\n- a , strong , span等\n- 不可设置高 宽\n\n##### 行内块元素：\n\n- img input td\n- 具有块元素和行内元素的特点\n\n##### 元素显示模式转换\n\n- display：block 转换为块元素\n- display：inline 转换为行内元素\n- display：inline-block 转换为行内块元素\n\n### CSS背景\n\n- 背景颜色：background-color：transparent（透明）\n- 背景图片：background-image：url（）\n- 背景平铺：background-repeat：no-repeat\n- 背景图片位置：background-position：x y\n- 背景图像固定：background-attachment：scroll/fixed\n- 半透明：rgba\n\n### CSS三大特性\n\n- 层叠性\n- 继承性\n- 优先级：选择器权重\n\n### 盒模型\n\n- 边框（border）\n  - border-width：粗细\n  - border-style：样式\n  - border-color：颜色\n  - border-collapse：collapse：相邻边框合并\n- 内边距（padding）\n  - padding：5px 10px\n- 外边距（margin）\n\n外边距合并：为父元素添加：overflow：hidden\n\n圆角边框：border-radius\n\n- 盒子阴影：box-shadow：h-shadow v-shadow blur spread color inset\n  - h-shadow :水平阴影\n  - v-shadow：垂直阴影\n  - blur：虚实\n  - spread：阴影大小\n  - color：颜色\n  - inset：内阴影\n- 文字阴影：text-shadow（属性与盒子阴影相同）\n\n### 浮动（float）\n\n##### 特点：\n\n- 脱标\n- 不占有原来的位置\n\n##### 清除浮动：\n\n- 在浮动元素末尾加上：\n\n```css\n<div style=\"clear:both\"></div>\n```\n\n- 给父级添加overflow:hidden\n\n- 给父级添加：\n\n  ```css\n  .clearfix::after{\n      content: '';\n      display: block;\n      height: 0;\n      width: 0;\n      clear: both;\n      visibility: hidden;\n  }\n  ```\n\n### 定位（position）\n\n#### 静态定位：\n\n默认定位方式，无定位。\n\n#### 相对定位（position:relative）：\n\n- 移动的位置是相对于自身\n- 原来的位置继续占有\n\n#### 绝对定位（position:absolute）：\n\n- 子绝父相\n- 不占有原来的位置（脱标）\n\n#### 固定定位（position:fixed）：\n\n- 元素不随滚动条滚动\n\n#### 粘性定位（position:sticky）：\n\n- 相当于固定定位和相对定位的混合\n- 占有原来的位置\n\n==定位层叠次序（z-index）==\n\n### 元素的显示和隐藏：\n\n#### visibility可见性\n\n- visibility:visible  元素可视\n- visibility:hidden  元素隐藏**占有原来的位置**\n\n#### overflow溢出\n\n- overflow:visible  默认（不隐藏）\n- overflow:hidden  超出的部分隐藏\n- overflow:hidden  无论是否超出都显示滚动条\n- overflow:auto  超出的部分显示滚动条，不超出不显示\n\n### flex弹性布局\n\n#### flex布局父盒子常用属性\n\n###### flex-direction设置主轴方向\n\n属性值：\n\n- row，row-reverse，column，column-reverse\n\n###### justify-content设置主轴子元素排列方式\n\n属性值：\n\n- flex-start，flex-end，center，space-around，space-between\n\n###### flex-warp子元素是否换行\n\n###### align-items设置侧轴子元素排列方式（单行）\n\n属性值：\n\n- flex-start，flex-end，center，stretch\n\n###### align-content设置侧轴子元素排列方式（多行）\n\n属性值：同上\n\n#### flex子项常见布局\n\n###### flex属性：子项分配剩余空间\n\n```css\nflex<number>\n```\n\n###### align-self子项在侧轴的排列方式\n\n###### order定义项目的排列顺序\n\n### Grid布局\n\n#### grid-template属性：\n\n###### grid-template-columns属性设置列宽\n\n###### grod-template-rows属性设置行高\n\n```css\n.wrapper {\n  display: grid;\n  /*  声明了三列，宽度分别为 200px 100px 200px */\n  grid-template-columns: 200px 100px 200px;\n  grid-gap: 5px;\n  /*  声明了两行，行高分别为 50px 50px  */\n  grid-template-rows: 50px 50px;\n}\n```\n\n#### repeat()函数\n\n**简化重复的值**\n\n```css\n.wrapper-1 {\n  display: grid;\n  grid-template-columns: 200px 100px 200px;\n  grid-gap: 5px;\n  /*  2行，而且行高都为 50px  */\n  grid-template-rows: repeat(2, 50px);\n}\n```\n\n**补充：**\n\n==**auto-fill 关键字**：表示自动填充，让一行（或者一列）中尽可能的容纳更多元素==\n\neg：**grid-template-columns: repeat(auto-fill, 200px)**\n\n==**fr 关键字**：等分关键字==\n\neg：**grid-template-columns: 200px 1fr 2fr**\n\n表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3\n\n==**auto 关键字**：由浏览器决定长度==\n\n#### minmax函数\n\n给网格元素最大和最小像素：grid-template-columns: 1fr 1fr minmax(300px, 2fr)\n\n#### grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性\n\n**说明：`grid-row-gap` 属性、`grid-column-gap` 属性分别设置行间距和列间距。`grid-gap` 属性是两者的简写形式。**\n\n#### grid-template-areas 属性\n\n`grid-template-areas` 属性用于定义区域，一个区域由一个或者多个单元格组成\n\n一般这个属性跟网格元素的 `grid-area` 一起使用，我们在这里一起介绍。 `grid-area` 属性指定项目放在哪一个区域\n\n==注：== `.` 符号代表空的单元格，也就是没有用到该单元格。\n\n```css\n.wrapper {\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: 120px  120px  120px;\n  grid-template-areas:\n    \". header  header\"\n    \"sidebar content content\";\n  background-color: #fff;\n  color: #444;\n}\n\n.sidebar {\n  grid-area: sidebar;\n}\n\n.content {\n  grid-area: content;\n}\n\n.header {\n  grid-area: header;\n}\n```\n\n#### grid-auto-flow 属性\n\n`grid-auto-flow` 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是\"先行后列\"\n\n| 属性值    | 描述                           |\n| :-------- | :----------------------------- |\n| row       | 多的格子一行一行陈列。默认值。 |\n| column    | 多的格子一列一列排列。         |\n| dense     | 多的格子填充掉空白             |\n| row dense | 行排列，填充掉空白             |\n| row dense | 列排列，填充掉空白             |\n\n#### justify-items 属性、align-items 属性以及 place-items 属性\n\n`justify-items` 属性设置单元格内容的水平位置（左中右），`align-items` 属性设置单元格的垂直位置（上中下）\n\n| 属性值  | 描述                                 |\n| :------ | :----------------------------------- |\n| start   | 对齐单元格的起始边缘                 |\n| end     | 对齐单元格的结束边缘                 |\n| center  | 单元格内部居中                       |\n| stretch | 拉伸，占满单元格的整个宽度（默认值） |\n\n## 2D转换\n\n#### 移动（translate）\n\n- transform:translate(x,y)\n- transform:translateX(n)\n- transform:translateY(n)\n\n==注：translate中百分比是相对自身==\n\n#### 选转（rotate）\n\n语法：**transform:rotate(度数**)\n\n1.默认选转中心是元素中心点\n\n2.正顺负逆\n\n#### 2D转换中心点：transform-origin\n\n语法：**transform-origin:x y;**\n\n==参数可为像素，百分比，方位名词==\n\n#### 缩放（scale）\n\n语法：**transform:scale(x,y);**\n\n注：1.可更换中心点\n\n2.参数不跟单位\n\n#### 综合写法：\n\n==**transform:translate() rotate() scale() ...**==\n\n其顺序会影响转换效果，位移一般放最前面\n\n## 3D转换\n\n#### 3D位移：translate3d（x，y，z）\n\n3D各轴可分开写\n\n#### 透视perspective\n\n==指人眼单屏幕的距离==\n\n==距离视觉点越近的在电脑屏幕的成像越大==\n\n==**透视写到被观察的父盒子上**==\n\n#### 3D旋转（rotate3d）\n\n**可让元素在平面沿着x轴，y轴，z轴或自定义轴进行旋转**\n\n```css\ntransform:rotate3d(x,y,z,deg)\n\n/*x,y,z表示旋转轴的矢量*/\n```\n\n#### 3D呈现（transform-style）\n\n==给父盒子添加==\n\n作用：控制子盒子是否开启三维立体环境\n\n```css\ntransform-style:preserve-3d;\n```\n\n## CSS动画\n\n### 定义动画：\n\n```css\n@keyframs 动画名称{\n    /*开始状态*/\n    0%{\n        css-code;\n    }\n    50%{\n        css-code;\n    }\n    /*结束状态*/\n    100%{\n        css-code;\n    }\n}\n```\n\n###  在元素中调用元素\n\n```css\nanimation-name:move;//动画名称\nanimation-duration;//持续时间\n```\n\n==简写：animation：名称 持续时间 曲线 何时开始 是否循环 是否反向 起始结束状态==\n\n\n\n","slug":"htnl-CSS总结","published":1,"updated":"2023-01-27T10:59:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9aw94k0007e8uf8r746m5w","content":"<h1>HTML</h1>\n<h3 id=\"表格标签\">表格标签</h3>\n<h4 id=\"表格标签使用\">表格标签使用</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<table></table>定义表格的标签\n</li>\n<li class=\"lvl-2\">\n<tr></tr>表示表格的行\n</li>\n<li class=\"lvl-2\">\n<td></td>表格的单元格\n</li>\n</ul>\n<h4 id=\"表格结构标签\">表格结构标签</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<thead></thead>表格的头部\n</li>\n<li class=\"lvl-2\">\n<tbody></tbody>表格的主体\n</li>\n</ul>\n<h4 id=\"合并单元格\">合并单元格</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>跨行合并：rowspan</p>\n</li>\n<li class=\"lvl-2\">\n<p>跨列合并：colspan</p>\n</li>\n</ul>\n<h3 id=\"列表标签\">列表标签</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>无序列表：ul&gt;li</p>\n</li>\n<li class=\"lvl-2\">\n<p>有序列表：ol&gt;li</p>\n</li>\n<li class=\"lvl-2\">\n<p>自定义列表：dl&gt;dt+dd</p>\n</li>\n</ul>\n<h3 id=\"表单标签\">表单标签</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<form></form>表单域\n<h6 id=\"表单控件\">表单控件</h6>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">input</span> type=&quot;属性&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">\n<p>属性值：</p>\n</li>\n<li class=\"lvl-4\">\n<p>button</p>\n</li>\n<li class=\"lvl-4\">\n<p>checkout</p>\n</li>\n<li class=\"lvl-4\">\n<p>file</p>\n</li>\n<li class=\"lvl-4\">\n<p>hidden</p>\n</li>\n<li class=\"lvl-4\">\n<p>image</p>\n</li>\n<li class=\"lvl-4\">\n<p>password</p>\n</li>\n<li class=\"lvl-4\">\n<p>radio</p>\n</li>\n<li class=\"lvl-4\">\n<p>reset</p>\n</li>\n<li class=\"lvl-4\">\n<p>submit</p>\n</li>\n<li class=\"lvl-4\">\n<p>text</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>name 表单名字</p>\n<p>value可在文本框中呈现</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>label 标签：绑定表单元素</p>\n</li>\n<li class=\"lvl-2\">\n<p>select&gt;option 选择元素</p>\n</li>\n<li class=\"lvl-2\">\n<p>textarea：输入内容多时用</p>\n</li>\n</ul>\n<h1>CSS</h1>\n<h3 id=\"CSS选择器\">CSS选择器</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>基础选择器：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">标签选择器</li>\n<li class=\"lvl-4\">类选择器</li>\n<li class=\"lvl-4\">id选择器</li>\n<li class=\"lvl-4\">通配符选择器</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>复合选择器</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">子集选择器</li>\n<li class=\"lvl-4\">并集选择器</li>\n<li class=\"lvl-4\">链接伪类选择器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS字体属性\">CSS字体属性</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>font-family：字体</p>\n</li>\n<li class=\"lvl-2\">\n<p>font-size：字体大小</p>\n</li>\n<li class=\"lvl-2\">\n<p>font-weight：字体粗细</p>\n</li>\n<li class=\"lvl-2\">\n<p>font-style：字体样式</p>\n</li>\n</ul>\n<p>line-height：行高</p>\n<h3 id=\"CSS文本属性\">CSS文本属性</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>颜色：color</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">表示方法：预定义，十六进制，RGB</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>对齐文本：text-align：left/right/center</p>\n</li>\n<li class=\"lvl-2\">\n<p>装饰文本：text-decoration</p>\n</li>\n<li class=\"lvl-2\">\n<p>文本缩进：text-indent</p>\n</li>\n</ul>\n<h3 id=\"元素显示模式\">元素显示模式</h3>\n<h5 id=\"块元素：\">块元素：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>h1~h6 , p , div , ul ol li</p>\n</li>\n<li class=\"lvl-2\">\n<p>可设置高 宽 内外边距</p>\n</li>\n</ul>\n<h5 id=\"行内元素：\">行内元素：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>a , strong , span等</p>\n</li>\n<li class=\"lvl-2\">\n<p>不可设置高 宽</p>\n</li>\n</ul>\n<h5 id=\"行内块元素：\">行内块元素：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>img input td</p>\n</li>\n<li class=\"lvl-2\">\n<p>具有块元素和行内元素的特点</p>\n</li>\n</ul>\n<h5 id=\"元素显示模式转换\">元素显示模式转换</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>display：block 转换为块元素</p>\n</li>\n<li class=\"lvl-2\">\n<p>display：inline 转换为行内元素</p>\n</li>\n<li class=\"lvl-2\">\n<p>display：inline-block 转换为行内块元素</p>\n</li>\n</ul>\n<h3 id=\"CSS背景\">CSS背景</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>背景颜色：background-color：transparent（透明）</p>\n</li>\n<li class=\"lvl-2\">\n<p>背景图片：background-image：url（）</p>\n</li>\n<li class=\"lvl-2\">\n<p>背景平铺：background-repeat：no-repeat</p>\n</li>\n<li class=\"lvl-2\">\n<p>背景图片位置：background-position：x y</p>\n</li>\n<li class=\"lvl-2\">\n<p>背景图像固定：background-attachment：scroll/fixed</p>\n</li>\n<li class=\"lvl-2\">\n<p>半透明：rgba</p>\n</li>\n</ul>\n<h3 id=\"CSS三大特性\">CSS三大特性</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>层叠性</p>\n</li>\n<li class=\"lvl-2\">\n<p>继承性</p>\n</li>\n<li class=\"lvl-2\">\n<p>优先级：选择器权重</p>\n</li>\n</ul>\n<h3 id=\"盒模型\">盒模型</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>边框（border）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">border-width：粗细</li>\n<li class=\"lvl-4\">border-style：样式</li>\n<li class=\"lvl-4\">border-color：颜色</li>\n<li class=\"lvl-4\">border-collapse：collapse：相邻边框合并</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>内边距（padding）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">padding：5px 10px</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>外边距（margin）</p>\n</li>\n</ul>\n<p>外边距合并：为父元素添加：overflow：hidden</p>\n<p>圆角边框：border-radius</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>盒子阴影：box-shadow：h-shadow v-shadow blur spread color inset</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">h-shadow :水平阴影</li>\n<li class=\"lvl-4\">v-shadow：垂直阴影</li>\n<li class=\"lvl-4\">blur：虚实</li>\n<li class=\"lvl-4\">spread：阴影大小</li>\n<li class=\"lvl-4\">color：颜色</li>\n<li class=\"lvl-4\">inset：内阴影</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>文字阴影：text-shadow（属性与盒子阴影相同）</p>\n</li>\n</ul>\n<h3 id=\"浮动（float）\">浮动（float）</h3>\n<h5 id=\"特点：\">特点：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>脱标</p>\n</li>\n<li class=\"lvl-2\">\n<p>不占有原来的位置</p>\n</li>\n</ul>\n<h5 id=\"清除浮动：\">清除浮动：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在浮动元素末尾加上：</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=&quot;<span class=\"attribute\">clear</span>:both<span class=\"string\">&quot;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>给父级添加overflow:hidden</p>\n</li>\n<li class=\"lvl-2\">\n<p>给父级添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"定位（position）\">定位（position）</h3>\n<h4 id=\"静态定位：\">静态定位：</h4>\n<p>默认定位方式，无定位。</p>\n<h4 id=\"相对定位（position-relative）：\">相对定位（position:relative）：</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>移动的位置是相对于自身</p>\n</li>\n<li class=\"lvl-2\">\n<p>原来的位置继续占有</p>\n</li>\n</ul>\n<h4 id=\"绝对定位（position-absolute）：\">绝对定位（position:absolute）：</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>子绝父相</p>\n</li>\n<li class=\"lvl-2\">\n<p>不占有原来的位置（脱标）</p>\n</li>\n</ul>\n<h4 id=\"固定定位（position-fixed）：\">固定定位（position:fixed）：</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>元素不随滚动条滚动</p>\n</li>\n</ul>\n<h4 id=\"粘性定位（position-sticky）：\">粘性定位（position:sticky）：</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>相当于固定定位和相对定位的混合</p>\n</li>\n<li class=\"lvl-2\">\n<p>占有原来的位置</p>\n</li>\n</ul>\n<p><mark>定位层叠次序（z-index）</mark></p>\n<h3 id=\"元素的显示和隐藏：\">元素的显示和隐藏：</h3>\n<h4 id=\"visibility可见性\">visibility可见性</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>visibility:visible  元素可视</p>\n</li>\n<li class=\"lvl-2\">\n<p>visibility:hidden  元素隐藏<strong>占有原来的位置</strong></p>\n</li>\n</ul>\n<h4 id=\"overflow溢出\">overflow溢出</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>overflow:visible  默认（不隐藏）</p>\n</li>\n<li class=\"lvl-2\">\n<p>overflow:hidden  超出的部分隐藏</p>\n</li>\n<li class=\"lvl-2\">\n<p>overflow:hidden  无论是否超出都显示滚动条</p>\n</li>\n<li class=\"lvl-2\">\n<p>overflow:auto  超出的部分显示滚动条，不超出不显示</p>\n</li>\n</ul>\n<h3 id=\"flex弹性布局\">flex弹性布局</h3>\n<h4 id=\"flex布局父盒子常用属性\">flex布局父盒子常用属性</h4>\n<h6 id=\"flex-direction设置主轴方向\">flex-direction设置主轴方向</h6>\n<p>属性值：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>row，row-reverse，column，column-reverse</p>\n</li>\n</ul>\n<h6 id=\"justify-content设置主轴子元素排列方式\">justify-content设置主轴子元素排列方式</h6>\n<p>属性值：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>flex-start，flex-end，center，space-around，space-between</p>\n</li>\n</ul>\n<h6 id=\"flex-warp子元素是否换行\">flex-warp子元素是否换行</h6>\n<h6 id=\"align-items设置侧轴子元素排列方式（单行）\">align-items设置侧轴子元素排列方式（单行）</h6>\n<p>属性值：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>flex-start，flex-end，center，stretch</p>\n</li>\n</ul>\n<h6 id=\"align-content设置侧轴子元素排列方式（多行）\">align-content设置侧轴子元素排列方式（多行）</h6>\n<p>属性值：同上</p>\n<h4 id=\"flex子项常见布局\">flex子项常见布局</h4>\n<h6 id=\"flex属性：子项分配剩余空间\">flex属性：子项分配剩余空间</h6>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">flex</span>&lt;number&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"align-self子项在侧轴的排列方式\">align-self子项在侧轴的排列方式</h6>\n<h6 id=\"order定义项目的排列顺序\">order定义项目的排列顺序</h6>\n<h3 id=\"Grid布局\">Grid布局</h3>\n<h4 id=\"grid-template属性：\">grid-template属性：</h4>\n<h6 id=\"grid-template-columns属性设置列宽\">grid-template-columns属性设置列宽</h6>\n<h6 id=\"grod-template-rows属性设置行高\">grod-template-rows属性设置行高</h6>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"comment\">/*  声明了三列，宽度分别为 200px 100px 200px */</span></span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">100px</span> <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  声明了两行，行高分别为 50px 50px  */</span></span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"repeat-函数\">repeat()函数</h4>\n<p><strong>简化重复的值</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">100px</span> <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  2行，而且行高都为 50px  */</span></span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">2</span>, <span class=\"number\">50px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>补充：</strong></p>\n<p><mark><strong>auto-fill 关键字</strong>：表示自动填充，让一行（或者一列）中尽可能的容纳更多元素</mark></p>\n<p>eg：<strong>grid-template-columns: repeat(auto-fill, 200px)</strong></p>\n<p><mark><strong>fr 关键字</strong>：等分关键字</mark></p>\n<p>eg：<strong>grid-template-columns: 200px 1fr 2fr</strong></p>\n<p>表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3</p>\n<p><mark><strong>auto 关键字</strong>：由浏览器决定长度</mark></p>\n<h4 id=\"minmax函数\">minmax函数</h4>\n<p>给网格元素最大和最小像素：grid-template-columns: 1fr 1fr minmax(300px, 2fr)</p>\n<h4 id=\"grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性\">grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性</h4>\n<p><strong>说明：<code>grid-row-gap</code> 属性、<code>grid-column-gap</code> 属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式。</strong></p>\n<h4 id=\"grid-template-areas-属性\">grid-template-areas 属性</h4>\n<p><code>grid-template-areas</code> 属性用于定义区域，一个区域由一个或者多个单元格组成</p>\n<p>一般这个属性跟网格元素的 <code>grid-area</code> 一起使用，我们在这里一起介绍。 <code>grid-area</code> 属性指定项目放在哪一个区域</p>\n<p><mark>注：</mark> <code>.</code> 符号代表空的单元格，也就是没有用到该单元格。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">120px</span>  <span class=\"number\">120px</span>  <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-areas</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;. header  header&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sidebar content content&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: sidebar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: content;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: header;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"grid-auto-flow-属性\">grid-auto-flow 属性</h4>\n<p><code>grid-auto-flow</code> 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是&quot;先行后列&quot;</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性值</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">row</td>\n<td style=\"text-align:left\">多的格子一行一行陈列。默认值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">column</td>\n<td style=\"text-align:left\">多的格子一列一列排列。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dense</td>\n<td style=\"text-align:left\">多的格子填充掉空白</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row dense</td>\n<td style=\"text-align:left\">行排列，填充掉空白</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row dense</td>\n<td style=\"text-align:left\">列排列，填充掉空白</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"justify-items-属性、align-items-属性以及-place-items-属性\">justify-items 属性、align-items 属性以及 place-items 属性</h4>\n<p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右），<code>align-items</code> 属性设置单元格的垂直位置（上中下）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性值</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">start</td>\n<td style=\"text-align:left\">对齐单元格的起始边缘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">end</td>\n<td style=\"text-align:left\">对齐单元格的结束边缘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">center</td>\n<td style=\"text-align:left\">单元格内部居中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">stretch</td>\n<td style=\"text-align:left\">拉伸，占满单元格的整个宽度（默认值）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2D转换\">2D转换</h2>\n<h4 id=\"移动（translate）\">移动（translate）</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>transform:translate(x,y)</p>\n</li>\n<li class=\"lvl-2\">\n<p>transform:translateX(n)</p>\n</li>\n<li class=\"lvl-2\">\n<p>transform:translateY(n)</p>\n</li>\n</ul>\n<p><mark>注：translate中百分比是相对自身</mark></p>\n<h4 id=\"选转（rotate）\">选转（rotate）</h4>\n<p>语法：<strong>transform:rotate(度数</strong>)</p>\n<p>1.默认选转中心是元素中心点</p>\n<p>2.正顺负逆</p>\n<h4 id=\"2D转换中心点：transform-origin\">2D转换中心点：transform-origin</h4>\n<p>语法：<strong>transform-origin:x y;</strong></p>\n<p><mark>参数可为像素，百分比，方位名词</mark></p>\n<h4 id=\"缩放（scale）\">缩放（scale）</h4>\n<p>语法：<strong>transform:scale(x,y);</strong></p>\n<p>注：1.可更换中心点</p>\n<p>2.参数不跟单位</p>\n<h4 id=\"综合写法：\">综合写法：</h4>\n<p><mark><strong>transform:translate() rotate() scale() …</strong></mark></p>\n<p>其顺序会影响转换效果，位移一般放最前面</p>\n<h2 id=\"3D转换\">3D转换</h2>\n<h4 id=\"3D位移：translate3d（x，y，z）\">3D位移：translate3d（x，y，z）</h4>\n<p>3D各轴可分开写</p>\n<h4 id=\"透视perspective\">透视perspective</h4>\n<p><mark>指人眼单屏幕的距离</mark></p>\n<p><mark>距离视觉点越近的在电脑屏幕的成像越大</mark></p>\n<p><mark><strong>透视写到被观察的父盒子上</strong></mark></p>\n<h4 id=\"3D旋转（rotate3d）\">3D旋转（rotate3d）</h4>\n<p><strong>可让元素在平面沿着x轴，y轴，z轴或自定义轴进行旋转</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate3d</span>(x,y,z,deg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*x,y,z表示旋转轴的矢量*/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3D呈现（transform-style）\">3D呈现（transform-style）</h4>\n<p><mark>给父盒子添加</mark></p>\n<p>作用：控制子盒子是否开启三维立体环境</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform-style</span>:preserve-<span class=\"number\">3</span>d;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS动画\">CSS动画</h2>\n<h3 id=\"定义动画：\">定义动画：</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframs</span> 动画名称&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*开始状态*/</span></span><br><span class=\"line\">    <span class=\"number\">0%</span>&#123;</span><br><span class=\"line\">        css-<span class=\"selector-tag\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">50%</span>&#123;</span><br><span class=\"line\">        css-<span class=\"selector-tag\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*结束状态*/</span></span><br><span class=\"line\">    <span class=\"number\">100%</span>&#123;</span><br><span class=\"line\">        css-<span class=\"selector-tag\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在元素中调用元素\">在元素中调用元素</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">animation-name</span>:move;//动画名称</span><br><span class=\"line\"><span class=\"attribute\">animation-duration</span>;//持续时间</span><br></pre></td></tr></table></figure>\n<p><mark>简写：animation：名称 持续时间 曲线 何时开始 是否循环 是否反向 起始结束状态</mark></p>\n","site":{"data":{}},"cover":"/medias/cover/08.jpg","excerpt":"","more":"<h1>HTML</h1>\n<h3 id=\"表格标签\">表格标签</h3>\n<h4 id=\"表格标签使用\">表格标签使用</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<table></table>定义表格的标签\n</li>\n<li class=\"lvl-2\">\n<tr></tr>表示表格的行\n</li>\n<li class=\"lvl-2\">\n<td></td>表格的单元格\n</li>\n</ul>\n<h4 id=\"表格结构标签\">表格结构标签</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<thead></thead>表格的头部\n</li>\n<li class=\"lvl-2\">\n<tbody></tbody>表格的主体\n</li>\n</ul>\n<h4 id=\"合并单元格\">合并单元格</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>跨行合并：rowspan</p>\n</li>\n<li class=\"lvl-2\">\n<p>跨列合并：colspan</p>\n</li>\n</ul>\n<h3 id=\"列表标签\">列表标签</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>无序列表：ul&gt;li</p>\n</li>\n<li class=\"lvl-2\">\n<p>有序列表：ol&gt;li</p>\n</li>\n<li class=\"lvl-2\">\n<p>自定义列表：dl&gt;dt+dd</p>\n</li>\n</ul>\n<h3 id=\"表单标签\">表单标签</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<form></form>表单域\n<h6 id=\"表单控件\">表单控件</h6>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">input</span> type=&quot;属性&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">\n<p>属性值：</p>\n</li>\n<li class=\"lvl-4\">\n<p>button</p>\n</li>\n<li class=\"lvl-4\">\n<p>checkout</p>\n</li>\n<li class=\"lvl-4\">\n<p>file</p>\n</li>\n<li class=\"lvl-4\">\n<p>hidden</p>\n</li>\n<li class=\"lvl-4\">\n<p>image</p>\n</li>\n<li class=\"lvl-4\">\n<p>password</p>\n</li>\n<li class=\"lvl-4\">\n<p>radio</p>\n</li>\n<li class=\"lvl-4\">\n<p>reset</p>\n</li>\n<li class=\"lvl-4\">\n<p>submit</p>\n</li>\n<li class=\"lvl-4\">\n<p>text</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>name 表单名字</p>\n<p>value可在文本框中呈现</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>label 标签：绑定表单元素</p>\n</li>\n<li class=\"lvl-2\">\n<p>select&gt;option 选择元素</p>\n</li>\n<li class=\"lvl-2\">\n<p>textarea：输入内容多时用</p>\n</li>\n</ul>\n<h1>CSS</h1>\n<h3 id=\"CSS选择器\">CSS选择器</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>基础选择器：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">标签选择器</li>\n<li class=\"lvl-4\">类选择器</li>\n<li class=\"lvl-4\">id选择器</li>\n<li class=\"lvl-4\">通配符选择器</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>复合选择器</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">子集选择器</li>\n<li class=\"lvl-4\">并集选择器</li>\n<li class=\"lvl-4\">链接伪类选择器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS字体属性\">CSS字体属性</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>font-family：字体</p>\n</li>\n<li class=\"lvl-2\">\n<p>font-size：字体大小</p>\n</li>\n<li class=\"lvl-2\">\n<p>font-weight：字体粗细</p>\n</li>\n<li class=\"lvl-2\">\n<p>font-style：字体样式</p>\n</li>\n</ul>\n<p>line-height：行高</p>\n<h3 id=\"CSS文本属性\">CSS文本属性</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>颜色：color</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">表示方法：预定义，十六进制，RGB</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>对齐文本：text-align：left/right/center</p>\n</li>\n<li class=\"lvl-2\">\n<p>装饰文本：text-decoration</p>\n</li>\n<li class=\"lvl-2\">\n<p>文本缩进：text-indent</p>\n</li>\n</ul>\n<h3 id=\"元素显示模式\">元素显示模式</h3>\n<h5 id=\"块元素：\">块元素：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>h1~h6 , p , div , ul ol li</p>\n</li>\n<li class=\"lvl-2\">\n<p>可设置高 宽 内外边距</p>\n</li>\n</ul>\n<h5 id=\"行内元素：\">行内元素：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>a , strong , span等</p>\n</li>\n<li class=\"lvl-2\">\n<p>不可设置高 宽</p>\n</li>\n</ul>\n<h5 id=\"行内块元素：\">行内块元素：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>img input td</p>\n</li>\n<li class=\"lvl-2\">\n<p>具有块元素和行内元素的特点</p>\n</li>\n</ul>\n<h5 id=\"元素显示模式转换\">元素显示模式转换</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>display：block 转换为块元素</p>\n</li>\n<li class=\"lvl-2\">\n<p>display：inline 转换为行内元素</p>\n</li>\n<li class=\"lvl-2\">\n<p>display：inline-block 转换为行内块元素</p>\n</li>\n</ul>\n<h3 id=\"CSS背景\">CSS背景</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>背景颜色：background-color：transparent（透明）</p>\n</li>\n<li class=\"lvl-2\">\n<p>背景图片：background-image：url（）</p>\n</li>\n<li class=\"lvl-2\">\n<p>背景平铺：background-repeat：no-repeat</p>\n</li>\n<li class=\"lvl-2\">\n<p>背景图片位置：background-position：x y</p>\n</li>\n<li class=\"lvl-2\">\n<p>背景图像固定：background-attachment：scroll/fixed</p>\n</li>\n<li class=\"lvl-2\">\n<p>半透明：rgba</p>\n</li>\n</ul>\n<h3 id=\"CSS三大特性\">CSS三大特性</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>层叠性</p>\n</li>\n<li class=\"lvl-2\">\n<p>继承性</p>\n</li>\n<li class=\"lvl-2\">\n<p>优先级：选择器权重</p>\n</li>\n</ul>\n<h3 id=\"盒模型\">盒模型</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>边框（border）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">border-width：粗细</li>\n<li class=\"lvl-4\">border-style：样式</li>\n<li class=\"lvl-4\">border-color：颜色</li>\n<li class=\"lvl-4\">border-collapse：collapse：相邻边框合并</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>内边距（padding）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">padding：5px 10px</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>外边距（margin）</p>\n</li>\n</ul>\n<p>外边距合并：为父元素添加：overflow：hidden</p>\n<p>圆角边框：border-radius</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>盒子阴影：box-shadow：h-shadow v-shadow blur spread color inset</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">h-shadow :水平阴影</li>\n<li class=\"lvl-4\">v-shadow：垂直阴影</li>\n<li class=\"lvl-4\">blur：虚实</li>\n<li class=\"lvl-4\">spread：阴影大小</li>\n<li class=\"lvl-4\">color：颜色</li>\n<li class=\"lvl-4\">inset：内阴影</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>文字阴影：text-shadow（属性与盒子阴影相同）</p>\n</li>\n</ul>\n<h3 id=\"浮动（float）\">浮动（float）</h3>\n<h5 id=\"特点：\">特点：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>脱标</p>\n</li>\n<li class=\"lvl-2\">\n<p>不占有原来的位置</p>\n</li>\n</ul>\n<h5 id=\"清除浮动：\">清除浮动：</h5>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在浮动元素末尾加上：</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> style=&quot;<span class=\"attribute\">clear</span>:both<span class=\"string\">&quot;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>给父级添加overflow:hidden</p>\n</li>\n<li class=\"lvl-2\">\n<p>给父级添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"定位（position）\">定位（position）</h3>\n<h4 id=\"静态定位：\">静态定位：</h4>\n<p>默认定位方式，无定位。</p>\n<h4 id=\"相对定位（position-relative）：\">相对定位（position:relative）：</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>移动的位置是相对于自身</p>\n</li>\n<li class=\"lvl-2\">\n<p>原来的位置继续占有</p>\n</li>\n</ul>\n<h4 id=\"绝对定位（position-absolute）：\">绝对定位（position:absolute）：</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>子绝父相</p>\n</li>\n<li class=\"lvl-2\">\n<p>不占有原来的位置（脱标）</p>\n</li>\n</ul>\n<h4 id=\"固定定位（position-fixed）：\">固定定位（position:fixed）：</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>元素不随滚动条滚动</p>\n</li>\n</ul>\n<h4 id=\"粘性定位（position-sticky）：\">粘性定位（position:sticky）：</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>相当于固定定位和相对定位的混合</p>\n</li>\n<li class=\"lvl-2\">\n<p>占有原来的位置</p>\n</li>\n</ul>\n<p><mark>定位层叠次序（z-index）</mark></p>\n<h3 id=\"元素的显示和隐藏：\">元素的显示和隐藏：</h3>\n<h4 id=\"visibility可见性\">visibility可见性</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>visibility:visible  元素可视</p>\n</li>\n<li class=\"lvl-2\">\n<p>visibility:hidden  元素隐藏<strong>占有原来的位置</strong></p>\n</li>\n</ul>\n<h4 id=\"overflow溢出\">overflow溢出</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>overflow:visible  默认（不隐藏）</p>\n</li>\n<li class=\"lvl-2\">\n<p>overflow:hidden  超出的部分隐藏</p>\n</li>\n<li class=\"lvl-2\">\n<p>overflow:hidden  无论是否超出都显示滚动条</p>\n</li>\n<li class=\"lvl-2\">\n<p>overflow:auto  超出的部分显示滚动条，不超出不显示</p>\n</li>\n</ul>\n<h3 id=\"flex弹性布局\">flex弹性布局</h3>\n<h4 id=\"flex布局父盒子常用属性\">flex布局父盒子常用属性</h4>\n<h6 id=\"flex-direction设置主轴方向\">flex-direction设置主轴方向</h6>\n<p>属性值：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>row，row-reverse，column，column-reverse</p>\n</li>\n</ul>\n<h6 id=\"justify-content设置主轴子元素排列方式\">justify-content设置主轴子元素排列方式</h6>\n<p>属性值：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>flex-start，flex-end，center，space-around，space-between</p>\n</li>\n</ul>\n<h6 id=\"flex-warp子元素是否换行\">flex-warp子元素是否换行</h6>\n<h6 id=\"align-items设置侧轴子元素排列方式（单行）\">align-items设置侧轴子元素排列方式（单行）</h6>\n<p>属性值：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>flex-start，flex-end，center，stretch</p>\n</li>\n</ul>\n<h6 id=\"align-content设置侧轴子元素排列方式（多行）\">align-content设置侧轴子元素排列方式（多行）</h6>\n<p>属性值：同上</p>\n<h4 id=\"flex子项常见布局\">flex子项常见布局</h4>\n<h6 id=\"flex属性：子项分配剩余空间\">flex属性：子项分配剩余空间</h6>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">flex</span>&lt;number&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"align-self子项在侧轴的排列方式\">align-self子项在侧轴的排列方式</h6>\n<h6 id=\"order定义项目的排列顺序\">order定义项目的排列顺序</h6>\n<h3 id=\"Grid布局\">Grid布局</h3>\n<h4 id=\"grid-template属性：\">grid-template属性：</h4>\n<h6 id=\"grid-template-columns属性设置列宽\">grid-template-columns属性设置列宽</h6>\n<h6 id=\"grod-template-rows属性设置行高\">grod-template-rows属性设置行高</h6>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"comment\">/*  声明了三列，宽度分别为 200px 100px 200px */</span></span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">100px</span> <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  声明了两行，行高分别为 50px 50px  */</span></span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"repeat-函数\">repeat()函数</h4>\n<p><strong>简化重复的值</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">100px</span> <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  2行，而且行高都为 50px  */</span></span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">2</span>, <span class=\"number\">50px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>补充：</strong></p>\n<p><mark><strong>auto-fill 关键字</strong>：表示自动填充，让一行（或者一列）中尽可能的容纳更多元素</mark></p>\n<p>eg：<strong>grid-template-columns: repeat(auto-fill, 200px)</strong></p>\n<p><mark><strong>fr 关键字</strong>：等分关键字</mark></p>\n<p>eg：<strong>grid-template-columns: 200px 1fr 2fr</strong></p>\n<p>表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3</p>\n<p><mark><strong>auto 关键字</strong>：由浏览器决定长度</mark></p>\n<h4 id=\"minmax函数\">minmax函数</h4>\n<p>给网格元素最大和最小像素：grid-template-columns: 1fr 1fr minmax(300px, 2fr)</p>\n<h4 id=\"grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性\">grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性</h4>\n<p><strong>说明：<code>grid-row-gap</code> 属性、<code>grid-column-gap</code> 属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式。</strong></p>\n<h4 id=\"grid-template-areas-属性\">grid-template-areas 属性</h4>\n<p><code>grid-template-areas</code> 属性用于定义区域，一个区域由一个或者多个单元格组成</p>\n<p>一般这个属性跟网格元素的 <code>grid-area</code> 一起使用，我们在这里一起介绍。 <code>grid-area</code> 属性指定项目放在哪一个区域</p>\n<p><mark>注：</mark> <code>.</code> 符号代表空的单元格，也就是没有用到该单元格。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">120px</span>  <span class=\"number\">120px</span>  <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-areas</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;. header  header&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sidebar content content&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: sidebar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: content;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: header;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"grid-auto-flow-属性\">grid-auto-flow 属性</h4>\n<p><code>grid-auto-flow</code> 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是&quot;先行后列&quot;</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性值</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">row</td>\n<td style=\"text-align:left\">多的格子一行一行陈列。默认值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">column</td>\n<td style=\"text-align:left\">多的格子一列一列排列。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dense</td>\n<td style=\"text-align:left\">多的格子填充掉空白</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row dense</td>\n<td style=\"text-align:left\">行排列，填充掉空白</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row dense</td>\n<td style=\"text-align:left\">列排列，填充掉空白</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"justify-items-属性、align-items-属性以及-place-items-属性\">justify-items 属性、align-items 属性以及 place-items 属性</h4>\n<p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右），<code>align-items</code> 属性设置单元格的垂直位置（上中下）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性值</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">start</td>\n<td style=\"text-align:left\">对齐单元格的起始边缘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">end</td>\n<td style=\"text-align:left\">对齐单元格的结束边缘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">center</td>\n<td style=\"text-align:left\">单元格内部居中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">stretch</td>\n<td style=\"text-align:left\">拉伸，占满单元格的整个宽度（默认值）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2D转换\">2D转换</h2>\n<h4 id=\"移动（translate）\">移动（translate）</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>transform:translate(x,y)</p>\n</li>\n<li class=\"lvl-2\">\n<p>transform:translateX(n)</p>\n</li>\n<li class=\"lvl-2\">\n<p>transform:translateY(n)</p>\n</li>\n</ul>\n<p><mark>注：translate中百分比是相对自身</mark></p>\n<h4 id=\"选转（rotate）\">选转（rotate）</h4>\n<p>语法：<strong>transform:rotate(度数</strong>)</p>\n<p>1.默认选转中心是元素中心点</p>\n<p>2.正顺负逆</p>\n<h4 id=\"2D转换中心点：transform-origin\">2D转换中心点：transform-origin</h4>\n<p>语法：<strong>transform-origin:x y;</strong></p>\n<p><mark>参数可为像素，百分比，方位名词</mark></p>\n<h4 id=\"缩放（scale）\">缩放（scale）</h4>\n<p>语法：<strong>transform:scale(x,y);</strong></p>\n<p>注：1.可更换中心点</p>\n<p>2.参数不跟单位</p>\n<h4 id=\"综合写法：\">综合写法：</h4>\n<p><mark><strong>transform:translate() rotate() scale() …</strong></mark></p>\n<p>其顺序会影响转换效果，位移一般放最前面</p>\n<h2 id=\"3D转换\">3D转换</h2>\n<h4 id=\"3D位移：translate3d（x，y，z）\">3D位移：translate3d（x，y，z）</h4>\n<p>3D各轴可分开写</p>\n<h4 id=\"透视perspective\">透视perspective</h4>\n<p><mark>指人眼单屏幕的距离</mark></p>\n<p><mark>距离视觉点越近的在电脑屏幕的成像越大</mark></p>\n<p><mark><strong>透视写到被观察的父盒子上</strong></mark></p>\n<h4 id=\"3D旋转（rotate3d）\">3D旋转（rotate3d）</h4>\n<p><strong>可让元素在平面沿着x轴，y轴，z轴或自定义轴进行旋转</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate3d</span>(x,y,z,deg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*x,y,z表示旋转轴的矢量*/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3D呈现（transform-style）\">3D呈现（transform-style）</h4>\n<p><mark>给父盒子添加</mark></p>\n<p>作用：控制子盒子是否开启三维立体环境</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform-style</span>:preserve-<span class=\"number\">3</span>d;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS动画\">CSS动画</h2>\n<h3 id=\"定义动画：\">定义动画：</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframs</span> 动画名称&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*开始状态*/</span></span><br><span class=\"line\">    <span class=\"number\">0%</span>&#123;</span><br><span class=\"line\">        css-<span class=\"selector-tag\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">50%</span>&#123;</span><br><span class=\"line\">        css-<span class=\"selector-tag\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*结束状态*/</span></span><br><span class=\"line\">    <span class=\"number\">100%</span>&#123;</span><br><span class=\"line\">        css-<span class=\"selector-tag\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在元素中调用元素\">在元素中调用元素</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">animation-name</span>:move;//动画名称</span><br><span class=\"line\"><span class=\"attribute\">animation-duration</span>;//持续时间</span><br></pre></td></tr></table></figure>\n<p><mark>简写：animation：名称 持续时间 曲线 何时开始 是否循环 是否反向 起始结束状态</mark></p>\n"},{"title":"Csharp笔记","date":"2023-01-27T10:59:22.000Z","_content":"\n# C# 静态成员和实例成员\n\n- 　静态成员（[static](https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020) member）：又叫类成员，指的是在成员类型或返回值类型前用static关键字修饰的变量或方法，包括静态数据和静态方法；\n- 　实例成员（instance member）：又称非静态成员、对象成员，是没有用static修饰的变量或方法，包括实例数据和实例方法。\n\n### 静态成员的特点：\n\n- 静态成员（包括静态数据和静态方法）必须由类名调用，不能使用对象调用（静态数据可以由实例方法调用）。\n- 静态数据属于类的级别，当类加载时，一个静态数据在内存只分配一个存储空间，无论new出多少个实例，它也只是有那一个空间。\n- 静态方法只能调用静态数据，不能调用对象。\n\n### 实例成员的特点：\n\n- 实例成员（包括实例数据和实例方法）必须通过对象来调用，不能使用类名调用。\n- 类的实例数据属于类的实例级别，每新创建一个对象，都会在内存中为实例成员开辟一块新的存储空间。\n- 实例方法可以调用实例数据和静态数据。\n\n# 类型转换\n\n### 隐式类型转换\n\n- 不丢失精度的转换\n- 子类向父类的转换\n- 装箱\n\n### 显式类型转换\n\n- 有可能丢失精度的转换，即cast（（T）x）T：目标类型\n- 拆箱\n- 使用convert类\n- ToString方法与各数据类型的Parse/TryParse方法\n\n\n\n# C#封装\n\n**封装** 被定义为\"把一个或多个项目封闭在一个物理的或者逻辑的包中\"\n\n **C#支持的访问修饰符：**\n\n- public：所有对象都可以访问；\n- private：对象本身在对象内部可以访问；\n- protected：只有该类对象及其子类对象可以访问，这样有助于实现继承\n- internal：同一个程序集的对象可以访问；\n- protected internal：访问限于当前程序集或派生自包含类的类型。\n\n## 属性封装\n\n- 属性（Property)是类（class）、结构（structure）和接口（interface）的命名（named）成员\n\n```csharp\n private int age;//private:私有的,仅供内部进行访问\n public int Age//public:公有的,任何地方都可以访问\n        {\n            //获取或读取字段值\n            get { return age; }//属性的读取\n            set { age = value; }//属性赋值(value为关键字)\n        }\n\n```\n\n```csharp\nfirst.Age = 21;\nConsole.WriteLine(\"年龄为:{0}\",first.Age);\n```\n\n\n\n**字段和属性有什么区别？**\n\n- 字段：占用内存\n- 属性：不占内存\n- 属性必须依赖一个字段\n\n## 方法封装\n\n- 第一种无参数的方法（没有返回值的方法）\n- 第二种有参数的方法（有返回值的方法）\n\n# C# List<T>用法\n\n## List<T>的用法\n\n- **声明**：\n\n```csharp\nList<T> mList = new List<T>(); //T为列表中元素类型\n\n//以一个集合作为参数创建List：\nstring[] temArr = { \"Ha\", \"Hunter\", \"Tom\", \"Lily\", \"Jay\", \"Jim\", \"Kuku\", \"Locu\" };\nList<string> testList = new List<string>(temArr);\n```\n\n- **添加元素**：List.Add(element)      List.Insert(index,element)\n\n```csharp\nList<string> mList = new List<string>();\nmList.Add(\"John\");\n\n//在index位置添加一个元素\nList<string> mList = new List<string>();\nmList.Insert(1, \"Hei\")\n```\n\n- **遍历List元素**：\n\n```csharp\nforeach (T element in mList)  //T的类型与mList声明时一样\n{\n    Console.WriteLine(element);\n}\n```\n\n- **删除元素**:   \n  - List. Remove(element);  \n  - List. RemoveAt(int index);   删除下标为index的元素\n  - List. RemoveRange(int index, int count); 从下标index开始，删除count个元素\n\n- **判断某个元素是否在该List中：**List. Contains(element)  返回值为：true/false\n\n```csharp\nif (mList.Contains(\"Hunter\"))\n{\n    Console.WriteLine(\"There is Hunter in the list\");\n}\nelse\n{\n    mList.Add(\"Hunter\");\n    Console.WriteLine(\"Add Hunter successfully.\");\n}\n```\n\n- **给List里面元素排序：**List. Sort ()  默认是元素第一个字母按升序\n- **自定义排序**:默认比较规则在CompareTo方法中定义，该方法属于IComparable<T>泛型接口。请看下面代码：\n\n```csharp\nclass Person ：IComparable<Person>\n{\n    //按年龄比较\n    public int CompareTo(Person p)\n    {\n        return this.Age - p.Age;\n    }\n}\n//定义好默认比较规则后，就可以通过不带参数的Sort方法对集合进行排序\n```\n\n**实际使用中，经常需要对集合按照多种不同规则进行排序，这就需要定义其他比较规则，可以在Compare方法中定义，该方法属于IComparer<T>泛型接口**\n\n```csharp\nclass NameComparer : IComparer<Person>\n{\n    //存放排序器实例\n    public static NameComparer Default = new NameComparer();\n    //按姓名比较\n    public int Compare(Person p1, Person p2)\n    {\n        return System.Collections.Comparer.Default.Compare(p1.Name, p2.Name);\n    }\n}\n\n\n//按照姓名对集合进行排序 \npersons.Sort(NameComparer.Default); \n```\n\n- **给List里面元素顺序反转：**List. Reverse ()\n- **List清空：**List. Clear () \n- **获得List中元素数目：**List. Count ()  返回int值\n\n## List的方法和属性\n\n　　Capacity 用于获取或设置List可容纳元素的数量。当数量超过容量时，这个值会自动增长。您可以设置这个值以减少容量，也可以调用trin()方法来减少容量以适合实际的元素数目。\n\n　　Count 属性，用于获取数组中当前元素数量\n\n　　Item( ) 通过指定索引获取或设置元素。对于List类来说，它是一个索引器。\n\n　　Add( ) 在List中添加一个对象的公有方法\n\n　　AddRange( ) 公有方法，在List尾部添加实现了ICollection接口的多个元素\n\n　　BinarySearch( ) 重载的公有方法，用于在排序的List内使用二分查找来定位指定元素.\n\n　　Clear( ) 在List内移除所有元素\n\n　　Contains( ) 测试一个元素是否在List内\n\n　　CopyTo( ) 重载的公有方法，把一个List拷贝到一维数组内\n\n　　Exists( ) 测试一个元素是否在List内\n\n　　Find( ) 查找并返回List内的出现的第一个匹配元素\n\n　　FindAll( ) 查找并返回List内的所有匹配元素\n\n　　GetEnumerator( ) 重载的公有方法，返回一个用于迭代List的枚举器\n\n　　Getrange( ) 拷贝指定范围的元素到新的List内\n\n　　IndexOf( ) 重载的公有方法，查找并返回每一个匹配元素的索引\n\n　　Insert( ) 在List内插入一个元素\n\n　　InsertRange( ) 在List内插入一组元素\n\n　　LastIndexOf( ) 重载的公有方法，，查找并返回最后一个匹配元素的索引\n\n　　Remove( ) 移除与指定元素匹配的第一个元素\n\n　　RemoveAt( ) 移除指定索引的元素\n\n　　RemoveRange( ) 移除指定范围的元素\n\n　　Reverse( ) 反转List内元素的顺序\n\n　　Sort( ) 对List内的元素进行排序\n\n　　ToArray( ) 把List内的元素拷贝到一个新的数组内\n\n　　trimToSize( ) 将容量设置为List中元素的实际数目\n\n\n\n# C# Dictionary(字典）\n\n## Dictionary的描述\n\n1、从一组键（Key）到一组值（Value）的映射，每一个添加项都是由一个值及其相关连的键组成\n\n2、任何键都必须是唯一的\n\n3、键不能为空引用null（VB中的Nothing），若值为引用类型，则可以为空值\n\n4、Key和Value可以是任何类型（string，int，custom class 等）\n\n## Dictionary的语法\n\n```csharp\n//1、创建及初始化\nDictionary<int,string> myDic = new Dictionary<int,string>();//第一个参数是索引的类型，第二个参数是内容的类型\n\n//2、添加元素\nmyDic.Add(1,\"C#\");\nmyDic.Add(2,\"C++\");\nmyDic.Add(3,\"Java\");\nmyDic.Add(4,\"JavaScript\");\n\n//3、通过Key(键)查找元素\nif(myDictionary.ContainsKey(1)){\n    Console.WriteLine(\"Key:{0},Value:{1}\",\"1\", myDic[1]);\n }\n\n//4、通过KeyValuePair遍历元素\nforeach(KeyValuePair<int,string>kvp in myDic)\n{\n        Console.WriteLine(\"Key = {0}, Value = {1}\",kvp.Key, kvp.Value);\n}\n\n//5、仅遍历键 Keys 属性\nDictionary<int,string>.KeyCollection keyCol=myDic.Keys;\nforeach(intkeyinkeyCol)\n{\n        Console.WriteLine(\"Key = {0}\", key);\n}\n\n//6、仅遍历值 Valus属性\nDictionary<int,string>.ValueCollection valueCol=myDic.Values;\nforeach(stringvalueinvalueCol)\n{\n        Console.WriteLine(\"Value = {0}\", value);\n}\n\n//7、通过Remove方法移除指定的键值\nmyDic.Remove(1);\nif(myDic.ContainsKey(1))\n...{\n　　Console.WriteLine(\"Key:{0},Value:{1}\",\"1\", myDic[1]);\n}\nelse{\n    Console.WriteLine(\"不存在 Key : 1\"); \n }\n```\n\n补充：在类后面有有尖括号的是**泛型类**，需跟其他类组成一个完整的类\n\n# C# 索引器\n\n**索引器（Indexer）** 允许一个对象可以像数组一样使用下标的方式来访问。\n\n当您为类定义一个索引器时，该类的行为就会像一个 **虚拟数组（virtual array）** 一样。您可以使用数组访问运算符 **[ ]** 来访问该类的的成员。\n\n**一维索引器的语法如下：**\n\n```csharp\nelement-type this[int index]\n{\n   // get 访问器\n   get\n   {\n      // 返回 index 指定的值\n   }\n\n   // set 访问器\n   set\n   {\n      // 设置 index 指定的值\n   }\n}\n```\n\n**实例演示：**\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Csharp_indexer\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Student stu1 = new Student();\n            stu1[\"Math\"] = 100;\n            var mathScore = stu1[ \"Math\"];\n            Console.WriteLine(mathScore);\n            Console.ReadKey();\n        }\n    }\n    class Student\n    {\n        private Dictionary<string, int> scoreDictionary = new Dictionary<string, int>();\n        public int? this[string name]\n        {\n            get \n            {\n                if (this.scoreDictionary.ContainsKey(name))\n                {\n                    return this.scoreDictionary[name];\n                }  \n                else\n                {\n                    return null;\n                }\n            }\n            set \n            {\n                if (value.HasValue==false)\n                {\n                    throw new Exception(\"Value connot null!\");\n                }\n                if (this.scoreDictionary.ContainsKey(name))\n                {\n                    this.scoreDictionary[name] = value.Value;\n                }\n                else\n                {\n                    this.scoreDictionary.Add(name, value.Value);\n                }\n            }\n        }\n    }\n\n}\n\n```\n\n###  索引器与数组的区别：\n\n- **索引器的索引值（Index）类型不限定为整数：**\n\n​    用来访问数组的索引值（Index）一定为整数，而索引器的索引值类型可以定义为其他类型。\n\n- **索引器允许重载**\n\n​    一个类不限定为只能定义一个索引器，只要索引器的函数签名不同，就可以定义多个索引器，可以重载它的功能。\n\n- **索引器不是一个变量**\n\n​    索引器没有直接定义数据存储的地方，而数组有。索引器具有Get和Set访问器。\n\n### 索引器与属性的区别：\n\n- **索引器以函数签名方式 this 来标识，而属性采用名称来标识，名称可以任意**\n- **索引器可以重载，而属性不能重载。**\n- **索引器不能用static 来进行声明，而属性可以。索引器永远属于实例成员，因此不能声明为static。**\n\n# C#类型输出\n\n### C#百分数形式输出\n\n==**百分比的格式控制符为\"P\"或\"p\"将普通数值输出为百分比形式。**==\n\n```csharp\nvar a = Console.ReadLine();\nvar b = Console.ReadLine();\ndouble percent = double.Parse(b) / double.Parse(a);\nstring q = $\"{percent:p3}\";\n//string q2 = percent.ToString(\"P0\"); \n//P后边跟数字，代表精度。\nConsole.WriteLine(q);\n```\n\n### C#保留小数点后指定位数\n\n```csharp\ndouble d=1.2356;\n\nstring str=d.ToString(\"0.00\");  //小数点后有几个0即保留几位小数。\nstring str=d.ToString(\"#0.00\");  \nstring str=d.ToString(\"f2\");  //fn 保留n位，四舍五入，\"F\",\"f\" 不区分大小写\nstring str=String.Format(\"{0:F}\", d);  \nstring str=String.Format(\"{0:N2}\", d);\ndouble do=Math.Round(d, 2);  \ndecimal de = decimal.Round(decimal.Parse(d.ToString()), 2);\n```\n\n# C# 继承\n\n注：这个已有的类被称为的**基类**，这个新的类被称为**派生类**\n\n**派生类继承了基类的成员变量和成员方法**\n\n```csharp\nusing System;\nnamespace InheritanceApplication\n{\n   class Shape//基类\n   {\n      public void setWidth(int w)\n      {\n         width = w;\n      }\n      public void setHeight(int h)\n      {\n         height = h;\n      }\n       //protected可以从派生类直接访问基类的受保护成员\n      protected int width;\n      protected int height;\n   }\n\n   // 派生类\n   class Rectangle: Shape\n   {\n      public int getArea()\n      {\n         return (width * height);\n      }\n   }\n   \n   class RectangleTester\n   {\n      static void Main(string[] args)\n      {\n         Rectangle Rect = new Rectangle();\n         Rect.setWidth(5);\n         Rect.setHeight(7);\n         // 打印对象的面积\n         Console.WriteLine(\"总面积： {0}\",  Rect.getArea());\n         Console.ReadKey();\n      }\n   }\n}\n```\n\n### base 关键字\n\n`base` 关键字用于从派生类中访问基类的成员。 如果要执行以下操作时使用它：\n\n- 调用基类上已被其他方法重写的方法。\n- 指定创建派生类实例时应调用的基类构造函数。\n\n仅允许基类访问在构造函数、实例方法和实例属性访问器中进行。\n\n在静态方法中使用 `base` 关键字将产生错误。\n\n所访问的基类是类声明中指定的基类。 例如，如果指定 `class ClassB : ClassA`，则从 ClassB 访问 ClassA 的成员，而不考虑 ClassA 的基类。\n\n# C# 多态性\n\n==多态：只有多个类同时继承了同一个类。==\n\n在 C#语言中体现多态有三种方式：虚方法，抽象类， 接口。\n\n### 抽象方法和虚方法\n\n基类将方法声明为 [`virtual`](https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual) 时，派生类可以使用其自己的实现[`override`](https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/override)该方法。 \n\n如果基类将成员声明为 [`abstract`](https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/abstract)，则必须在直接继承自该类的任何非抽象类中重写该方法。 如果派生类本身是抽象的，则它会继承抽象成员而不会实现它们。 抽象和虚拟成员是多形性（面向对象的编程的第二个主要特征）的基础。\n\n### 抽象类\n\nC# 允许您使用关键字 **abstract** 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。**抽象类**包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。\n\n请注意，下面是有关抽象类的一些规则：\n\n- 您不能创建一个抽象类的实例。\n- 您不能在一个抽象类外部声明一个抽象方法。\n- 通过在类定义前面放置关键字 **sealed**，可以将类声明为**密封类**。当一个类被声明为 **sealed** 时，它不能被继承。抽象类不能被声明为 sealed。\n\n# C#事件\n\n1. 角色：**使对象或类具备通知能力的成员**\n2. 使用：**用于对象或类间的动作协调与信息传递（消息推送）**\n\n### 事件模型的五个组成部分\n\n1. 事件的拥有者（event source，对象）\n1. 事件成员（event，成员）\n1. 事件的响应者（event subscribe，对象）\n1. 事件处理器（event handler，成员）--本质是一个回调方法\n1. 事件订阅---把事件处理器与事件关联在一起\n\n```c#\nusing System;\nusing System.Timers;\n\nnamespace Cs_teat\n{\n    public delegate double Calc(double x, double y);\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var timer = new Timer();\n            timer.Interval = 1000;\n            var boy = new Boy();\n            timer.Elapsed += boy.Action;\n            timer.Start();\n            Console.ReadKey();\n        }\n    }\n    class Boy\n    {\n        internal void Action(object sender, ElapsedEventArgs e)\n        {\n            Console.WriteLine(\"Jump!!!\");\n        }\n    }\n}\n\n\nusing System;\nusing System.Windows.Forms;\n\nnamespace Cs_teat\n{\n    public delegate double Calc(double x, double y);\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MyForm form = new MyForm();\n            form.Click+=form.Action;\n            form.ShowDialog();\n        }\n    }\n    class MyForm : Form\n    {\n        internal void Action(object sender, EventArgs e)\n        {\n            this.Text = DateTime.Now.ToString();\n        }\n    }\n}\n\n```\n\n### 自定义事件的声明\n\n- 事件声明：\n  - 完整声明\n  - 简略声明（字段式声明，field-like）\n- 有了委托字段/属性，为什么还需要事件：为了使程序逻辑更加完善\n- <span style=\"color:red\">事件的本质</span>是委托字段的一个包装器\n  - 这个包装器对委托字段的访问起<span style=\"color:red\">限制作用</span>，相当于一个“蒙板”\n  - 封装的一个重要功能就是隐藏\n  - 事件对外界隐藏了委托实例的大部分功能，<span style=\"color:red\">仅暴露添加/移除事件处理器的功能</span>\n- 用于声明事件的委托类型的命名约定\n  - 一般命名为 XXXEventHandler （除非是一个非常通用的事件约束）\n  - XXXXEventHandler委托的参数一般有两个（由Win32 API演化而来）\n  - 触发XXX事件的方法一般命名为OnXXX，即“因何发生”\n    - 访问级别为protected，不能为public\n- 事件的命名约定\n  - 带有时态的动词或者动词短语\n\n```csharp\nusing System;\n\npublic delegate void MyEventHandler(object sender, EventArgs e);\n\nclass MyClass\n{\n    public event MyEventHandler MyEvent;\n\n    public void DoSomething()\n    {\n        Console.WriteLine(\"Do something...\");\n        MyEvent?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        MyClass obj = new MyClass();\n        obj.MyEvent += MyEventHandlerMethod;\n\n        obj.DoSomething();\n\n        Console.ReadLine();\n    }\n\n    static void MyEventHandlerMethod(object sender, EventArgs e)\n    {\n        Console.WriteLine(\"Event handled.\");\n    }\n}\n\n```\n\n​\t在这个例子中，创建了一个自定义事件 `MyEvent`，并在 `DoSomething` 方法中触发事件。在 `Main` 方法中，创建了一个 `MyClass` 实例并注册事件处理程序。在调用 `DoSomething` 方法时，事件处理程序将被调用。\n\n# C#委托\n\n功能：一个函数或一组函数的封装器\n\n声明委托：使用`delegate`关键字，与类平级\n\n```csharp\npublic delegate int MyDelegate (string s);\n```\n\n### 委托的多播(Multicasting of a Delegate)\n\n委托对象可使用<span style=\"color:red\"> \"+\" 运算符进行合并，\"-\" 运算符可用于从合并的委托中移除组件委托</span>，只有相同类型的委托可被合并。\n\n```csharp\nusing System;\n\nnamespace Cs_teat\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double a = 2342.31;\n            double b = 223.1;\n            var calcutating = new Calculate();\n            Cal operation = new Cal(calcutating.Add);\n            double c = operation(a, b);\n            Console.WriteLine(c);\n            operation += calcutating.Sub;\n            double d = operation(c, b);\n            Console.WriteLine(d);\n        }\n    }\n    delegate double Cal(double x, double y);\n    class Calculate\n    {\n        public double Add(double x,double y)\n        {\n            double result;\n            return result = x + y;\n        }\n        public double Sub(double x,double y)\n        {\n            double result;\n            return result = x - y;\n        }\n\n    }\n}\n\n```\n\n==Action委托：==用于参数列表为空，返回值为空\n\n==Action<>委托：==用于参数列表不为空，返回值为空，例如：`Action<string> action=new Action<string>(SayHello);`\n\n==Func<>委托：==用于参数列表不为空，返回值不为空，例如：`Func<int,int，double> func=new Func<int,int，double>`返回值为double类型，参数都为int类型\n\n# C#抽象类与开闭原则\n\n​\t1. 抽象类是一种特殊的类，<span style=\"color:red\">它不能被实例化，只能被用作其他类的基类</span>，提供一个或多个抽象方法或抽象属性。\n\n​\t2. 抽象类通过 `abstract` 关键字来定义，不能直接实例化。\n\n​\t3. 派生类必须实现抽象类中的所有抽象成员，否则编译器会报错。\n\n- 具体类-->抽象类-->接口：越来越抽象，内部实现的东西越来越少\n- 抽象类是<span style=\"color:red\">未完全实现逻辑的类</span>（可以有字段和非public成员，他们代表了”具体逻辑“）\n- 抽象类为复用而生：专门作为基类来使用，也具有解耦功能\n\n**==开闭原则：==**封装确定的，开放不确定的，推迟到合适的子类中去实现\n","source":"_posts/Csharp笔记.md","raw":"---\ntitle: Csharp笔记\ndate: 2023-01-27 18:59:22\ntags:\n---\n\n# C# 静态成员和实例成员\n\n- 　静态成员（[static](https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020) member）：又叫类成员，指的是在成员类型或返回值类型前用static关键字修饰的变量或方法，包括静态数据和静态方法；\n- 　实例成员（instance member）：又称非静态成员、对象成员，是没有用static修饰的变量或方法，包括实例数据和实例方法。\n\n### 静态成员的特点：\n\n- 静态成员（包括静态数据和静态方法）必须由类名调用，不能使用对象调用（静态数据可以由实例方法调用）。\n- 静态数据属于类的级别，当类加载时，一个静态数据在内存只分配一个存储空间，无论new出多少个实例，它也只是有那一个空间。\n- 静态方法只能调用静态数据，不能调用对象。\n\n### 实例成员的特点：\n\n- 实例成员（包括实例数据和实例方法）必须通过对象来调用，不能使用类名调用。\n- 类的实例数据属于类的实例级别，每新创建一个对象，都会在内存中为实例成员开辟一块新的存储空间。\n- 实例方法可以调用实例数据和静态数据。\n\n# 类型转换\n\n### 隐式类型转换\n\n- 不丢失精度的转换\n- 子类向父类的转换\n- 装箱\n\n### 显式类型转换\n\n- 有可能丢失精度的转换，即cast（（T）x）T：目标类型\n- 拆箱\n- 使用convert类\n- ToString方法与各数据类型的Parse/TryParse方法\n\n\n\n# C#封装\n\n**封装** 被定义为\"把一个或多个项目封闭在一个物理的或者逻辑的包中\"\n\n **C#支持的访问修饰符：**\n\n- public：所有对象都可以访问；\n- private：对象本身在对象内部可以访问；\n- protected：只有该类对象及其子类对象可以访问，这样有助于实现继承\n- internal：同一个程序集的对象可以访问；\n- protected internal：访问限于当前程序集或派生自包含类的类型。\n\n## 属性封装\n\n- 属性（Property)是类（class）、结构（structure）和接口（interface）的命名（named）成员\n\n```csharp\n private int age;//private:私有的,仅供内部进行访问\n public int Age//public:公有的,任何地方都可以访问\n        {\n            //获取或读取字段值\n            get { return age; }//属性的读取\n            set { age = value; }//属性赋值(value为关键字)\n        }\n\n```\n\n```csharp\nfirst.Age = 21;\nConsole.WriteLine(\"年龄为:{0}\",first.Age);\n```\n\n\n\n**字段和属性有什么区别？**\n\n- 字段：占用内存\n- 属性：不占内存\n- 属性必须依赖一个字段\n\n## 方法封装\n\n- 第一种无参数的方法（没有返回值的方法）\n- 第二种有参数的方法（有返回值的方法）\n\n# C# List<T>用法\n\n## List<T>的用法\n\n- **声明**：\n\n```csharp\nList<T> mList = new List<T>(); //T为列表中元素类型\n\n//以一个集合作为参数创建List：\nstring[] temArr = { \"Ha\", \"Hunter\", \"Tom\", \"Lily\", \"Jay\", \"Jim\", \"Kuku\", \"Locu\" };\nList<string> testList = new List<string>(temArr);\n```\n\n- **添加元素**：List.Add(element)      List.Insert(index,element)\n\n```csharp\nList<string> mList = new List<string>();\nmList.Add(\"John\");\n\n//在index位置添加一个元素\nList<string> mList = new List<string>();\nmList.Insert(1, \"Hei\")\n```\n\n- **遍历List元素**：\n\n```csharp\nforeach (T element in mList)  //T的类型与mList声明时一样\n{\n    Console.WriteLine(element);\n}\n```\n\n- **删除元素**:   \n  - List. Remove(element);  \n  - List. RemoveAt(int index);   删除下标为index的元素\n  - List. RemoveRange(int index, int count); 从下标index开始，删除count个元素\n\n- **判断某个元素是否在该List中：**List. Contains(element)  返回值为：true/false\n\n```csharp\nif (mList.Contains(\"Hunter\"))\n{\n    Console.WriteLine(\"There is Hunter in the list\");\n}\nelse\n{\n    mList.Add(\"Hunter\");\n    Console.WriteLine(\"Add Hunter successfully.\");\n}\n```\n\n- **给List里面元素排序：**List. Sort ()  默认是元素第一个字母按升序\n- **自定义排序**:默认比较规则在CompareTo方法中定义，该方法属于IComparable<T>泛型接口。请看下面代码：\n\n```csharp\nclass Person ：IComparable<Person>\n{\n    //按年龄比较\n    public int CompareTo(Person p)\n    {\n        return this.Age - p.Age;\n    }\n}\n//定义好默认比较规则后，就可以通过不带参数的Sort方法对集合进行排序\n```\n\n**实际使用中，经常需要对集合按照多种不同规则进行排序，这就需要定义其他比较规则，可以在Compare方法中定义，该方法属于IComparer<T>泛型接口**\n\n```csharp\nclass NameComparer : IComparer<Person>\n{\n    //存放排序器实例\n    public static NameComparer Default = new NameComparer();\n    //按姓名比较\n    public int Compare(Person p1, Person p2)\n    {\n        return System.Collections.Comparer.Default.Compare(p1.Name, p2.Name);\n    }\n}\n\n\n//按照姓名对集合进行排序 \npersons.Sort(NameComparer.Default); \n```\n\n- **给List里面元素顺序反转：**List. Reverse ()\n- **List清空：**List. Clear () \n- **获得List中元素数目：**List. Count ()  返回int值\n\n## List的方法和属性\n\n　　Capacity 用于获取或设置List可容纳元素的数量。当数量超过容量时，这个值会自动增长。您可以设置这个值以减少容量，也可以调用trin()方法来减少容量以适合实际的元素数目。\n\n　　Count 属性，用于获取数组中当前元素数量\n\n　　Item( ) 通过指定索引获取或设置元素。对于List类来说，它是一个索引器。\n\n　　Add( ) 在List中添加一个对象的公有方法\n\n　　AddRange( ) 公有方法，在List尾部添加实现了ICollection接口的多个元素\n\n　　BinarySearch( ) 重载的公有方法，用于在排序的List内使用二分查找来定位指定元素.\n\n　　Clear( ) 在List内移除所有元素\n\n　　Contains( ) 测试一个元素是否在List内\n\n　　CopyTo( ) 重载的公有方法，把一个List拷贝到一维数组内\n\n　　Exists( ) 测试一个元素是否在List内\n\n　　Find( ) 查找并返回List内的出现的第一个匹配元素\n\n　　FindAll( ) 查找并返回List内的所有匹配元素\n\n　　GetEnumerator( ) 重载的公有方法，返回一个用于迭代List的枚举器\n\n　　Getrange( ) 拷贝指定范围的元素到新的List内\n\n　　IndexOf( ) 重载的公有方法，查找并返回每一个匹配元素的索引\n\n　　Insert( ) 在List内插入一个元素\n\n　　InsertRange( ) 在List内插入一组元素\n\n　　LastIndexOf( ) 重载的公有方法，，查找并返回最后一个匹配元素的索引\n\n　　Remove( ) 移除与指定元素匹配的第一个元素\n\n　　RemoveAt( ) 移除指定索引的元素\n\n　　RemoveRange( ) 移除指定范围的元素\n\n　　Reverse( ) 反转List内元素的顺序\n\n　　Sort( ) 对List内的元素进行排序\n\n　　ToArray( ) 把List内的元素拷贝到一个新的数组内\n\n　　trimToSize( ) 将容量设置为List中元素的实际数目\n\n\n\n# C# Dictionary(字典）\n\n## Dictionary的描述\n\n1、从一组键（Key）到一组值（Value）的映射，每一个添加项都是由一个值及其相关连的键组成\n\n2、任何键都必须是唯一的\n\n3、键不能为空引用null（VB中的Nothing），若值为引用类型，则可以为空值\n\n4、Key和Value可以是任何类型（string，int，custom class 等）\n\n## Dictionary的语法\n\n```csharp\n//1、创建及初始化\nDictionary<int,string> myDic = new Dictionary<int,string>();//第一个参数是索引的类型，第二个参数是内容的类型\n\n//2、添加元素\nmyDic.Add(1,\"C#\");\nmyDic.Add(2,\"C++\");\nmyDic.Add(3,\"Java\");\nmyDic.Add(4,\"JavaScript\");\n\n//3、通过Key(键)查找元素\nif(myDictionary.ContainsKey(1)){\n    Console.WriteLine(\"Key:{0},Value:{1}\",\"1\", myDic[1]);\n }\n\n//4、通过KeyValuePair遍历元素\nforeach(KeyValuePair<int,string>kvp in myDic)\n{\n        Console.WriteLine(\"Key = {0}, Value = {1}\",kvp.Key, kvp.Value);\n}\n\n//5、仅遍历键 Keys 属性\nDictionary<int,string>.KeyCollection keyCol=myDic.Keys;\nforeach(intkeyinkeyCol)\n{\n        Console.WriteLine(\"Key = {0}\", key);\n}\n\n//6、仅遍历值 Valus属性\nDictionary<int,string>.ValueCollection valueCol=myDic.Values;\nforeach(stringvalueinvalueCol)\n{\n        Console.WriteLine(\"Value = {0}\", value);\n}\n\n//7、通过Remove方法移除指定的键值\nmyDic.Remove(1);\nif(myDic.ContainsKey(1))\n...{\n　　Console.WriteLine(\"Key:{0},Value:{1}\",\"1\", myDic[1]);\n}\nelse{\n    Console.WriteLine(\"不存在 Key : 1\"); \n }\n```\n\n补充：在类后面有有尖括号的是**泛型类**，需跟其他类组成一个完整的类\n\n# C# 索引器\n\n**索引器（Indexer）** 允许一个对象可以像数组一样使用下标的方式来访问。\n\n当您为类定义一个索引器时，该类的行为就会像一个 **虚拟数组（virtual array）** 一样。您可以使用数组访问运算符 **[ ]** 来访问该类的的成员。\n\n**一维索引器的语法如下：**\n\n```csharp\nelement-type this[int index]\n{\n   // get 访问器\n   get\n   {\n      // 返回 index 指定的值\n   }\n\n   // set 访问器\n   set\n   {\n      // 设置 index 指定的值\n   }\n}\n```\n\n**实例演示：**\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Csharp_indexer\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Student stu1 = new Student();\n            stu1[\"Math\"] = 100;\n            var mathScore = stu1[ \"Math\"];\n            Console.WriteLine(mathScore);\n            Console.ReadKey();\n        }\n    }\n    class Student\n    {\n        private Dictionary<string, int> scoreDictionary = new Dictionary<string, int>();\n        public int? this[string name]\n        {\n            get \n            {\n                if (this.scoreDictionary.ContainsKey(name))\n                {\n                    return this.scoreDictionary[name];\n                }  \n                else\n                {\n                    return null;\n                }\n            }\n            set \n            {\n                if (value.HasValue==false)\n                {\n                    throw new Exception(\"Value connot null!\");\n                }\n                if (this.scoreDictionary.ContainsKey(name))\n                {\n                    this.scoreDictionary[name] = value.Value;\n                }\n                else\n                {\n                    this.scoreDictionary.Add(name, value.Value);\n                }\n            }\n        }\n    }\n\n}\n\n```\n\n###  索引器与数组的区别：\n\n- **索引器的索引值（Index）类型不限定为整数：**\n\n​    用来访问数组的索引值（Index）一定为整数，而索引器的索引值类型可以定义为其他类型。\n\n- **索引器允许重载**\n\n​    一个类不限定为只能定义一个索引器，只要索引器的函数签名不同，就可以定义多个索引器，可以重载它的功能。\n\n- **索引器不是一个变量**\n\n​    索引器没有直接定义数据存储的地方，而数组有。索引器具有Get和Set访问器。\n\n### 索引器与属性的区别：\n\n- **索引器以函数签名方式 this 来标识，而属性采用名称来标识，名称可以任意**\n- **索引器可以重载，而属性不能重载。**\n- **索引器不能用static 来进行声明，而属性可以。索引器永远属于实例成员，因此不能声明为static。**\n\n# C#类型输出\n\n### C#百分数形式输出\n\n==**百分比的格式控制符为\"P\"或\"p\"将普通数值输出为百分比形式。**==\n\n```csharp\nvar a = Console.ReadLine();\nvar b = Console.ReadLine();\ndouble percent = double.Parse(b) / double.Parse(a);\nstring q = $\"{percent:p3}\";\n//string q2 = percent.ToString(\"P0\"); \n//P后边跟数字，代表精度。\nConsole.WriteLine(q);\n```\n\n### C#保留小数点后指定位数\n\n```csharp\ndouble d=1.2356;\n\nstring str=d.ToString(\"0.00\");  //小数点后有几个0即保留几位小数。\nstring str=d.ToString(\"#0.00\");  \nstring str=d.ToString(\"f2\");  //fn 保留n位，四舍五入，\"F\",\"f\" 不区分大小写\nstring str=String.Format(\"{0:F}\", d);  \nstring str=String.Format(\"{0:N2}\", d);\ndouble do=Math.Round(d, 2);  \ndecimal de = decimal.Round(decimal.Parse(d.ToString()), 2);\n```\n\n# C# 继承\n\n注：这个已有的类被称为的**基类**，这个新的类被称为**派生类**\n\n**派生类继承了基类的成员变量和成员方法**\n\n```csharp\nusing System;\nnamespace InheritanceApplication\n{\n   class Shape//基类\n   {\n      public void setWidth(int w)\n      {\n         width = w;\n      }\n      public void setHeight(int h)\n      {\n         height = h;\n      }\n       //protected可以从派生类直接访问基类的受保护成员\n      protected int width;\n      protected int height;\n   }\n\n   // 派生类\n   class Rectangle: Shape\n   {\n      public int getArea()\n      {\n         return (width * height);\n      }\n   }\n   \n   class RectangleTester\n   {\n      static void Main(string[] args)\n      {\n         Rectangle Rect = new Rectangle();\n         Rect.setWidth(5);\n         Rect.setHeight(7);\n         // 打印对象的面积\n         Console.WriteLine(\"总面积： {0}\",  Rect.getArea());\n         Console.ReadKey();\n      }\n   }\n}\n```\n\n### base 关键字\n\n`base` 关键字用于从派生类中访问基类的成员。 如果要执行以下操作时使用它：\n\n- 调用基类上已被其他方法重写的方法。\n- 指定创建派生类实例时应调用的基类构造函数。\n\n仅允许基类访问在构造函数、实例方法和实例属性访问器中进行。\n\n在静态方法中使用 `base` 关键字将产生错误。\n\n所访问的基类是类声明中指定的基类。 例如，如果指定 `class ClassB : ClassA`，则从 ClassB 访问 ClassA 的成员，而不考虑 ClassA 的基类。\n\n# C# 多态性\n\n==多态：只有多个类同时继承了同一个类。==\n\n在 C#语言中体现多态有三种方式：虚方法，抽象类， 接口。\n\n### 抽象方法和虚方法\n\n基类将方法声明为 [`virtual`](https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual) 时，派生类可以使用其自己的实现[`override`](https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/override)该方法。 \n\n如果基类将成员声明为 [`abstract`](https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/abstract)，则必须在直接继承自该类的任何非抽象类中重写该方法。 如果派生类本身是抽象的，则它会继承抽象成员而不会实现它们。 抽象和虚拟成员是多形性（面向对象的编程的第二个主要特征）的基础。\n\n### 抽象类\n\nC# 允许您使用关键字 **abstract** 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。**抽象类**包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。\n\n请注意，下面是有关抽象类的一些规则：\n\n- 您不能创建一个抽象类的实例。\n- 您不能在一个抽象类外部声明一个抽象方法。\n- 通过在类定义前面放置关键字 **sealed**，可以将类声明为**密封类**。当一个类被声明为 **sealed** 时，它不能被继承。抽象类不能被声明为 sealed。\n\n# C#事件\n\n1. 角色：**使对象或类具备通知能力的成员**\n2. 使用：**用于对象或类间的动作协调与信息传递（消息推送）**\n\n### 事件模型的五个组成部分\n\n1. 事件的拥有者（event source，对象）\n1. 事件成员（event，成员）\n1. 事件的响应者（event subscribe，对象）\n1. 事件处理器（event handler，成员）--本质是一个回调方法\n1. 事件订阅---把事件处理器与事件关联在一起\n\n```c#\nusing System;\nusing System.Timers;\n\nnamespace Cs_teat\n{\n    public delegate double Calc(double x, double y);\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var timer = new Timer();\n            timer.Interval = 1000;\n            var boy = new Boy();\n            timer.Elapsed += boy.Action;\n            timer.Start();\n            Console.ReadKey();\n        }\n    }\n    class Boy\n    {\n        internal void Action(object sender, ElapsedEventArgs e)\n        {\n            Console.WriteLine(\"Jump!!!\");\n        }\n    }\n}\n\n\nusing System;\nusing System.Windows.Forms;\n\nnamespace Cs_teat\n{\n    public delegate double Calc(double x, double y);\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MyForm form = new MyForm();\n            form.Click+=form.Action;\n            form.ShowDialog();\n        }\n    }\n    class MyForm : Form\n    {\n        internal void Action(object sender, EventArgs e)\n        {\n            this.Text = DateTime.Now.ToString();\n        }\n    }\n}\n\n```\n\n### 自定义事件的声明\n\n- 事件声明：\n  - 完整声明\n  - 简略声明（字段式声明，field-like）\n- 有了委托字段/属性，为什么还需要事件：为了使程序逻辑更加完善\n- <span style=\"color:red\">事件的本质</span>是委托字段的一个包装器\n  - 这个包装器对委托字段的访问起<span style=\"color:red\">限制作用</span>，相当于一个“蒙板”\n  - 封装的一个重要功能就是隐藏\n  - 事件对外界隐藏了委托实例的大部分功能，<span style=\"color:red\">仅暴露添加/移除事件处理器的功能</span>\n- 用于声明事件的委托类型的命名约定\n  - 一般命名为 XXXEventHandler （除非是一个非常通用的事件约束）\n  - XXXXEventHandler委托的参数一般有两个（由Win32 API演化而来）\n  - 触发XXX事件的方法一般命名为OnXXX，即“因何发生”\n    - 访问级别为protected，不能为public\n- 事件的命名约定\n  - 带有时态的动词或者动词短语\n\n```csharp\nusing System;\n\npublic delegate void MyEventHandler(object sender, EventArgs e);\n\nclass MyClass\n{\n    public event MyEventHandler MyEvent;\n\n    public void DoSomething()\n    {\n        Console.WriteLine(\"Do something...\");\n        MyEvent?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        MyClass obj = new MyClass();\n        obj.MyEvent += MyEventHandlerMethod;\n\n        obj.DoSomething();\n\n        Console.ReadLine();\n    }\n\n    static void MyEventHandlerMethod(object sender, EventArgs e)\n    {\n        Console.WriteLine(\"Event handled.\");\n    }\n}\n\n```\n\n​\t在这个例子中，创建了一个自定义事件 `MyEvent`，并在 `DoSomething` 方法中触发事件。在 `Main` 方法中，创建了一个 `MyClass` 实例并注册事件处理程序。在调用 `DoSomething` 方法时，事件处理程序将被调用。\n\n# C#委托\n\n功能：一个函数或一组函数的封装器\n\n声明委托：使用`delegate`关键字，与类平级\n\n```csharp\npublic delegate int MyDelegate (string s);\n```\n\n### 委托的多播(Multicasting of a Delegate)\n\n委托对象可使用<span style=\"color:red\"> \"+\" 运算符进行合并，\"-\" 运算符可用于从合并的委托中移除组件委托</span>，只有相同类型的委托可被合并。\n\n```csharp\nusing System;\n\nnamespace Cs_teat\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double a = 2342.31;\n            double b = 223.1;\n            var calcutating = new Calculate();\n            Cal operation = new Cal(calcutating.Add);\n            double c = operation(a, b);\n            Console.WriteLine(c);\n            operation += calcutating.Sub;\n            double d = operation(c, b);\n            Console.WriteLine(d);\n        }\n    }\n    delegate double Cal(double x, double y);\n    class Calculate\n    {\n        public double Add(double x,double y)\n        {\n            double result;\n            return result = x + y;\n        }\n        public double Sub(double x,double y)\n        {\n            double result;\n            return result = x - y;\n        }\n\n    }\n}\n\n```\n\n==Action委托：==用于参数列表为空，返回值为空\n\n==Action<>委托：==用于参数列表不为空，返回值为空，例如：`Action<string> action=new Action<string>(SayHello);`\n\n==Func<>委托：==用于参数列表不为空，返回值不为空，例如：`Func<int,int，double> func=new Func<int,int，double>`返回值为double类型，参数都为int类型\n\n# C#抽象类与开闭原则\n\n​\t1. 抽象类是一种特殊的类，<span style=\"color:red\">它不能被实例化，只能被用作其他类的基类</span>，提供一个或多个抽象方法或抽象属性。\n\n​\t2. 抽象类通过 `abstract` 关键字来定义，不能直接实例化。\n\n​\t3. 派生类必须实现抽象类中的所有抽象成员，否则编译器会报错。\n\n- 具体类-->抽象类-->接口：越来越抽象，内部实现的东西越来越少\n- 抽象类是<span style=\"color:red\">未完全实现逻辑的类</span>（可以有字段和非public成员，他们代表了”具体逻辑“）\n- 抽象类为复用而生：专门作为基类来使用，也具有解耦功能\n\n**==开闭原则：==**封装确定的，开放不确定的，推迟到合适的子类中去实现\n","slug":"Csharp笔记","published":1,"updated":"2023-04-09T10:04:29.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9aw94m0009e8uffof7asbd","content":"<h1>C# 静态成员和实例成员</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">静态成员（<a href=\"https://so.csdn.net/so/search?q=static&amp;spm=1001.2101.3001.7020\">static</a> member）：又叫类成员，指的是在成员类型或返回值类型前用static关键字修饰的变量或方法，包括静态数据和静态方法；</li>\n<li class=\"lvl-2\">实例成员（instance member）：又称非静态成员、对象成员，是没有用static修饰的变量或方法，包括实例数据和实例方法。</li>\n</ul>\n<h3 id=\"静态成员的特点：\">静态成员的特点：</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>静态成员（包括静态数据和静态方法）必须由类名调用，不能使用对象调用（静态数据可以由实例方法调用）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>静态数据属于类的级别，当类加载时，一个静态数据在内存只分配一个存储空间，无论new出多少个实例，它也只是有那一个空间。</p>\n</li>\n<li class=\"lvl-2\">\n<p>静态方法只能调用静态数据，不能调用对象。</p>\n</li>\n</ul>\n<h3 id=\"实例成员的特点：\">实例成员的特点：</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>实例成员（包括实例数据和实例方法）必须通过对象来调用，不能使用类名调用。</p>\n</li>\n<li class=\"lvl-2\">\n<p>类的实例数据属于类的实例级别，每新创建一个对象，都会在内存中为实例成员开辟一块新的存储空间。</p>\n</li>\n<li class=\"lvl-2\">\n<p>实例方法可以调用实例数据和静态数据。</p>\n</li>\n</ul>\n<h1>类型转换</h1>\n<h3 id=\"隐式类型转换\">隐式类型转换</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>不丢失精度的转换</p>\n</li>\n<li class=\"lvl-2\">\n<p>子类向父类的转换</p>\n</li>\n<li class=\"lvl-2\">\n<p>装箱</p>\n</li>\n</ul>\n<h3 id=\"显式类型转换\">显式类型转换</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>有可能丢失精度的转换，即cast（（T）x）T：目标类型</p>\n</li>\n<li class=\"lvl-2\">\n<p>拆箱</p>\n</li>\n<li class=\"lvl-2\">\n<p>使用convert类</p>\n</li>\n<li class=\"lvl-2\">\n<p>ToString方法与各数据类型的Parse/TryParse方法</p>\n</li>\n</ul>\n<h1>C#封装</h1>\n<p><strong>封装</strong> 被定义为&quot;把一个或多个项目封闭在一个物理的或者逻辑的包中&quot;</p>\n<p><strong>C#支持的访问修饰符：</strong></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>public：所有对象都可以访问；</p>\n</li>\n<li class=\"lvl-2\">\n<p>private：对象本身在对象内部可以访问；</p>\n</li>\n<li class=\"lvl-2\">\n<p>protected：只有该类对象及其子类对象可以访问，这样有助于实现继承</p>\n</li>\n<li class=\"lvl-2\">\n<p>internal：同一个程序集的对象可以访问；</p>\n</li>\n<li class=\"lvl-2\">\n<p>protected internal：访问限于当前程序集或派生自包含类的类型。</p>\n</li>\n</ul>\n<h2 id=\"属性封装\">属性封装</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>属性（Property)是类（class）、结构（structure）和接口（interface）的命名（named）成员</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> age;<span class=\"comment\">//private:私有的,仅供内部进行访问</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Age<span class=\"comment\">//public:公有的,任何地方都可以访问</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"comment\">//获取或读取字段值</span></span><br><span class=\"line\">           <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> age; &#125;<span class=\"comment\">//属性的读取</span></span><br><span class=\"line\">           <span class=\"keyword\">set</span> &#123; age = <span class=\"keyword\">value</span>; &#125;<span class=\"comment\">//属性赋值(value为关键字)</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first.Age = <span class=\"number\">21</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">&quot;年龄为:&#123;0&#125;&quot;</span>,first.Age);</span><br></pre></td></tr></table></figure>\n<p><strong>字段和属性有什么区别？</strong></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>字段：占用内存</p>\n</li>\n<li class=\"lvl-2\">\n<p>属性：不占内存</p>\n</li>\n<li class=\"lvl-2\">\n<p>属性必须依赖一个字段</p>\n</li>\n</ul>\n<h2 id=\"方法封装\">方法封装</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>第一种无参数的方法（没有返回值的方法）</p>\n</li>\n<li class=\"lvl-2\">\n<p>第二种有参数的方法（有返回值的方法）</p>\n</li>\n</ul>\n<h1>C# List<T>用法</T></h1>\n<h2 id=\"List-T-的用法\">List<T>的用法</T></h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>声明</strong>：</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt; mList = <span class=\"keyword\">new</span> List&lt;T&gt;(); <span class=\"comment\">//T为列表中元素类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以一个集合作为参数创建List：</span></span><br><span class=\"line\"><span class=\"built_in\">string</span>[] temArr = &#123; <span class=\"string\">&quot;Ha&quot;</span>, <span class=\"string\">&quot;Hunter&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Lily&quot;</span>, <span class=\"string\">&quot;Jay&quot;</span>, <span class=\"string\">&quot;Jim&quot;</span>, <span class=\"string\">&quot;Kuku&quot;</span>, <span class=\"string\">&quot;Locu&quot;</span> &#125;;</span><br><span class=\"line\">List&lt;<span class=\"built_in\">string</span>&gt; testList = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;(temArr);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>添加元素</strong>：List.Add(element)      List.Insert(index,element)</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"built_in\">string</span>&gt; mList = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">mList.Add(<span class=\"string\">&quot;John&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在index位置添加一个元素</span></span><br><span class=\"line\">List&lt;<span class=\"built_in\">string</span>&gt; mList = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">mList.Insert(<span class=\"number\">1</span>, <span class=\"string\">&quot;Hei&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>遍历List元素</strong>：</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span> (T element <span class=\"keyword\">in</span> mList)  <span class=\"comment\">//T的类型与mList声明时一样</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>删除元素</strong>:</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">List. Remove(element);</li>\n<li class=\"lvl-4\">List. RemoveAt(int index);   删除下标为index的元素</li>\n<li class=\"lvl-4\">List. RemoveRange(int index, int count); 从下标index开始，删除count个元素</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>**判断某个元素是否在该List中：**List. Contains(element)  返回值为：true/false</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mList.Contains(<span class=\"string\">&quot;Hunter&quot;</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;There is Hunter in the list&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    mList.Add(<span class=\"string\">&quot;Hunter&quot;</span>);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Add Hunter successfully.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>**给List里面元素排序：**List. Sort ()  默认是元素第一个字母按升序</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>自定义排序</strong>:默认比较规则在CompareTo方法中定义，该方法属于IComparable<T>泛型接口。请看下面代码：</T></p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> ：<span class=\"title\">IComparable</span>&lt;<span class=\"title\">Person</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//按年龄比较</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CompareTo</span>(<span class=\"params\">Person p</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Age - p.Age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义好默认比较规则后，就可以通过不带参数的Sort方法对集合进行排序</span></span><br></pre></td></tr></table></figure>\n<p><strong>实际使用中，经常需要对集合按照多种不同规则进行排序，这就需要定义其他比较规则，可以在Compare方法中定义，该方法属于IComparer<T>泛型接口</T></strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">NameComparer</span> : <span class=\"title\">IComparer</span>&lt;<span class=\"title\">Person</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放排序器实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> NameComparer Default = <span class=\"keyword\">new</span> NameComparer();</span><br><span class=\"line\">    <span class=\"comment\">//按姓名比较</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Compare</span>(<span class=\"params\">Person p1, Person p2</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.Collections.Comparer.Default.Compare(p1.Name, p2.Name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按照姓名对集合进行排序 </span></span><br><span class=\"line\">persons.Sort(NameComparer.Default); </span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>**给List里面元素顺序反转：**List. Reverse ()</p>\n</li>\n<li class=\"lvl-2\">\n<p>**List清空：**List. Clear ()</p>\n</li>\n<li class=\"lvl-2\">\n<p>**获得List中元素数目：**List. Count ()  返回int值</p>\n</li>\n</ul>\n<h2 id=\"List的方法和属性\">List的方法和属性</h2>\n<p>Capacity 用于获取或设置List可容纳元素的数量。当数量超过容量时，这个值会自动增长。您可以设置这个值以减少容量，也可以调用trin()方法来减少容量以适合实际的元素数目。</p>\n<p>Count 属性，用于获取数组中当前元素数量</p>\n<p>Item( ) 通过指定索引获取或设置元素。对于List类来说，它是一个索引器。</p>\n<p>Add( ) 在List中添加一个对象的公有方法</p>\n<p>AddRange( ) 公有方法，在List尾部添加实现了ICollection接口的多个元素</p>\n<p>BinarySearch( ) 重载的公有方法，用于在排序的List内使用二分查找来定位指定元素.</p>\n<p>Clear( ) 在List内移除所有元素</p>\n<p>Contains( ) 测试一个元素是否在List内</p>\n<p>CopyTo( ) 重载的公有方法，把一个List拷贝到一维数组内</p>\n<p>Exists( ) 测试一个元素是否在List内</p>\n<p>Find( ) 查找并返回List内的出现的第一个匹配元素</p>\n<p>FindAll( ) 查找并返回List内的所有匹配元素</p>\n<p>GetEnumerator( ) 重载的公有方法，返回一个用于迭代List的枚举器</p>\n<p>Getrange( ) 拷贝指定范围的元素到新的List内</p>\n<p>IndexOf( ) 重载的公有方法，查找并返回每一个匹配元素的索引</p>\n<p>Insert( ) 在List内插入一个元素</p>\n<p>InsertRange( ) 在List内插入一组元素</p>\n<p>LastIndexOf( ) 重载的公有方法，，查找并返回最后一个匹配元素的索引</p>\n<p>Remove( ) 移除与指定元素匹配的第一个元素</p>\n<p>RemoveAt( ) 移除指定索引的元素</p>\n<p>RemoveRange( ) 移除指定范围的元素</p>\n<p>Reverse( ) 反转List内元素的顺序</p>\n<p>Sort( ) 对List内的元素进行排序</p>\n<p>ToArray( ) 把List内的元素拷贝到一个新的数组内</p>\n<p>trimToSize( ) 将容量设置为List中元素的实际数目</p>\n<h1>C# Dictionary(字典）</h1>\n<h2 id=\"Dictionary的描述\">Dictionary的描述</h2>\n<p>1、从一组键（Key）到一组值（Value）的映射，每一个添加项都是由一个值及其相关连的键组成</p>\n<p>2、任何键都必须是唯一的</p>\n<p>3、键不能为空引用null（VB中的Nothing），若值为引用类型，则可以为空值</p>\n<p>4、Key和Value可以是任何类型（string，int，custom class 等）</p>\n<h2 id=\"Dictionary的语法\">Dictionary的语法</h2>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、创建及初始化</span></span><br><span class=\"line\">Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt; myDic = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;();<span class=\"comment\">//第一个参数是索引的类型，第二个参数是内容的类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、添加元素</span></span><br><span class=\"line\">myDic.Add(<span class=\"number\">1</span>,<span class=\"string\">&quot;C#&quot;</span>);</span><br><span class=\"line\">myDic.Add(<span class=\"number\">2</span>,<span class=\"string\">&quot;C++&quot;</span>);</span><br><span class=\"line\">myDic.Add(<span class=\"number\">3</span>,<span class=\"string\">&quot;Java&quot;</span>);</span><br><span class=\"line\">myDic.Add(<span class=\"number\">4</span>,<span class=\"string\">&quot;JavaScript&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、通过Key(键)查找元素</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(myDictionary.ContainsKey(<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Key:&#123;0&#125;,Value:&#123;1&#125;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>, myDic[<span class=\"number\">1</span>]);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、通过KeyValuePair遍历元素</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(KeyValuePair&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;kvp <span class=\"keyword\">in</span> myDic)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Key = &#123;0&#125;, Value = &#123;1&#125;&quot;</span>,kvp.Key, kvp.Value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5、仅遍历键 Keys 属性</span></span><br><span class=\"line\">Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;.KeyCollection keyCol=myDic.Keys;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(intkeyinkeyCol)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Key = &#123;0&#125;&quot;</span>, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//6、仅遍历值 Valus属性</span></span><br><span class=\"line\">Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;.ValueCollection valueCol=myDic.Values;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(stringvalueinvalueCol)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Value = &#123;0&#125;&quot;</span>, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//7、通过Remove方法移除指定的键值</span></span><br><span class=\"line\">myDic.Remove(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(myDic.ContainsKey(<span class=\"number\">1</span>))</span><br><span class=\"line\">...&#123;</span><br><span class=\"line\">　　Console.WriteLine(<span class=\"string\">&quot;Key:&#123;0&#125;,Value:&#123;1&#125;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>, myDic[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;不存在 Key : 1&quot;</span>); </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>补充：在类后面有有尖括号的是<strong>泛型类</strong>，需跟其他类组成一个完整的类</p>\n<h1>C# 索引器</h1>\n<p><strong>索引器（Indexer）</strong> 允许一个对象可以像数组一样使用下标的方式来访问。</p>\n<p>当您为类定义一个索引器时，该类的行为就会像一个 <strong>虚拟数组（virtual array）</strong> 一样。您可以使用数组访问运算符 <strong>[ ]</strong> 来访问该类的的成员。</p>\n<p><strong>一维索引器的语法如下：</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element-type <span class=\"keyword\">this</span>[<span class=\"built_in\">int</span> index]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// get 访问器</span></span><br><span class=\"line\">   <span class=\"keyword\">get</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回 index 指定的值</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// set 访问器</span></span><br><span class=\"line\">   <span class=\"keyword\">set</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 设置 index 指定的值</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实例演示：</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Csharp_indexer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Student stu1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">            stu1[<span class=\"string\">&quot;Math&quot;</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> mathScore = stu1[ <span class=\"string\">&quot;Math&quot;</span>];</span><br><span class=\"line\">            Console.WriteLine(mathScore);</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt; scoreDictionary = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span>? <span class=\"keyword\">this</span>[<span class=\"built_in\">string</span> name]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreDictionary.ContainsKey(name))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.scoreDictionary[name];</span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span>.HasValue==<span class=\"literal\">false</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Value connot null!&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreDictionary.ContainsKey(name))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.scoreDictionary[name] = <span class=\"keyword\">value</span>.Value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.scoreDictionary.Add(name, <span class=\"keyword\">value</span>.Value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"索引器与数组的区别：\">索引器与数组的区别：</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>索引器的索引值（Index）类型不限定为整数：</strong></p>\n</li>\n</ul>\n<p>​    用来访问数组的索引值（Index）一定为整数，而索引器的索引值类型可以定义为其他类型。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>索引器允许重载</strong></p>\n</li>\n</ul>\n<p>​    一个类不限定为只能定义一个索引器，只要索引器的函数签名不同，就可以定义多个索引器，可以重载它的功能。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>索引器不是一个变量</strong></p>\n</li>\n</ul>\n<p>​    索引器没有直接定义数据存储的地方，而数组有。索引器具有Get和Set访问器。</p>\n<h3 id=\"索引器与属性的区别：\">索引器与属性的区别：</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>索引器以函数签名方式 this 来标识，而属性采用名称来标识，名称可以任意</strong></p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>索引器可以重载，而属性不能重载。</strong></p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>索引器不能用static 来进行声明，而属性可以。索引器永远属于实例成员，因此不能声明为static。</strong></p>\n</li>\n</ul>\n<h1>C#类型输出</h1>\n<h3 id=\"C-百分数形式输出\">C#百分数形式输出</h3>\n<p><mark><strong>百分比的格式控制符为&quot;P&quot;或&quot;p&quot;将普通数值输出为百分比形式。</strong></mark></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = Console.ReadLine();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = Console.ReadLine();</span><br><span class=\"line\"><span class=\"built_in\">double</span> percent = <span class=\"built_in\">double</span>.Parse(b) / <span class=\"built_in\">double</span>.Parse(a);</span><br><span class=\"line\"><span class=\"built_in\">string</span> q = <span class=\"string\">$&quot;<span class=\"subst\">&#123;percent:p3&#125;</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//string q2 = percent.ToString(&quot;P0&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">//P后边跟数字，代表精度。</span></span><br><span class=\"line\">Console.WriteLine(q);</span><br></pre></td></tr></table></figure>\n<h3 id=\"C-保留小数点后指定位数\">C#保留小数点后指定位数</h3>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d=<span class=\"number\">1.2356</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> str=d.ToString(<span class=\"string\">&quot;0.00&quot;</span>);  <span class=\"comment\">//小数点后有几个0即保留几位小数。</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str=d.ToString(<span class=\"string\">&quot;#0.00&quot;</span>);  </span><br><span class=\"line\"><span class=\"built_in\">string</span> str=d.ToString(<span class=\"string\">&quot;f2&quot;</span>);  <span class=\"comment\">//fn 保留n位，四舍五入，&quot;F&quot;,&quot;f&quot; 不区分大小写</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str=String.Format(<span class=\"string\">&quot;&#123;0:F&#125;&quot;</span>, d);  </span><br><span class=\"line\"><span class=\"built_in\">string</span> str=String.Format(<span class=\"string\">&quot;&#123;0:N2&#125;&quot;</span>, d);</span><br><span class=\"line\"><span class=\"built_in\">double</span> <span class=\"keyword\">do</span>=Math.Round(d, <span class=\"number\">2</span>);  </span><br><span class=\"line\"><span class=\"built_in\">decimal</span> de = <span class=\"built_in\">decimal</span>.Round(<span class=\"built_in\">decimal</span>.Parse(d.ToString()), <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h1>C# 继承</h1>\n<p>注：这个已有的类被称为的<strong>基类</strong>，这个新的类被称为<strong>派生类</strong></p>\n<p><strong>派生类继承了基类的成员变量和成员方法</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">InheritanceApplication</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title\">Shape</span><span class=\"comment\">//基类</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWidth</span>(<span class=\"params\"><span class=\"built_in\">int</span> w</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         width = w;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeight</span>(<span class=\"params\"><span class=\"built_in\">int</span> h</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         height = h;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">//protected可以从派生类直接访问基类的受保护成员</span></span><br><span class=\"line\">      <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">      <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> height;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 派生类</span></span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span>: <span class=\"title\">Shape</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">getArea</span>()</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> (width * height);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title\">RectangleTester</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         Rectangle Rect = <span class=\"keyword\">new</span> Rectangle();</span><br><span class=\"line\">         Rect.setWidth(<span class=\"number\">5</span>);</span><br><span class=\"line\">         Rect.setHeight(<span class=\"number\">7</span>);</span><br><span class=\"line\">         <span class=\"comment\">// 打印对象的面积</span></span><br><span class=\"line\">         Console.WriteLine(<span class=\"string\">&quot;总面积： &#123;0&#125;&quot;</span>,  Rect.getArea());</span><br><span class=\"line\">         Console.ReadKey();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"base-关键字\">base 关键字</h3>\n<p><code>base</code> 关键字用于从派生类中访问基类的成员。 如果要执行以下操作时使用它：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>调用基类上已被其他方法重写的方法。</p>\n</li>\n<li class=\"lvl-2\">\n<p>指定创建派生类实例时应调用的基类构造函数。</p>\n</li>\n</ul>\n<p>仅允许基类访问在构造函数、实例方法和实例属性访问器中进行。</p>\n<p>在静态方法中使用 <code>base</code> 关键字将产生错误。</p>\n<p>所访问的基类是类声明中指定的基类。 例如，如果指定 <code>class ClassB : ClassA</code>，则从 ClassB 访问 ClassA 的成员，而不考虑 ClassA 的基类。</p>\n<h1>C# 多态性</h1>\n<p><mark>多态：只有多个类同时继承了同一个类。</mark></p>\n<p>在 C#语言中体现多态有三种方式：虚方法，抽象类， 接口。</p>\n<h3 id=\"抽象方法和虚方法\">抽象方法和虚方法</h3>\n<p>基类将方法声明为 <a href=\"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual\"><code>virtual</code></a> 时，派生类可以使用其自己的实现<a href=\"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/override\"><code>override</code></a>该方法。</p>\n<p>如果基类将成员声明为 <a href=\"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/abstract\"><code>abstract</code></a>，则必须在直接继承自该类的任何非抽象类中重写该方法。 如果派生类本身是抽象的，则它会继承抽象成员而不会实现它们。 抽象和虚拟成员是多形性（面向对象的编程的第二个主要特征）的基础。</p>\n<h3 id=\"抽象类\">抽象类</h3>\n<p>C# 允许您使用关键字 <strong>abstract</strong> 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。</p>\n<p>请注意，下面是有关抽象类的一些规则：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>您不能创建一个抽象类的实例。</p>\n</li>\n<li class=\"lvl-2\">\n<p>您不能在一个抽象类外部声明一个抽象方法。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</p>\n</li>\n</ul>\n<h1>C#事件</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>角色：<strong>使对象或类具备通知能力的成员</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>使用：<strong>用于对象或类间的动作协调与信息传递（消息推送）</strong></p>\n</li>\n</ol>\n<h3 id=\"事件模型的五个组成部分\">事件模型的五个组成部分</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>事件的拥有者（event source，对象）</p>\n</li>\n<li class=\"lvl-3\">\n<p>事件成员（event，成员）</p>\n</li>\n<li class=\"lvl-3\">\n<p>事件的响应者（event subscribe，对象）</p>\n</li>\n<li class=\"lvl-3\">\n<p>事件处理器（event handler，成员）–本质是一个回调方法</p>\n</li>\n<li class=\"lvl-3\">\n<p>事件订阅—把事件处理器与事件关联在一起</p>\n</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Cs_teat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Calc</span>(<span class=\"params\"><span class=\"built_in\">double</span> x, <span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">            timer.Interval = <span class=\"number\">1000</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> boy = <span class=\"keyword\">new</span> Boy();</span><br><span class=\"line\">            timer.Elapsed += boy.Action;</span><br><span class=\"line\">            timer.Start();</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Boy</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, ElapsedEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Jump!!!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Cs_teat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Calc</span>(<span class=\"params\"><span class=\"built_in\">double</span> x, <span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyForm form = <span class=\"keyword\">new</span> MyForm();</span><br><span class=\"line\">            form.Click+=form.Action;</span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Text = DateTime.Now.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义事件的声明\">自定义事件的声明</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>事件声明：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">完整声明</li>\n<li class=\"lvl-4\">简略声明（字段式声明，field-like）</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>有了委托字段/属性，为什么还需要事件：为了使程序逻辑更加完善</p>\n</li>\n<li class=\"lvl-2\">\n<p><span style=\"color:red\">事件的本质</span>是委托字段的一个包装器</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">这个包装器对委托字段的访问起<span style=\"color:red\">限制作用</span>，相当于一个“蒙板”</li>\n<li class=\"lvl-4\">封装的一个重要功能就是隐藏</li>\n<li class=\"lvl-4\">事件对外界隐藏了委托实例的大部分功能，<span style=\"color:red\">仅暴露添加/移除事件处理器的功能</span></li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>用于声明事件的委托类型的命名约定</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">一般命名为 XXXEventHandler （除非是一个非常通用的事件约束）</li>\n<li class=\"lvl-4\">XXXXEventHandler委托的参数一般有两个（由Win32 API演化而来）</li>\n<li class=\"lvl-4\">触发XXX事件的方法一般命名为OnXXX，即“因何发生”\n<ul class=\"lvl-4\">\n<li class=\"lvl-6\">访问级别为protected，不能为public</li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>事件的命名约定</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">带有时态的动词或者动词短语</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandler</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> MyEventHandler MyEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Do something...&quot;</span>);</span><br><span class=\"line\">        MyEvent?.Invoke(<span class=\"keyword\">this</span>, EventArgs.Empty);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MyClass obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">        obj.MyEvent += MyEventHandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">        obj.DoSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.ReadLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandlerMethod</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Event handled.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​\t在这个例子中，创建了一个自定义事件 <code>MyEvent</code>，并在 <code>DoSomething</code> 方法中触发事件。在 <code>Main</code> 方法中，创建了一个 <code>MyClass</code> 实例并注册事件处理程序。在调用 <code>DoSomething</code> 方法时，事件处理程序将被调用。</p>\n<h1>C#委托</h1>\n<p>功能：一个函数或一组函数的封装器</p>\n<p>声明委托：使用<code>delegate</code>关键字，与类平级</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">int</span> <span class=\"title\">MyDelegate</span> (<span class=\"params\"><span class=\"built_in\">string</span> s</span>)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"委托的多播-Multicasting-of-a-Delegate\">委托的多播(Multicasting of a Delegate)</h3>\n<p>委托对象可使用<span style=\"color:red\"> “+” 运算符进行合并，“-” 运算符可用于从合并的委托中移除组件委托</span>，只有相同类型的委托可被合并。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Cs_teat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> a = <span class=\"number\">2342.31</span>;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> b = <span class=\"number\">223.1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> calcutating = <span class=\"keyword\">new</span> Calculate();</span><br><span class=\"line\">            Cal operation = <span class=\"keyword\">new</span> Cal(calcutating.Add);</span><br><span class=\"line\">            <span class=\"built_in\">double</span> c = operation(a, b);</span><br><span class=\"line\">            Console.WriteLine(c);</span><br><span class=\"line\">            operation += calcutating.Sub;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> d = operation(c, b);</span><br><span class=\"line\">            Console.WriteLine(d);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Cal</span>(<span class=\"params\"><span class=\"built_in\">double</span> x, <span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Calculate</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">double</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">double</span> x,<span class=\"built_in\">double</span> y</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> result;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result = x + y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">double</span> <span class=\"title\">Sub</span>(<span class=\"params\"><span class=\"built_in\">double</span> x,<span class=\"built_in\">double</span> y</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> result;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result = x - y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>==Action委托：==用于参数列表为空，返回值为空</p>\n<p>==Action&lt;&gt;委托：==用于参数列表不为空，返回值为空，例如：<code>Action&lt;string&gt; action=new Action&lt;string&gt;(SayHello);</code></p>\n<p>==Func&lt;&gt;委托：==用于参数列表不为空，返回值不为空，例如：<code>Func&lt;int,int，double&gt; func=new Func&lt;int,int，double&gt;</code>返回值为double类型，参数都为int类型</p>\n<h1>C#抽象类与开闭原则</h1>\n<p>​\t1. 抽象类是一种特殊的类，<span style=\"color:red\">它不能被实例化，只能被用作其他类的基类</span>，提供一个或多个抽象方法或抽象属性。</p>\n<p>​\t2. 抽象类通过 <code>abstract</code> 关键字来定义，不能直接实例化。</p>\n<p>​\t3. 派生类必须实现抽象类中的所有抽象成员，否则编译器会报错。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>具体类–&gt;抽象类–&gt;接口：越来越抽象，内部实现的东西越来越少</p>\n</li>\n<li class=\"lvl-2\">\n<p>抽象类是<span style=\"color:red\">未完全实现逻辑的类</span>（可以有字段和非public成员，他们代表了”具体逻辑“）</p>\n</li>\n<li class=\"lvl-2\">\n<p>抽象类为复用而生：专门作为基类来使用，也具有解耦功能</p>\n</li>\n</ul>\n<p>**<mark>开闭原则：</mark>**封装确定的，开放不确定的，推迟到合适的子类中去实现</p>\n","site":{"data":{}},"cover":"/medias/cover/01.png","excerpt":"","more":"<h1>C# 静态成员和实例成员</h1>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">静态成员（<a href=\"https://so.csdn.net/so/search?q=static&amp;spm=1001.2101.3001.7020\">static</a> member）：又叫类成员，指的是在成员类型或返回值类型前用static关键字修饰的变量或方法，包括静态数据和静态方法；</li>\n<li class=\"lvl-2\">实例成员（instance member）：又称非静态成员、对象成员，是没有用static修饰的变量或方法，包括实例数据和实例方法。</li>\n</ul>\n<h3 id=\"静态成员的特点：\">静态成员的特点：</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>静态成员（包括静态数据和静态方法）必须由类名调用，不能使用对象调用（静态数据可以由实例方法调用）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>静态数据属于类的级别，当类加载时，一个静态数据在内存只分配一个存储空间，无论new出多少个实例，它也只是有那一个空间。</p>\n</li>\n<li class=\"lvl-2\">\n<p>静态方法只能调用静态数据，不能调用对象。</p>\n</li>\n</ul>\n<h3 id=\"实例成员的特点：\">实例成员的特点：</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>实例成员（包括实例数据和实例方法）必须通过对象来调用，不能使用类名调用。</p>\n</li>\n<li class=\"lvl-2\">\n<p>类的实例数据属于类的实例级别，每新创建一个对象，都会在内存中为实例成员开辟一块新的存储空间。</p>\n</li>\n<li class=\"lvl-2\">\n<p>实例方法可以调用实例数据和静态数据。</p>\n</li>\n</ul>\n<h1>类型转换</h1>\n<h3 id=\"隐式类型转换\">隐式类型转换</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>不丢失精度的转换</p>\n</li>\n<li class=\"lvl-2\">\n<p>子类向父类的转换</p>\n</li>\n<li class=\"lvl-2\">\n<p>装箱</p>\n</li>\n</ul>\n<h3 id=\"显式类型转换\">显式类型转换</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>有可能丢失精度的转换，即cast（（T）x）T：目标类型</p>\n</li>\n<li class=\"lvl-2\">\n<p>拆箱</p>\n</li>\n<li class=\"lvl-2\">\n<p>使用convert类</p>\n</li>\n<li class=\"lvl-2\">\n<p>ToString方法与各数据类型的Parse/TryParse方法</p>\n</li>\n</ul>\n<h1>C#封装</h1>\n<p><strong>封装</strong> 被定义为&quot;把一个或多个项目封闭在一个物理的或者逻辑的包中&quot;</p>\n<p><strong>C#支持的访问修饰符：</strong></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>public：所有对象都可以访问；</p>\n</li>\n<li class=\"lvl-2\">\n<p>private：对象本身在对象内部可以访问；</p>\n</li>\n<li class=\"lvl-2\">\n<p>protected：只有该类对象及其子类对象可以访问，这样有助于实现继承</p>\n</li>\n<li class=\"lvl-2\">\n<p>internal：同一个程序集的对象可以访问；</p>\n</li>\n<li class=\"lvl-2\">\n<p>protected internal：访问限于当前程序集或派生自包含类的类型。</p>\n</li>\n</ul>\n<h2 id=\"属性封装\">属性封装</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>属性（Property)是类（class）、结构（structure）和接口（interface）的命名（named）成员</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> age;<span class=\"comment\">//private:私有的,仅供内部进行访问</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Age<span class=\"comment\">//public:公有的,任何地方都可以访问</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"comment\">//获取或读取字段值</span></span><br><span class=\"line\">           <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> age; &#125;<span class=\"comment\">//属性的读取</span></span><br><span class=\"line\">           <span class=\"keyword\">set</span> &#123; age = <span class=\"keyword\">value</span>; &#125;<span class=\"comment\">//属性赋值(value为关键字)</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first.Age = <span class=\"number\">21</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">&quot;年龄为:&#123;0&#125;&quot;</span>,first.Age);</span><br></pre></td></tr></table></figure>\n<p><strong>字段和属性有什么区别？</strong></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>字段：占用内存</p>\n</li>\n<li class=\"lvl-2\">\n<p>属性：不占内存</p>\n</li>\n<li class=\"lvl-2\">\n<p>属性必须依赖一个字段</p>\n</li>\n</ul>\n<h2 id=\"方法封装\">方法封装</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>第一种无参数的方法（没有返回值的方法）</p>\n</li>\n<li class=\"lvl-2\">\n<p>第二种有参数的方法（有返回值的方法）</p>\n</li>\n</ul>\n<h1>C# List<T>用法</T></h1>\n<h2 id=\"List-T-的用法\">List<T>的用法</T></h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>声明</strong>：</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt; mList = <span class=\"keyword\">new</span> List&lt;T&gt;(); <span class=\"comment\">//T为列表中元素类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以一个集合作为参数创建List：</span></span><br><span class=\"line\"><span class=\"built_in\">string</span>[] temArr = &#123; <span class=\"string\">&quot;Ha&quot;</span>, <span class=\"string\">&quot;Hunter&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Lily&quot;</span>, <span class=\"string\">&quot;Jay&quot;</span>, <span class=\"string\">&quot;Jim&quot;</span>, <span class=\"string\">&quot;Kuku&quot;</span>, <span class=\"string\">&quot;Locu&quot;</span> &#125;;</span><br><span class=\"line\">List&lt;<span class=\"built_in\">string</span>&gt; testList = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;(temArr);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>添加元素</strong>：List.Add(element)      List.Insert(index,element)</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"built_in\">string</span>&gt; mList = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">mList.Add(<span class=\"string\">&quot;John&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在index位置添加一个元素</span></span><br><span class=\"line\">List&lt;<span class=\"built_in\">string</span>&gt; mList = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">mList.Insert(<span class=\"number\">1</span>, <span class=\"string\">&quot;Hei&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>遍历List元素</strong>：</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span> (T element <span class=\"keyword\">in</span> mList)  <span class=\"comment\">//T的类型与mList声明时一样</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>删除元素</strong>:</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">List. Remove(element);</li>\n<li class=\"lvl-4\">List. RemoveAt(int index);   删除下标为index的元素</li>\n<li class=\"lvl-4\">List. RemoveRange(int index, int count); 从下标index开始，删除count个元素</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>**判断某个元素是否在该List中：**List. Contains(element)  返回值为：true/false</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mList.Contains(<span class=\"string\">&quot;Hunter&quot;</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;There is Hunter in the list&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    mList.Add(<span class=\"string\">&quot;Hunter&quot;</span>);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Add Hunter successfully.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>**给List里面元素排序：**List. Sort ()  默认是元素第一个字母按升序</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>自定义排序</strong>:默认比较规则在CompareTo方法中定义，该方法属于IComparable<T>泛型接口。请看下面代码：</T></p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> ：<span class=\"title\">IComparable</span>&lt;<span class=\"title\">Person</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//按年龄比较</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CompareTo</span>(<span class=\"params\">Person p</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Age - p.Age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义好默认比较规则后，就可以通过不带参数的Sort方法对集合进行排序</span></span><br></pre></td></tr></table></figure>\n<p><strong>实际使用中，经常需要对集合按照多种不同规则进行排序，这就需要定义其他比较规则，可以在Compare方法中定义，该方法属于IComparer<T>泛型接口</T></strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">NameComparer</span> : <span class=\"title\">IComparer</span>&lt;<span class=\"title\">Person</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放排序器实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> NameComparer Default = <span class=\"keyword\">new</span> NameComparer();</span><br><span class=\"line\">    <span class=\"comment\">//按姓名比较</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Compare</span>(<span class=\"params\">Person p1, Person p2</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.Collections.Comparer.Default.Compare(p1.Name, p2.Name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按照姓名对集合进行排序 </span></span><br><span class=\"line\">persons.Sort(NameComparer.Default); </span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>**给List里面元素顺序反转：**List. Reverse ()</p>\n</li>\n<li class=\"lvl-2\">\n<p>**List清空：**List. Clear ()</p>\n</li>\n<li class=\"lvl-2\">\n<p>**获得List中元素数目：**List. Count ()  返回int值</p>\n</li>\n</ul>\n<h2 id=\"List的方法和属性\">List的方法和属性</h2>\n<p>Capacity 用于获取或设置List可容纳元素的数量。当数量超过容量时，这个值会自动增长。您可以设置这个值以减少容量，也可以调用trin()方法来减少容量以适合实际的元素数目。</p>\n<p>Count 属性，用于获取数组中当前元素数量</p>\n<p>Item( ) 通过指定索引获取或设置元素。对于List类来说，它是一个索引器。</p>\n<p>Add( ) 在List中添加一个对象的公有方法</p>\n<p>AddRange( ) 公有方法，在List尾部添加实现了ICollection接口的多个元素</p>\n<p>BinarySearch( ) 重载的公有方法，用于在排序的List内使用二分查找来定位指定元素.</p>\n<p>Clear( ) 在List内移除所有元素</p>\n<p>Contains( ) 测试一个元素是否在List内</p>\n<p>CopyTo( ) 重载的公有方法，把一个List拷贝到一维数组内</p>\n<p>Exists( ) 测试一个元素是否在List内</p>\n<p>Find( ) 查找并返回List内的出现的第一个匹配元素</p>\n<p>FindAll( ) 查找并返回List内的所有匹配元素</p>\n<p>GetEnumerator( ) 重载的公有方法，返回一个用于迭代List的枚举器</p>\n<p>Getrange( ) 拷贝指定范围的元素到新的List内</p>\n<p>IndexOf( ) 重载的公有方法，查找并返回每一个匹配元素的索引</p>\n<p>Insert( ) 在List内插入一个元素</p>\n<p>InsertRange( ) 在List内插入一组元素</p>\n<p>LastIndexOf( ) 重载的公有方法，，查找并返回最后一个匹配元素的索引</p>\n<p>Remove( ) 移除与指定元素匹配的第一个元素</p>\n<p>RemoveAt( ) 移除指定索引的元素</p>\n<p>RemoveRange( ) 移除指定范围的元素</p>\n<p>Reverse( ) 反转List内元素的顺序</p>\n<p>Sort( ) 对List内的元素进行排序</p>\n<p>ToArray( ) 把List内的元素拷贝到一个新的数组内</p>\n<p>trimToSize( ) 将容量设置为List中元素的实际数目</p>\n<h1>C# Dictionary(字典）</h1>\n<h2 id=\"Dictionary的描述\">Dictionary的描述</h2>\n<p>1、从一组键（Key）到一组值（Value）的映射，每一个添加项都是由一个值及其相关连的键组成</p>\n<p>2、任何键都必须是唯一的</p>\n<p>3、键不能为空引用null（VB中的Nothing），若值为引用类型，则可以为空值</p>\n<p>4、Key和Value可以是任何类型（string，int，custom class 等）</p>\n<h2 id=\"Dictionary的语法\">Dictionary的语法</h2>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、创建及初始化</span></span><br><span class=\"line\">Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt; myDic = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;();<span class=\"comment\">//第一个参数是索引的类型，第二个参数是内容的类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、添加元素</span></span><br><span class=\"line\">myDic.Add(<span class=\"number\">1</span>,<span class=\"string\">&quot;C#&quot;</span>);</span><br><span class=\"line\">myDic.Add(<span class=\"number\">2</span>,<span class=\"string\">&quot;C++&quot;</span>);</span><br><span class=\"line\">myDic.Add(<span class=\"number\">3</span>,<span class=\"string\">&quot;Java&quot;</span>);</span><br><span class=\"line\">myDic.Add(<span class=\"number\">4</span>,<span class=\"string\">&quot;JavaScript&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、通过Key(键)查找元素</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(myDictionary.ContainsKey(<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Key:&#123;0&#125;,Value:&#123;1&#125;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>, myDic[<span class=\"number\">1</span>]);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、通过KeyValuePair遍历元素</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(KeyValuePair&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;kvp <span class=\"keyword\">in</span> myDic)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Key = &#123;0&#125;, Value = &#123;1&#125;&quot;</span>,kvp.Key, kvp.Value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5、仅遍历键 Keys 属性</span></span><br><span class=\"line\">Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;.KeyCollection keyCol=myDic.Keys;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(intkeyinkeyCol)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Key = &#123;0&#125;&quot;</span>, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//6、仅遍历值 Valus属性</span></span><br><span class=\"line\">Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;.ValueCollection valueCol=myDic.Values;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(stringvalueinvalueCol)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Value = &#123;0&#125;&quot;</span>, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//7、通过Remove方法移除指定的键值</span></span><br><span class=\"line\">myDic.Remove(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(myDic.ContainsKey(<span class=\"number\">1</span>))</span><br><span class=\"line\">...&#123;</span><br><span class=\"line\">　　Console.WriteLine(<span class=\"string\">&quot;Key:&#123;0&#125;,Value:&#123;1&#125;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>, myDic[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;不存在 Key : 1&quot;</span>); </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>补充：在类后面有有尖括号的是<strong>泛型类</strong>，需跟其他类组成一个完整的类</p>\n<h1>C# 索引器</h1>\n<p><strong>索引器（Indexer）</strong> 允许一个对象可以像数组一样使用下标的方式来访问。</p>\n<p>当您为类定义一个索引器时，该类的行为就会像一个 <strong>虚拟数组（virtual array）</strong> 一样。您可以使用数组访问运算符 <strong>[ ]</strong> 来访问该类的的成员。</p>\n<p><strong>一维索引器的语法如下：</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element-type <span class=\"keyword\">this</span>[<span class=\"built_in\">int</span> index]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// get 访问器</span></span><br><span class=\"line\">   <span class=\"keyword\">get</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回 index 指定的值</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// set 访问器</span></span><br><span class=\"line\">   <span class=\"keyword\">set</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 设置 index 指定的值</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实例演示：</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Csharp_indexer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Student stu1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">            stu1[<span class=\"string\">&quot;Math&quot;</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> mathScore = stu1[ <span class=\"string\">&quot;Math&quot;</span>];</span><br><span class=\"line\">            Console.WriteLine(mathScore);</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt; scoreDictionary = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span>? <span class=\"keyword\">this</span>[<span class=\"built_in\">string</span> name]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreDictionary.ContainsKey(name))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.scoreDictionary[name];</span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span>.HasValue==<span class=\"literal\">false</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Value connot null!&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreDictionary.ContainsKey(name))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.scoreDictionary[name] = <span class=\"keyword\">value</span>.Value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.scoreDictionary.Add(name, <span class=\"keyword\">value</span>.Value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"索引器与数组的区别：\">索引器与数组的区别：</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>索引器的索引值（Index）类型不限定为整数：</strong></p>\n</li>\n</ul>\n<p>​    用来访问数组的索引值（Index）一定为整数，而索引器的索引值类型可以定义为其他类型。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>索引器允许重载</strong></p>\n</li>\n</ul>\n<p>​    一个类不限定为只能定义一个索引器，只要索引器的函数签名不同，就可以定义多个索引器，可以重载它的功能。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>索引器不是一个变量</strong></p>\n</li>\n</ul>\n<p>​    索引器没有直接定义数据存储的地方，而数组有。索引器具有Get和Set访问器。</p>\n<h3 id=\"索引器与属性的区别：\">索引器与属性的区别：</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>索引器以函数签名方式 this 来标识，而属性采用名称来标识，名称可以任意</strong></p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>索引器可以重载，而属性不能重载。</strong></p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>索引器不能用static 来进行声明，而属性可以。索引器永远属于实例成员，因此不能声明为static。</strong></p>\n</li>\n</ul>\n<h1>C#类型输出</h1>\n<h3 id=\"C-百分数形式输出\">C#百分数形式输出</h3>\n<p><mark><strong>百分比的格式控制符为&quot;P&quot;或&quot;p&quot;将普通数值输出为百分比形式。</strong></mark></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = Console.ReadLine();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = Console.ReadLine();</span><br><span class=\"line\"><span class=\"built_in\">double</span> percent = <span class=\"built_in\">double</span>.Parse(b) / <span class=\"built_in\">double</span>.Parse(a);</span><br><span class=\"line\"><span class=\"built_in\">string</span> q = <span class=\"string\">$&quot;<span class=\"subst\">&#123;percent:p3&#125;</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//string q2 = percent.ToString(&quot;P0&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">//P后边跟数字，代表精度。</span></span><br><span class=\"line\">Console.WriteLine(q);</span><br></pre></td></tr></table></figure>\n<h3 id=\"C-保留小数点后指定位数\">C#保留小数点后指定位数</h3>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d=<span class=\"number\">1.2356</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> str=d.ToString(<span class=\"string\">&quot;0.00&quot;</span>);  <span class=\"comment\">//小数点后有几个0即保留几位小数。</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str=d.ToString(<span class=\"string\">&quot;#0.00&quot;</span>);  </span><br><span class=\"line\"><span class=\"built_in\">string</span> str=d.ToString(<span class=\"string\">&quot;f2&quot;</span>);  <span class=\"comment\">//fn 保留n位，四舍五入，&quot;F&quot;,&quot;f&quot; 不区分大小写</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> str=String.Format(<span class=\"string\">&quot;&#123;0:F&#125;&quot;</span>, d);  </span><br><span class=\"line\"><span class=\"built_in\">string</span> str=String.Format(<span class=\"string\">&quot;&#123;0:N2&#125;&quot;</span>, d);</span><br><span class=\"line\"><span class=\"built_in\">double</span> <span class=\"keyword\">do</span>=Math.Round(d, <span class=\"number\">2</span>);  </span><br><span class=\"line\"><span class=\"built_in\">decimal</span> de = <span class=\"built_in\">decimal</span>.Round(<span class=\"built_in\">decimal</span>.Parse(d.ToString()), <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h1>C# 继承</h1>\n<p>注：这个已有的类被称为的<strong>基类</strong>，这个新的类被称为<strong>派生类</strong></p>\n<p><strong>派生类继承了基类的成员变量和成员方法</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">InheritanceApplication</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title\">Shape</span><span class=\"comment\">//基类</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWidth</span>(<span class=\"params\"><span class=\"built_in\">int</span> w</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         width = w;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeight</span>(<span class=\"params\"><span class=\"built_in\">int</span> h</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         height = h;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">//protected可以从派生类直接访问基类的受保护成员</span></span><br><span class=\"line\">      <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> width;</span><br><span class=\"line\">      <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> height;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 派生类</span></span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span>: <span class=\"title\">Shape</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">getArea</span>()</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> (width * height);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title\">RectangleTester</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         Rectangle Rect = <span class=\"keyword\">new</span> Rectangle();</span><br><span class=\"line\">         Rect.setWidth(<span class=\"number\">5</span>);</span><br><span class=\"line\">         Rect.setHeight(<span class=\"number\">7</span>);</span><br><span class=\"line\">         <span class=\"comment\">// 打印对象的面积</span></span><br><span class=\"line\">         Console.WriteLine(<span class=\"string\">&quot;总面积： &#123;0&#125;&quot;</span>,  Rect.getArea());</span><br><span class=\"line\">         Console.ReadKey();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"base-关键字\">base 关键字</h3>\n<p><code>base</code> 关键字用于从派生类中访问基类的成员。 如果要执行以下操作时使用它：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>调用基类上已被其他方法重写的方法。</p>\n</li>\n<li class=\"lvl-2\">\n<p>指定创建派生类实例时应调用的基类构造函数。</p>\n</li>\n</ul>\n<p>仅允许基类访问在构造函数、实例方法和实例属性访问器中进行。</p>\n<p>在静态方法中使用 <code>base</code> 关键字将产生错误。</p>\n<p>所访问的基类是类声明中指定的基类。 例如，如果指定 <code>class ClassB : ClassA</code>，则从 ClassB 访问 ClassA 的成员，而不考虑 ClassA 的基类。</p>\n<h1>C# 多态性</h1>\n<p><mark>多态：只有多个类同时继承了同一个类。</mark></p>\n<p>在 C#语言中体现多态有三种方式：虚方法，抽象类， 接口。</p>\n<h3 id=\"抽象方法和虚方法\">抽象方法和虚方法</h3>\n<p>基类将方法声明为 <a href=\"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual\"><code>virtual</code></a> 时，派生类可以使用其自己的实现<a href=\"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/override\"><code>override</code></a>该方法。</p>\n<p>如果基类将成员声明为 <a href=\"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/abstract\"><code>abstract</code></a>，则必须在直接继承自该类的任何非抽象类中重写该方法。 如果派生类本身是抽象的，则它会继承抽象成员而不会实现它们。 抽象和虚拟成员是多形性（面向对象的编程的第二个主要特征）的基础。</p>\n<h3 id=\"抽象类\">抽象类</h3>\n<p>C# 允许您使用关键字 <strong>abstract</strong> 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。</p>\n<p>请注意，下面是有关抽象类的一些规则：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>您不能创建一个抽象类的实例。</p>\n</li>\n<li class=\"lvl-2\">\n<p>您不能在一个抽象类外部声明一个抽象方法。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</p>\n</li>\n</ul>\n<h1>C#事件</h1>\n<ol>\n<li class=\"lvl-3\">\n<p>角色：<strong>使对象或类具备通知能力的成员</strong></p>\n</li>\n<li class=\"lvl-3\">\n<p>使用：<strong>用于对象或类间的动作协调与信息传递（消息推送）</strong></p>\n</li>\n</ol>\n<h3 id=\"事件模型的五个组成部分\">事件模型的五个组成部分</h3>\n<ol>\n<li class=\"lvl-3\">\n<p>事件的拥有者（event source，对象）</p>\n</li>\n<li class=\"lvl-3\">\n<p>事件成员（event，成员）</p>\n</li>\n<li class=\"lvl-3\">\n<p>事件的响应者（event subscribe，对象）</p>\n</li>\n<li class=\"lvl-3\">\n<p>事件处理器（event handler，成员）–本质是一个回调方法</p>\n</li>\n<li class=\"lvl-3\">\n<p>事件订阅—把事件处理器与事件关联在一起</p>\n</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Cs_teat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Calc</span>(<span class=\"params\"><span class=\"built_in\">double</span> x, <span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">            timer.Interval = <span class=\"number\">1000</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> boy = <span class=\"keyword\">new</span> Boy();</span><br><span class=\"line\">            timer.Elapsed += boy.Action;</span><br><span class=\"line\">            timer.Start();</span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Boy</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, ElapsedEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Jump!!!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Cs_teat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Calc</span>(<span class=\"params\"><span class=\"built_in\">double</span> x, <span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyForm form = <span class=\"keyword\">new</span> MyForm();</span><br><span class=\"line\">            form.Click+=form.Action;</span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Text = DateTime.Now.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义事件的声明\">自定义事件的声明</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>事件声明：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">完整声明</li>\n<li class=\"lvl-4\">简略声明（字段式声明，field-like）</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>有了委托字段/属性，为什么还需要事件：为了使程序逻辑更加完善</p>\n</li>\n<li class=\"lvl-2\">\n<p><span style=\"color:red\">事件的本质</span>是委托字段的一个包装器</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">这个包装器对委托字段的访问起<span style=\"color:red\">限制作用</span>，相当于一个“蒙板”</li>\n<li class=\"lvl-4\">封装的一个重要功能就是隐藏</li>\n<li class=\"lvl-4\">事件对外界隐藏了委托实例的大部分功能，<span style=\"color:red\">仅暴露添加/移除事件处理器的功能</span></li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>用于声明事件的委托类型的命名约定</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">一般命名为 XXXEventHandler （除非是一个非常通用的事件约束）</li>\n<li class=\"lvl-4\">XXXXEventHandler委托的参数一般有两个（由Win32 API演化而来）</li>\n<li class=\"lvl-4\">触发XXX事件的方法一般命名为OnXXX，即“因何发生”\n<ul class=\"lvl-4\">\n<li class=\"lvl-6\">访问级别为protected，不能为public</li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>事件的命名约定</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">带有时态的动词或者动词短语</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandler</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> MyEventHandler MyEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Do something...&quot;</span>);</span><br><span class=\"line\">        MyEvent?.Invoke(<span class=\"keyword\">this</span>, EventArgs.Empty);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MyClass obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">        obj.MyEvent += MyEventHandlerMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">        obj.DoSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.ReadLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandlerMethod</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Event handled.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​\t在这个例子中，创建了一个自定义事件 <code>MyEvent</code>，并在 <code>DoSomething</code> 方法中触发事件。在 <code>Main</code> 方法中，创建了一个 <code>MyClass</code> 实例并注册事件处理程序。在调用 <code>DoSomething</code> 方法时，事件处理程序将被调用。</p>\n<h1>C#委托</h1>\n<p>功能：一个函数或一组函数的封装器</p>\n<p>声明委托：使用<code>delegate</code>关键字，与类平级</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">int</span> <span class=\"title\">MyDelegate</span> (<span class=\"params\"><span class=\"built_in\">string</span> s</span>)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"委托的多播-Multicasting-of-a-Delegate\">委托的多播(Multicasting of a Delegate)</h3>\n<p>委托对象可使用<span style=\"color:red\"> “+” 运算符进行合并，“-” 运算符可用于从合并的委托中移除组件委托</span>，只有相同类型的委托可被合并。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Cs_teat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> a = <span class=\"number\">2342.31</span>;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> b = <span class=\"number\">223.1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> calcutating = <span class=\"keyword\">new</span> Calculate();</span><br><span class=\"line\">            Cal operation = <span class=\"keyword\">new</span> Cal(calcutating.Add);</span><br><span class=\"line\">            <span class=\"built_in\">double</span> c = operation(a, b);</span><br><span class=\"line\">            Console.WriteLine(c);</span><br><span class=\"line\">            operation += calcutating.Sub;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> d = operation(c, b);</span><br><span class=\"line\">            Console.WriteLine(d);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Cal</span>(<span class=\"params\"><span class=\"built_in\">double</span> x, <span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Calculate</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">double</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">double</span> x,<span class=\"built_in\">double</span> y</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> result;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result = x + y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">double</span> <span class=\"title\">Sub</span>(<span class=\"params\"><span class=\"built_in\">double</span> x,<span class=\"built_in\">double</span> y</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">double</span> result;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result = x - y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>==Action委托：==用于参数列表为空，返回值为空</p>\n<p>==Action&lt;&gt;委托：==用于参数列表不为空，返回值为空，例如：<code>Action&lt;string&gt; action=new Action&lt;string&gt;(SayHello);</code></p>\n<p>==Func&lt;&gt;委托：==用于参数列表不为空，返回值不为空，例如：<code>Func&lt;int,int，double&gt; func=new Func&lt;int,int，double&gt;</code>返回值为double类型，参数都为int类型</p>\n<h1>C#抽象类与开闭原则</h1>\n<p>​\t1. 抽象类是一种特殊的类，<span style=\"color:red\">它不能被实例化，只能被用作其他类的基类</span>，提供一个或多个抽象方法或抽象属性。</p>\n<p>​\t2. 抽象类通过 <code>abstract</code> 关键字来定义，不能直接实例化。</p>\n<p>​\t3. 派生类必须实现抽象类中的所有抽象成员，否则编译器会报错。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>具体类–&gt;抽象类–&gt;接口：越来越抽象，内部实现的东西越来越少</p>\n</li>\n<li class=\"lvl-2\">\n<p>抽象类是<span style=\"color:red\">未完全实现逻辑的类</span>（可以有字段和非public成员，他们代表了”具体逻辑“）</p>\n</li>\n<li class=\"lvl-2\">\n<p>抽象类为复用而生：专门作为基类来使用，也具有解耦功能</p>\n</li>\n</ul>\n<p>**<mark>开闭原则：</mark>**封装确定的，开放不确定的，推迟到合适的子类中去实现</p>\n"},{"title":"我的第一篇博客","date":"2023-01-23T03:58:35.000Z","_content":"\n# Git常用命令\n\n### 本地库初始化：git init\n\n### 设置签名：\n\n##### git config --global user.name 设置全局用户名\n\n##### git config --global user.email 设置全局邮箱名\n\n###### 保存位置 ~/.gitconfig\n\n### 提交文件\n\n- git status 查看文件状态\n- git add 添加文件到暂存区\n- 1.git commit 提交文件到本地库 2.git commit -m \"描述内容\"\n- git remote add origin 添加远程库的别名\n- git push origin master 添加到远程库\n\n","source":"_posts/我的第一篇博客.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2023-01-23 11:58:35\ntags: Markdown\n---\n\n# Git常用命令\n\n### 本地库初始化：git init\n\n### 设置签名：\n\n##### git config --global user.name 设置全局用户名\n\n##### git config --global user.email 设置全局邮箱名\n\n###### 保存位置 ~/.gitconfig\n\n### 提交文件\n\n- git status 查看文件状态\n- git add 添加文件到暂存区\n- 1.git commit 提交文件到本地库 2.git commit -m \"描述内容\"\n- git remote add origin 添加远程库的别名\n- git push origin master 添加到远程库\n\n","slug":"我的第一篇博客","published":1,"updated":"2023-01-23T04:01:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9aw94n000ae8uf4pq67veh","content":"<h1>Git常用命令</h1>\n<h3 id=\"本地库初始化：git-init\">本地库初始化：git init</h3>\n<h3 id=\"设置签名：\">设置签名：</h3>\n<h5 id=\"git-config-global-user-name-设置全局用户名\">git config --global <a href=\"http://user.name\">user.name</a> 设置全局用户名</h5>\n<h5 id=\"git-config-global-user-email-设置全局邮箱名\">git config --global user.email 设置全局邮箱名</h5>\n<h6 id=\"保存位置-gitconfig\">保存位置 ~/.gitconfig</h6>\n<h3 id=\"提交文件\">提交文件</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>git status 查看文件状态</p>\n</li>\n<li class=\"lvl-2\">\n<p>git add 添加文件到暂存区</p>\n</li>\n<li class=\"lvl-2\">\n<p>1.git commit 提交文件到本地库 2.git commit -m “描述内容”</p>\n</li>\n<li class=\"lvl-2\">\n<p>git remote add origin 添加远程库的别名</p>\n</li>\n<li class=\"lvl-2\">\n<p>git push origin master 添加到远程库</p>\n</li>\n</ul>\n","site":{"data":{}},"cover":"/medias/cover/02.png","excerpt":"","more":"<h1>Git常用命令</h1>\n<h3 id=\"本地库初始化：git-init\">本地库初始化：git init</h3>\n<h3 id=\"设置签名：\">设置签名：</h3>\n<h5 id=\"git-config-global-user-name-设置全局用户名\">git config --global <a href=\"http://user.name\">user.name</a> 设置全局用户名</h5>\n<h5 id=\"git-config-global-user-email-设置全局邮箱名\">git config --global user.email 设置全局邮箱名</h5>\n<h6 id=\"保存位置-gitconfig\">保存位置 ~/.gitconfig</h6>\n<h3 id=\"提交文件\">提交文件</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>git status 查看文件状态</p>\n</li>\n<li class=\"lvl-2\">\n<p>git add 添加文件到暂存区</p>\n</li>\n<li class=\"lvl-2\">\n<p>1.git commit 提交文件到本地库 2.git commit -m “描述内容”</p>\n</li>\n<li class=\"lvl-2\">\n<p>git remote add origin 添加远程库的别名</p>\n</li>\n<li class=\"lvl-2\">\n<p>git push origin master 添加到远程库</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clg9aw94n000ae8uf4pq67veh","tag_id":"clg9aw94p000be8uf4knjd71y","_id":"clg9aw94u000ce8ufdyx6du5q"}],"Tag":[{"name":"Markdown","_id":"clg9aw94p000be8uf4knjd71y"}]}}