<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue2组件和脚手架</title>
      <link href="/Soiloquy-Blog.github.io/2023/04/10/Vue2%E7%BB%84%E4%BB%B6%E5%92%8C%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/Soiloquy-Blog.github.io/2023/04/10/Vue2%E7%BB%84%E4%BB%B6%E5%92%8C%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h1><p><strong>Vue使用组件的三大步骤：</strong></p><ol><li>定义组件（创建组件）</li><li>注册组件</li><li>使用组件（写组件标签）</li></ol><p><strong>如何定义一个组件：</strong></p><p>&#x3D;&#x3D;使用Vue.extend(options)创建，其中options和 new Vue（options）时传入的那个options几乎一样，但也有点区别：&#x3D;&#x3D;</p><ol><li>el不用写 —- 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器</li><li>data必须写成函数 —- 避免组件被复用时，数据存在引用关系</li></ol><p>备注：使用template可以配置组件结构</p><h3 id="注册组件："><a href="#注册组件：" class="headerlink" title="注册组件："></a>注册组件：</h3><ol><li>局部注册：靠new Vue的时候传入components选项</li><li>全局注册：靠Vue.component（’组件名’,组件）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 编写组件标签 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    // 第一步：创建school组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const school = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        data() &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            return &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                schoolName: &#x27;XXXX&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                address: &#x27;MMMMM&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    // 第一步：创建student组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const student = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        data() &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            return &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                studentName: &#x27;Tom&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                age: &#x27;19&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    // 第二步：注册组件（全局注册）</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    Vue.component(&#x27;student&#x27;, student);</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    // 创建vm</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        el: &#x27;#root&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 第二步：注册组件（局部注册）</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        components: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            school</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ol><li>关于组件名：</li><li>由一个单词组成：(1) 首字母小写   (2) 首字母大写</li><li>多个单词组成：(1) kebab-case命名：my-school   (2) CamelCase命名：Myschool <strong>(需要Vue脚手架)</strong></li><li>备注:<strong>可使用name配置项指定组件在开发者工具中呈现的名字</strong></li><li>关于组件标签：</li><li><school></school></li><li><school>(不使用脚手架时，<school>会导致后续组件不能渲染)</school></school></li><li>一个简写方式：<code>const school=Vue.extend(options)==&gt;const school = options</code></li></ol><h3 id="VueComponent构造函数"><a href="#VueComponent构造函数" class="headerlink" title="VueComponent构造函数"></a>VueComponent构造函数</h3><ol><li>school 组件本质是一个名为VueComponent的构造函数,且不是程序员定义的，是Vue.extend 生成的</li><li>在写<school></school>或<school>时，Vue解析时会帮我们创建school组件的实例对象，<strong>即执行：VueComponent（options）</strong></school></li><li><strong>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！</strong></li><li>关于this的指向：</li><li>组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【VueComponent实例对象】</li><li>new  Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【Vue实例对象】</li><li>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）</li></ol><p><strong>&#x3D;&#x3D;重要的内置关系：&#x3D;&#x3D;</strong><code>VueComponent.prototype.__proto__===Vue.prototype</code></p><p><img src="/Soiloquy-Blog.github.io/2023/04/10/Vue2%E7%BB%84%E4%BB%B6%E5%92%8C%E8%84%9A%E6%89%8B%E6%9E%B6/2023/04/10/Vue2%E7%BB%84%E4%BB%B6%E5%92%8C%E8%84%9A%E6%89%8B%E6%9E%B6/vm%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1.png"></p><p><strong>作用：让组件实例对象可以访问到Vue原型上的属性、方法</strong></p><h1 id="单文件组件："><a href="#单文件组件：" class="headerlink" title="单文件组件："></a>单文件组件：</h1><h3 id="脚手架安装："><a href="#脚手架安装：" class="headerlink" title="脚手架安装："></a>脚手架安装：</h3><p>第一步（仅第一次执行）：全局安装@vue&#x2F;cli：<code>npm install -g @vue/cli </code></p><p>第二步：切换到你要创建项目的目录，然后使用命令创建项目 <code>vue create xxxx </code></p><p>第三步：启动项目 <code>npm run serve </code></p><p>&#x3D;&#x3D;**备注： **&#x3D;&#x3D;</p><ol><li>如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry <a href="https://registry.npm.taobao.or/">https://registry.npm.taobao.or</a></li><li>Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc 配置， 请执行：<code>vue inspect &gt; output.js</code></li></ol><p>不同版本的Vue：</p><ol><li>vue.js与vun.runtime.xxx.js的区别:</li><li>vue.js是完整版的Vue，包含：核心功能 和 模板解析器</li><li>vun.runtime.xxx.js是运行版的Vue，只包含：核心功能</li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要render函数接收的createElement函数去指定具体的内容</li></ol><h3 id="模板项目的结构"><a href="#模板项目的结构" class="headerlink" title="模板项目的结构:"></a>模板项目的结构:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public </span><br><span class="line">│ ├── favicon.<span class="property">ico</span>: 页签图标 </span><br><span class="line">│ └── index.<span class="property">html</span>: 主页面 </span><br><span class="line">├── src </span><br><span class="line">│ ├── <span class="attr">assets</span>: 存放静态资源 </span><br><span class="line">│ │ └── logo.<span class="property">png</span> </span><br><span class="line">│ │── <span class="attr">component</span>: 存放组件 </span><br><span class="line">│ │ └── <span class="title class_">HelloWorld</span>.<span class="property">vue</span> </span><br><span class="line">│ │── <span class="title class_">App</span>.<span class="property">vue</span>: 汇总所有组件 </span><br><span class="line">│ │── main.<span class="property">js</span>: 入口文件 </span><br><span class="line">├── .<span class="property">gitignore</span>: git 版本管制忽略的配置 </span><br><span class="line">├── babel.<span class="property">config</span>.<span class="property">js</span>: babel 的配置文件 </span><br><span class="line">├── package.<span class="property">json</span>: 应用包配置文件 </span><br><span class="line">├── <span class="variable constant_">README</span>.<span class="property">md</span>: 应用描述文件 </span><br><span class="line">├── package-lock.<span class="property">json</span>：包版本控制文件</span><br></pre></td></tr></table></figure><h3 id="ref属性："><a href="#ref属性：" class="headerlink" title="ref属性："></a>ref属性：</h3><ol><li>被用来给元素或子组件注册引用消息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：</li><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;....&lt;/h1&gt;</code>或<code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol><h3 id="配置项props："><a href="#配置项props：" class="headerlink" title="配置项props："></a>配置项props：</h3><p><strong>功能：让组件接收外部传过来的数据</strong></p><ol><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：第一种方式（只接收）：<code>props：[&#39;name&#39;]</code>   第二种方式：(限制类型)：<code>props:&#123;name:String&#125;</code></p><p>第三种方式（限制类型、限制必要性、指定默认值）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>,<span class="comment">//类型</span></span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,<span class="comment">//必要性</span></span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;XXX&#x27;</span><span class="comment">//默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备注:props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据</strong></p></li></ol><h3 id="mixin（混入）："><a href="#mixin（混入）：" class="headerlink" title="mixin（混入）："></a>mixin（混入）：</h3><p><strong>&#x3D;&#x3D;功能：可以把多个组件共用的配置提取成一个混入对象&#x3D;&#x3D;</strong></p><p>使用方法：<strong>第一步：</strong>定义混合，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;....&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：</strong>使用混合，例如：</p><p>(1). 全局混入：<code>Vue.mixin(xxx)</code></p><p>(2). 局部混入：<code>mixin:[&#39;xxx&#39;]</code></p><h3 id="Vue插件："><a href="#Vue插件：" class="headerlink" title="Vue插件："></a>Vue插件：</h3><p><strong>&#x3D;&#x3D;插件本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。&#x3D;&#x3D;</strong></p><p><strong>定义插件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span>=<span class="keyword">function</span>(<span class="params">Vue,options</span>)&#123;</span><br><span class="line">    <span class="comment">//添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(...)</span><br><span class="line">               </span><br><span class="line">    <span class="comment">//添加全局指令</span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">directive</span>(...)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置全局混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(...)</span><br><span class="line">              </span><br><span class="line">    <span class="comment">//添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span>=xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用插件：<code>Vue.use(插件名)</code></strong></p><h1 id="组件化编码流程："><a href="#组件化编码流程：" class="headerlink" title="组件化编码流程："></a>组件化编码流程：</h1><ol><li>拆分静态组件：组件要按功能点拆分，命名不能和html元素冲突</li><li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用还是一些组件在用</li><li>一个组件在用：放在组件自身即可</li><li>一些组件在用：放在他们共同的父组件上（&#x3D;&#x3D;状态提升&#x3D;&#x3D;）</li><li>实现交互：从绑定事件开始</li></ol><p><strong>props适用于：</strong></p><ol><li>父组件&#x3D;&#x3D;&gt;子组件 通信</li><li>子组件&#x3D;&#x3D;&gt;父组件 通信(要求父给子一个函数)</li></ol><h1 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h1><p><strong>浏览器端通过<code>Window.seesionStorage</code>和<code>Window.localStorage</code>属性来实现本地存储机制</strong></p><p>&#x3D;&#x3D;相关API&#x3D;&#x3D;</p><ol><li><code>xxxxStorage.setItem(&#39;key&#39;，&#39;value&#39;)</code>;  接收一个键值对作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</li><li>xxxxStorage.getItem(‘key’); 接收一个键名作为参数，返回键名对应的值</li><li>xxxxStorage.removeItem(‘key’); 该方法接收一个键名作为参数，并把键名从该存储中删除</li><li>xxxxStorage.clear()  该方法会清空存储中的所有数据</li></ol><p>&#x3D;&#x3D;备注：&#x3D;&#x3D;<code>xxxxStorage.getItem(&#39;key&#39;)</code>;如果对应的value获取不到，那么getItem的返回值是null</p><h1 id="组件的自定义事件："><a href="#组件的自定义事件：" class="headerlink" title="组件的自定义事件："></a>组件的自定义事件：</h1><ol><li><p>一种组件间通信的方式，适用于：**&#x3D;&#x3D;子组件—–&gt;&gt;父组件&#x3D;&#x3D;**</p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（&#x3D;&#x3D;事件的回调在A中&#x3D;&#x3D;）</p></li><li><p>绑定自定义事件：</p><ol><li>第一种方式：在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>或<code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></li><li>第二种方式，在父组件中：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">    .....</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>若想让自定义事件只触发一次，可以使用once修饰符，或<code>$once</code>方法</li></ol></li><li><p>触发自定义事件:<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p>解绑自定义事件:<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以<span style="color:red">绑定原生DOM事件，需要使用<code>native</code>修饰符</span></p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调函数)</code>绑定自定义事件时,回调**&#x3D;&#x3D;要么配置在methods中，要么用箭头函数&#x3D;&#x3D;**，否则this指向会出问题！</p></li></ol><h1 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h1><ol><li>一种组件间通信的方式，适用于<strong>任意组件间通信</strong></li><li>安装全局事件总线：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span>=<span class="variable language_">this</span><span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用事件总线:</p><ol><li>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件,<strong>事件的回调留在A组件自身</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;.......&#125;</span><br><span class="line">&#125;</span><br><span class="line">.........</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​2. 提供数据：<code>this.$bus,$emit(&#39;xxxx&#39;,数据)</code></p></li><li><p>最好在<code>beforeDestroy</code>钩子中用<code>$off</code>去<span style="color:red">解绑当前组件所用的事件</span></p></li></ol><h1 id="消息订阅与发布-pubsub"><a href="#消息订阅与发布-pubsub" class="headerlink" title="消息订阅与发布(pubsub)"></a>消息订阅与发布(pubsub)</h1><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span></p></li><li><p>所有步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入：<code>import pubsub form &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<strong>回调留在A组件自身</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;.....&#125;</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span>=pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)<span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></li><li>最好在<code>beforeDestroy</code>钩子中，用<code>pubsub.unsubscribe(pid)</code>去<span style="color:red">取消订阅</span></li></ol></li></ol></li></ol><h3 id="补充：nextTick"><a href="#补充：nextTick" class="headerlink" title="补充：nextTick"></a>补充：nextTick</h3><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次DOM更新结束后执行其指定的回调</li><li>什么时候用：当改变数据后，要基于更新后的新<code>DOM</code>进行某些操作时，要在<code>nextTick</code>所指定的回调函数中执行</li></ol><h1 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h1><p><strong>作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名</strong></p><h3 id="写法："><a href="#写法：" class="headerlink" title="写法："></a>写法：</h3><pre><code> 1. 准备好样式：  - 元素进入的样式：    1. v-enter：进入的起点    2. v-enter-active：进入过程中    3. v-enter-to：进入的终点  - 元素离开的样式：    1. v-leave：离开的起点    2. v-leave-active：离开过程中    3. v-leave-to：离开的终点 2. 使用`&lt;transition&gt;`包裹要过度的元素,并配置name属性</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=<span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>备注:若有多个元素需要过度,则需要使用:<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</li></ol><h1 id="Vue脚手架配置代理"><a href="#Vue脚手架配置代理" class="headerlink" title="Vue脚手架配置代理"></a>Vue脚手架配置代理</h1><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>在<code>vue.config.js</code>中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServe</span>:&#123;</span><br><span class="line"><span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明:</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方法：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</li></ol><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>编写<code>vue.config.js</code>配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">proxy</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;/api1&#x27;</span>:&#123;<span class="comment">//匹配所有以&#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">                <span class="attr">target</span>:<span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">//代理目标的基础路径</span></span><br><span class="line">                <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api1&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;<span class="comment">//将/api1替换为空字符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">proxy</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;/api2&#x27;</span>:&#123;<span class="comment">//匹配所有以&#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">                <span class="attr">target</span>:<span class="string">&#x27;http://localhost:5050&#x27;</span>,<span class="comment">//代理目标的基础路径</span></span><br><span class="line">                <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api2&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;<span class="comment">//将/api1替换为空字符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">changeOrigin设置为true时,服务器收到的请求头中的host为:localhost:5000</span></span><br><span class="line"><span class="comment">changeOrigin设置为false时,服务器收到的请求头中的host为:localhost:8080</span></span><br><span class="line"><span class="comment">changeOrigin默认值是true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/Soiloquy-Blog.github.io/2023/04/10/jQuery/"/>
      <url>/Soiloquy-Blog.github.io/2023/04/10/jQuery/</url>
      
        <content type="html"><![CDATA[<h1>jQuery 页面效果</h1><h2 id="文档加载事件：">文档加载事件：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">// 开始写 jQuery 代码...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-选择器">jQuery 选择器</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>元素选择器：</strong>$(selector).action()</p></li><li class="lvl-2"><p><strong>#id 选择器:</strong>$(“#test”)</p></li><li class="lvl-2"><p><strong>.class 选择器:</strong>$(“.test”)</p></li><li class="lvl-2"><p><strong>more:</strong></p></li></ul><table><thead><tr><th>$(“*”)</th><th>选取所有元素</th></tr></thead><tbody><tr><td>$(this)</td><td>选取当前 HTML 元素</td></tr><tr><td>$(“p.intro”)</td><td>选取 class 为 intro 的 <p> 元素</p></td></tr><tr><td>$(“p:first”)</td><td>选取第一个 <p> 元素</p></td></tr><tr><td>$(“ul li:first”)</td><td>选取第一个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td>$(“ul li:first-child”)</td><td>选取每个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td>$(“[href]”)</td><td>选取带有 href 属性的元素</td></tr><tr><td>$(“tr:even”)</td><td>选取偶数位置的 </td></tr><tr> 元素</tr><tr><td>$(“tr:odd”)</td><td>选取奇数位置的 </td></tr><tr> 元素</tr><tr><td>$(“:button”)</td><td>选取所有 type=“button” 的 <input> 元素 和 <button> 元素</button></td></tr></tbody></table><h2 id="jQuery-事件">jQuery 事件</h2><table><thead><tr><th style="text-align:left">鼠标事件</th><th style="text-align:left">键盘事件</th><th style="text-align:left">表单事件</th><th style="text-align:left">文档/窗口事件</th></tr></thead><tbody><tr><td style="text-align:left">click</td><td style="text-align:left">keypress</td><td style="text-align:left">submit</td><td style="text-align:left">load</td></tr><tr><td style="text-align:left">dblclick  双击元素</td><td style="text-align:left">keydown</td><td style="text-align:left">change</td><td style="text-align:left">resize</td></tr><tr><td style="text-align:left">mouseenter</td><td style="text-align:left">keyup</td><td style="text-align:left">focus</td><td style="text-align:left">scroll</td></tr><tr><td style="text-align:left">mouseleave</td><td style="text-align:left"></td><td style="text-align:left">blur</td><td style="text-align:left">unload</td></tr><tr><td style="text-align:left">hover</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><h2 id="jQuery隐藏和显示">jQuery隐藏和显示</h2><p>element.hide() 和 element.show()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#hide&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">hide</span>();<span class="comment">//隐藏</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">$(<span class="string">&quot;#show&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">show</span>();<span class="comment">//显示</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery淡入淡出">jQuery淡入淡出</h2><p>实现元素的淡入淡出效果的方法：</p><ul class="lvl-0"><li class="lvl-2"><p>fadeIn()</p></li><li class="lvl-2"><p>fadeOut()</p></li><li class="lvl-2"><p>fadeToggle()</p></li><li class="lvl-2"><p>fadeTo()</p></li></ul><h3 id="jQuery-fadeIn-方法：">jQuery fadeIn() 方法：</h3><p><mark>jQuery fadeIn() 用于淡入已隐藏的元素</mark></p><p><strong>语法:</strong>$(<em>selector</em>).fadeIn(<em>speed,callback</em>);</p><p>speed参数：“slow”、“fast” 或毫秒。</p><p>callback 参数是 fading 完成后所执行的函数名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeIn</span>();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeIn</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeIn</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery-fadeOut-方法">jQuery fadeOut() 方法</h3><p><mark>jQuery fadeOut() 方法用于淡出可见元素。</mark></p><p><strong>语法:</strong>$(<em>selector</em>).fadeOut(<em>speed,callback</em>);</p><p>参数同上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeOut</span>();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeOut</span>(<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery-fadeToggle-方法">jQuery fadeToggle() 方法</h3><p><mark>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</mark></p><p>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。</p><p>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p><p><strong>语法:</strong>$(<em>selector</em>).fadeToggle(<em>speed,callback</em>);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeToggle</span>();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery-fadeTo-方法">jQuery fadeTo() 方法</h3><p><mark>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</mark></p><p><strong>语法:</strong>$(<em>selector</em>).fadeTo(<em>speed,opacity,callback</em>);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeTo</span>(<span class="string">&quot;slow&quot;</span>,<span class="number">0.15</span>);</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeTo</span>(<span class="string">&quot;slow&quot;</span>,<span class="number">0.4</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeTo</span>(<span class="string">&quot;slow&quot;</span>,<span class="number">0.7</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-滑动效果">jQuery 滑动效果</h2><ul class="lvl-0"><li class="lvl-2"><p>slideDown()</p></li><li class="lvl-2"><p>slideUp()</p></li><li class="lvl-2"><p>slideToggle()</p></li></ul><p>speed参数：“slow”、“fast” 或毫秒。</p><p>callback参数：是 fading 完成后所执行的函数名称。</p><h3 id="jQuery-slideToggle-方法">jQuery slideToggle() 方法</h3><p>jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#flip&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-animate-方法">jQuery   animate() 方法</h2><p><strong>语法：</strong>$(<em>selector</em>).animate({<em>params</em>}<em>,speed,callback</em>);</p><p>参数：必需的 params 参数定义形成动画的 CSS 属性。<strong>可操作多个属性</strong></p><p>可选的 speed 参数规定效果的时长。它可以取以下值：“slow”、“fast” 或毫秒。</p><p>可选的 callback 参数是动画完成后所执行的函数名称。</p><h3 id="animate-使用相对值">animate() - 使用相对值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>:<span class="string">&#x27;250px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="string">&#x27;+=150px&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>:<span class="string">&#x27;+=150px&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);<span class="comment">//相对于元素的当前值移动</span></span><br></pre></td></tr></table></figure><h3 id="animate-使用预定义的值">animate() - 使用预定义的值</h3><p>“show”、“hide” 或 “toggle”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">    <span class="attr">height</span>:<span class="string">&#x27;toggle&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="animate-使用队列功能">animate() - 使用队列功能</h3><p>Query 会创建包含这些方法调用的&quot;内部&quot;队列。然后逐一运行这些 animate 调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> div=$(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  div.<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&#x27;100px&#x27;</span>&#125;,<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  div.<span class="title function_">animate</span>(&#123;<span class="attr">fontSize</span>:<span class="string">&#x27;3em&#x27;</span>&#125;,<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><mark><strong>补充：stop（）停止动画方法：一般用于清除动画队列</strong></mark></p><h1>jQuery DOM 操作</h1><h2 id="jQuery获得元素内容-text-、html-、val-以及attr">jQuery获得元素内容 - text()、html()、val()以及attr()</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>text()</strong> - 设置或返回所选元素的<strong>文本内容</strong></p></li><li class="lvl-2"><p><strong>html()</strong> - 设置或返回所选元素的<strong>内容（包括 HTML 标签）</strong></p></li><li class="lvl-2"><p><strong>val()</strong> - 设置或返回<strong>表单字段的值</strong></p></li><li class="lvl-2"><p><strong>attr()</strong> 方法用于获取<strong>属性值</strong>。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Text: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">text</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;HTML: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">html</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;值为: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>($(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery设置元素内容-text-、html-、val-以及attr">jQuery设置元素内容 - text()、html()、val()以及attr()</h2><ul class="lvl-0"><li class="lvl-2"><p>text() - 设置或返回所选元素的<strong>文本内容</strong></p></li><li class="lvl-2"><p>html() - 设置或返回所选元素的<strong>内容（包括 HTML 标记）</strong></p></li><li class="lvl-2"><p>val() - 设置或返回<strong>表单字段的值</strong></p></li><li class="lvl-2"><p>attr() 方法也用于设置/改变属性值。<strong>允许同时设置多个属性</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(&#123;</span><br><span class="line">        <span class="string">&quot;href&quot;</span> : <span class="string">&quot;http://www.runoob.com/jquery&quot;</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span> : <span class="string">&quot;jQuery 教程&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue2核心</title>
      <link href="/Soiloquy-Blog.github.io/2023/03/27/Vue2%E6%A0%B8%E5%BF%83/"/>
      <url>/Soiloquy-Blog.github.io/2023/03/27/Vue2%E6%A0%B8%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1>初识Vue</h1><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=5&amp;share_source=copy_web&amp;vd_source=b57f06a84c65383f958c6198780152f6">尚硅谷Vue教程</a></p><p>1.想让vue工作，必须创建一个Vue实例，且要传入一个配置对象</p><p>2.Vue模板：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,<span class="comment">//el用于指定当前Vue实例为那个容器服务，通常用css选择器字符串</span></span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>3.Vue实例与容器是一一对应的</p><p>4.<code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</p><p><strong>注意区分</strong>：js表达式和js代码（语句）</p><ul class="lvl-0"><li class="lvl-4"><p>表达式：一个表达式会产生一个值，可以放在任何地方：</p><ul class="lvl-2"><li class="lvl-6">a+b</li><li class="lvl-6">demo(1)</li></ul></li><li class="lvl-4"><p>js代码（语句）</p><ul class="lvl-2"><li class="lvl-6">if语句</li></ul></li></ul><h1>Vue模板语法</h1><ul class="lvl-0"><li class="lvl-2"><p>插值语法：</p><ul class="lvl-2"><li class="lvl-4">功能：用于解析标签体内容</li><li class="lvl-4">写法：<code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</li></ul></li><li class="lvl-2"><p>指令语法：</p><ul class="lvl-2"><li class="lvl-4">功能：用于解析标签（包括：标签属性，标签体内容，绑定事件 等等）</li><li class="lvl-4">例子：<code>v-bind:href=&quot;xxx&quot;</code>  或  简写为 <code> :href=&quot;xxx&quot;</code>,  xxx同样要写js表达式，且可以自动读取到data中的所有属性</li></ul></li></ul><p>v-bind缩写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 动态参数的缩写 (<span class="number">2.6</span><span class="number">.0</span>+) --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>**注：**Vue中有许多指令，且形式都是：v-xxxx</p><h1>Vue数据绑定</h1><p><strong>Vue有两种绑定的方式：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>单向绑定（v-bind）：数据只能从data流向页面</p></li><li class="lvl-2"><p>双向绑定（v-model）：数据不仅可以从data流向页面，还可以从页面流向data</p></li></ul><p><strong>注意：</strong></p><p>​1.双向绑定（v-model）一般都应用在表单类元素上（如：input、select）</p><p>​2.v-model：value 可以简写为v-model，因为v-model默认收集的就是value值</p><h1>el和data的两种写法</h1><p><strong>el的两种写法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="comment">//el: &#x27;#root&#x27;,//第一种写法</span></span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">v.$mount(<span class="string">&#x27;#root&#x27;</span>)<span class="comment">//第二种写法</span></span><br></pre></td></tr></table></figure><p><strong>data的两种写法：</strong></p><p><strong>目前两种写法都行，到组件时，data必须使用函数式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="comment">//第一种写法：对象式</span></span><br><span class="line">        <span class="comment">/*data: &#123;</span></span><br><span class="line"><span class="comment">            name: &#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    <span class="comment">//第二种写法：函数式</span></span><br><span class="line">    <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//此处的this是Vue实例对象</span></span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><strong>一个重要原则：</strong></p><p>​由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不是Vue实例了</p><p><strong><mark>观察发现：</mark></strong></p><p>​1.data中的所有的属性，最后都出现在了vm身上</p><p>​2. vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用</p><h1>事件处理</h1><h3 id="事件的基本使用（点击事件）：">事件的基本使用（点击事件）：</h3><ol><li class="lvl-3"><p>使用v-on：xxx或 @xxx 绑定事件，其中xxx是事件名</p><ol start="2"><li class="lvl-6">事件的回调需要配置在methods对象中，最终会在vm上</li><li class="lvl-6">methods中配置的函数，不需要箭头函数！否则this不是vm而是windows</li><li class="lvl-6">methods中配置的函数，都是被Vue管理的函数，this的指向是vm 或组件实例对象</li><li class="lvl-6">@click=“demo” 和 @click = “demo($event)” 效果一致，但后者可以传参</li></ol></li></ol><h3 id="Vue中的事件修饰符：">Vue中的事件修饰符：</h3><ol><li class="lvl-3"><p><mark><strong>prevent：阻止默认事件（常用）</strong></mark></p></li><li class="lvl-3"><p><mark><strong>stop：阻止事件冒泡（常用）</strong></mark></p></li><li class="lvl-3"><p><mark><strong>once：事件只触发一次（常用）</strong></mark></p></li><li class="lvl-3"><p>capture：使用事件的捕获模式</p></li><li class="lvl-3"><p>self：只有event.target是当前操作的元素时才触发事件</p></li><li class="lvl-3"><p>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</p></li></ol><h3 id="键盘事件：">键盘事件：</h3><ol><li class="lvl-3"><p>Vue中常用的按键别名：</p><ol><li class="lvl-8">回车=&gt;enter</li><li class="lvl-8">删除=&gt;delete（捕获&quot;删除&quot;和&quot;退格&quot;键）</li><li class="lvl-7">退出=&gt;esc</li><li class="lvl-7">空格=&gt;space</li><li class="lvl-7">换行=&gt;tab（特殊，必须配合keydown去使用）</li><li class="lvl-7">上=&gt;up，下=&gt;down，左=&gt;left，右=&gt;right</li></ol></li><li class="lvl-3"><p>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但要注意转为kebab-case（短横线命名）</p></li><li class="lvl-3"><p>系统修饰键（用法特殊）：ctrl、alt、shift、meta</p><ol><li class="lvl-7">配合keyup使用：按下修饰键的同时，在按下其他键，然后释放其他键，事件才被触发</li><li class="lvl-7">配合keydown使用：正常触发事件</li></ol></li><li class="lvl-3"><p>Vue.config.keyCodes.自定义键名=键码，可以自定义按键别名</p></li></ol><h1>Vue计算属性</h1><ol><li class="lvl-3"><p>定义：通过计算来得到要用的属性</p></li><li class="lvl-3"><p><strong>原理：底层借助了Object.defineproperty 方法提供的 getter 和 setter</strong></p></li><li class="lvl-3"><p><strong>get 函数什么时候执行</strong></p><ol><li class="lvl-7"><strong><mark>初次读取时会执行一次</mark></strong></li><li class="lvl-7"><mark><strong>当依赖的数据发生改变时会被再次调用</strong></mark></li></ol></li><li class="lvl-3"><p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</p></li><li class="lvl-3"><p>备注：</p><ol><li class="lvl-7">计算属性最终会出现在vm上，直接读取使用即可</li><li class="lvl-7">如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">            <span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">computed</span>: &#123;</span><br><span class="line">            <span class="attr">fullName</span>: &#123;</span><br><span class="line">                <span class="comment">//get有什么作用：当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span><br><span class="line">                <span class="comment">//get什么时候被调用：1. 初次读取fullName时  2. 所依赖的数据发生变化时</span></span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="comment">// 此处的this是vm</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//set什么时候被调用：当fullNmae被修改时</span></span><br><span class="line">                <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">                    <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><mark><strong>当只有get时的简写：</strong></mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">            <span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">computed</span>: &#123;</span><br><span class="line">           <span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1>Vue监视属性</h1><h3 id="监视属性watch：">监视属性watch：</h3><ol><li class="lvl-3"><p>当被监视的属性变化时，回调函数自动调用，进行相关操作</p></li><li class="lvl-3"><p>监视的属性必须存在，才能进行监视！！</p></li><li class="lvl-3"><p>监视的两种写法：</p><ol><li class="lvl-7">new Vue 时传入watch配置</li><li class="lvl-7">通过vm.$watch监视</li></ol></li></ol><p><strong>第一种写法:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">            <span class="attr">firstName</span>: &#123;</span><br><span class="line">                <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">                <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">//什么时候调用：当被监视的属性发生改变时</span></span><br><span class="line">                <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>第二种写法:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;firstName&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//什么时候调用：当被监视的属性发生改变时</span></span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="深度监视：">深度监视：</h3><ol><li class="lvl-3"><p>Vue中的watch默认不监测对象内部值的改变（一层）</p></li><li class="lvl-3"><p>配置deep：true可以监测对象内部值的改变（多层）</p></li></ol><p><mark><strong>注意：</strong></mark></p><ol><li class="lvl-3"><p><strong>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</strong></p></li><li class="lvl-3"><p>使用watch时可根据数据的具体结构，决定是否采用深度监视</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">//监视多级结构中某个属性的变化</span></span><br><span class="line">    <span class="string">&#x27;munber.a&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">//监视多级结构中某个属性的变化</span></span><br><span class="line">    <span class="attr">munber</span>: &#123;</span><br><span class="line">        <span class="attr">deep</span>:ture,</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;被监视了&#x27;</span>, newValue, oldValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="计算属性与监视属性的区别：">计算属性与监视属性的区别：</h2><ol><li class="lvl-3"><p>computed能完成的功能，watch都可以完成</p></li><li class="lvl-3"><p>watch能完成的功能，computed不一定能完成（如：watch可以进行异步操作）</p></li></ol><p><mark><strong>两个重要的原则：</strong></mark></p><ol><li class="lvl-3"><p>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象</p></li><li class="lvl-3"><p>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm 或 组件实例对象</p></li></ol><h1>Vue绑定样式</h1><h3 id="绑定class样式：">绑定class样式：</h3><ol><li class="lvl-3"><p>绑定class样式–字符串写法，适用于：样式的类名不确定，需要动态指定 <code>:class=&quot;mood&quot;</code></p></li><li class="lvl-3"><p>绑定class样式–数组写法，适用于：样式的个数不确定，名字也不确定 <code>:class=&quot;classArr&quot;</code></p></li><li class="lvl-3"><p>绑定class样式–对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 <code>:class=&quot;classObj&quot;</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--数组写法，适用于：样式的个数不确定，名字也不确定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式的个数确定，名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;XXX&#x27;,</span><br><span class="line">            mood: &#x27;normal&#x27;,</span><br><span class="line">            classArr: [&#x27;a1&#x27;, &#x27;a2&#x27;, &#x27;a3&#x27;],</span><br><span class="line">            classObj: &#123;</span><br><span class="line">                a1: false,</span><br><span class="line">                a2: false,</span><br><span class="line">                a3: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="绑定style样式（较少用）：">绑定style样式（较少用）：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;XXX&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">styleObj</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1>Vue渲染</h1><h3 id="条件渲染：">条件渲染：</h3><ol><li class="lvl-3"><p><strong>v-if 写法：</strong></p><ol><li class="lvl-7">v-if=“表达式”</li><li class="lvl-7">v-else-if=“表达式”</li><li class="lvl-7">v-else=“表达式”</li></ol></li><li class="lvl-3"><p>适用于：切换频率较低的场景</p></li><li class="lvl-3"><p>特点：不展示的DOM元素直接被移除</p></li><li class="lvl-3"><p>**注意：**v-if可以和 v-else-if、v-else 一起使用，但要求结构不能被打断</p></li><li class="lvl-3"><p>**v-show写法：**v-show=“表达式”</p></li><li class="lvl-3"><p>适用于：切换频率较高的场景</p></li><li class="lvl-3"><p>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p></li></ol><p>**<mark>备注：</mark>**使用v-if 的时，元素可能无法获取到，而使用v-show一定可以获取到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v-if与template的配合使用   </span></span><br><span class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">&quot;n==1&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="列表渲染：">列表渲染：</h3><p><strong>v-for指令：</strong></p><ol><li class="lvl-3"><p>用于展示列表数据</p></li><li class="lvl-3"><p>语法：v-for= “(item，index) in xxx”    <strong>:key=“index”</strong></p></li><li class="lvl-3"><p>可遍历：数组、对象、字符串（很少用）、指定次数（很少用）</p></li></ol><p><strong><mark>react、vue中的key有什么作用？</mark></strong></p><ol><li class="lvl-3"><p>虚拟DOM中的key的作用：key是虚拟DOM对象的标识，当数据发生变化时，<strong>Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较</strong>，比较规则如下：</p></li><li class="lvl-3"><p>对比规则：</p><ol><li class="lvl-6">旧虚拟DOM中找到了与新虚拟DOM相同的key：<ol><li class="lvl-9">若虚拟DOM中的内容没变，直接使用之前的真实DOM</li><li class="lvl-9">若虚拟DOM中的内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ol></li><li class="lvl-6">旧虚拟DOM中未找到与新虚拟DOM相同的key，则直接创建新的真实DOM，随后渲染到页面中</li></ol></li><li class="lvl-3"><p><strong>用index作为key可能会引发的问题：</strong></p><ol><li class="lvl-6">若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没有必要的真实DOM的更新==&gt;页面效果没问题,但效率低</li><li class="lvl-6">如果结构中还包括输入类的DOM：会产生错误的更新==&gt;页面有问题</li></ol></li><li class="lvl-3"><p>开发中如何选择key？</p><ol><li class="lvl-6">最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号等</li><li class="lvl-6">如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</li></ol></li></ol><h1>Vue监视数据的原理</h1><ol><li class="lvl-3"><p>vue会监视data中所有层次的数据</p></li><li class="lvl-3"><p>如何监测对象中的数据：<strong><mark>通过setter实现监视，且要在new Vue时就传入要监测的数据</mark></strong></p></li><li class="lvl-5"><p>对象中后追加的属性，Vue默认不做响应式处理</p></li><li class="lvl-5"><p>如需给后添加的属性做响应式，请使用如下API：<br>1. <strong>Vue.set(target，propertyName/index，value)</strong><br>2. <strong>vm.$set(target，propertyName/index，value)</strong></p></li><li class="lvl-3"><p>如何监测数组中的数据：通过包裹数组更新元素的方法实现：</p><ol><li class="lvl-6">调用原生对应的方法对数据进行更新</li><li class="lvl-6">重新解析模板，进行更新页面</li></ol></li><li class="lvl-3"><p>在Vue修改数组中的某个元素一定要有如下方法：</p><ol><li class="lvl-6">使用这些API：push()  pop()   shift()  unshift()  splice()  sort()  reverse()</li><li class="lvl-6">Vue.set()  或  vm.$set()</li></ol></li></ol><p><strong><mark>特别注意：Vue.set（）和vm.$set（）不能给vm或vm的根数据对象添加属性</mark></strong></p><h1>Vue收集表单数据</h1><ol><li class="lvl-3"><p><code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值</p></li><li class="lvl-3"><p><code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值</p></li><li class="lvl-3"><p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p></li><li class="lvl-5"><p>没有配置input的value属性，那么收集的就是checked（布尔值）</p></li><li class="lvl-5"><p>配置input的value属性：<br>1. v-model的初始值是非数组，那么收集的就是checked（布尔值）<br>2. v-model的初始值是数组，那么收集的就是value组成的数组</p></li></ol><p><strong><mark>备注：v-model的三个修饰符：</mark></strong></p><ol><li class="lvl-3"><p>lazy：失去焦点在收集数据</p></li><li class="lvl-3"><p>number：输入字符串转为有效的数字</p></li><li class="lvl-3"><p>trim：输入首尾空格过滤</p></li></ol><h1>Vue过滤器</h1><p>过滤器定义：对要显示的数据进行特定格式化后再显示（适用于一些简单的逻辑处理）</p><p>语法：</p><ol><li class="lvl-3"><p>注册过滤器：<code>Vue.filter（name，callback）</code>或<code>  new Vue&#123;filter：&#123;&#125;&#125;</code></p></li><li class="lvl-3"><p>使用过滤器：<code>&#123;&#123;xxx | 过滤器名&#125;&#125;</code>  或  <code>v-bind</code>：属性=“xxx | 过滤器名”</p></li></ol><p><strong>备注：</strong></p><ol><li class="lvl-3"><p>过滤器也可以接收额外的参数，多个过滤器也可以串联</p></li><li class="lvl-3"><p>并没有改变原本的数据，是产生新的对应的数据</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局过滤器 </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;XXX&#x27;</span>,</span><br><span class="line">        <span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">        <span class="attr">classArr</span>: [<span class="string">&#x27;a1&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;a3&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 局部过滤器</span></span><br><span class="line">    <span class="attr">filters</span>: &#123;</span><br><span class="line">        <span class="title function_">timeFormater</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>Vue指令</h1><h3 id="我们之前学过的指令：">我们之前学过的指令：</h3><ol><li class="lvl-3"><p>v-bind：单向绑定解析表达式，可简写为:xxx</p></li><li class="lvl-3"><p>v-model：双向数据绑定</p></li><li class="lvl-3"><p>v-for：遍历数组/对象/字符串</p></li><li class="lvl-3"><p>v-on：绑定事件监听，可简写为@</p></li><li class="lvl-3"><p>v-if：条件渲染：（动态控制节点是否存在）</p></li><li class="lvl-3"><p>v-else：条件渲染：（动态控制节点是否存在）</p></li><li class="lvl-3"><p>v-show：条件渲染：（动态控制节点是否展示）</p></li></ol><h3 id="v-test和v-html指令：">v-test和v-html指令：</h3><p><strong>v-test指令：</strong></p><ol><li class="lvl-3"><p>作用：向其所在的节点中渲染文本内容</p></li><li class="lvl-3"><p>与插值语法的区别：v-test会替换掉文本内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</p></li></ol><p><strong>v-htnl指令：</strong></p><ol><li class="lvl-3"><p>作用：向指令节点中渲染包含html结构的内容</p></li><li class="lvl-3"><p>与插值语法的区别：</p></li><li class="lvl-5"><p>v-html会替换掉节点中所有的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</p></li><li class="lvl-5"><p>v-html可以识别html结构</p></li><li class="lvl-3"><p>严重注意：<strong>v-html有安全性问题！！！</strong></p></li><li class="lvl-5"><p>在网站上动态渲染任意HTML是非常危险的，容易导致<strong>XSS</strong>攻击</p></li><li class="lvl-5"><p>一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p></li></ol><h3 id="v-once指令：">v-once指令：</h3><ol><li class="lvl-3"><p>v-once所在节点在初次动态渲染后，就视为静态内容</p></li><li class="lvl-3"><p>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</p></li></ol><h3 id="v-pre指令：">v-pre指令：</h3><ol><li class="lvl-3"><p>跳过其所在节点的编译过程</p></li><li class="lvl-3"><p>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AJAX学习笔记</title>
      <link href="/Soiloquy-Blog.github.io/2023/01/30/AJAX%E7%AC%94%E8%AE%B0/"/>
      <url>/Soiloquy-Blog.github.io/2023/01/30/AJAX%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>ajax学习笔记</h1><p><mark><a href="https://www.bilibili.com/video/BV1WC4y1b78y">课程地址</a></mark></p><h2 id="第一章：-原生Ajax">第一章： 原生Ajax</h2><h3 id="1-1-Ajax简介">1.1 Ajax简介</h3><ul class="lvl-0"><li class="lvl-2"><p>Ajax全称为Asynchronous Javascript And XML，即异步JS和XML</p></li><li class="lvl-2"><p>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></p></li><li class="lvl-2"><p>AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p></li></ul><h3 id="1-2-XML简介">1.2 XML简介</h3><ul class="lvl-0"><li class="lvl-2"><p>XML：可扩展标记语言</p></li><li class="lvl-2"><p>XML：被设计用来传输和存储数据</p></li><li class="lvl-2"><p>XML和HTML类似，不同点：<strong>HTML中都是预定义标签，XML中没有预定义标签，全是自定义标签</strong>，用来表示一些数据</p></li></ul><p><code>//用XML表示一个学生数据 &lt;student&gt; &lt;name&gt;abc&lt;/name&gt;     &lt;age&gt;18&lt;/age&gt;     &lt;gender&gt;男&lt;/gender&gt; &lt;/student&gt;</code></p><ul class="lvl-0"><li class="lvl-2"><p>现在已被JSON取代</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;abc&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;18&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;男&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-AJAX-的特点">1.3 AJAX 的特点</h3><h4 id="1-3-1-AJAX的优点">1.3.1 AJAX的优点</h4><ol><li class="lvl-3"><p>可以无刷新页面与服务端进行通信</p></li><li class="lvl-3"><p>允许你根据用户事件来更新部分页面内容</p></li></ol><h4 id="1-3-2-AJAX-的缺点">1.3.2 AJAX 的缺点</h4><ol><li class="lvl-3"><p>没有浏览历史，不能回退</p></li><li class="lvl-3"><p>存在跨域问题（同源）</p></li><li class="lvl-3"><p>SEO不友好（爬虫获取不到信息）</p></li></ol><h3 id="1-4-HTTP协议-超文本传输协议">1.4 HTTP协议[超文本传输协议]</h3><h4 id="1-4-1-HTTP请求报文">1.4.1 HTTP请求报文</h4><p>请求由以下元素组成：（摘自MDN）</p><ul class="lvl-0"><li class="lvl-2"><p>一个 HTTP 的请求<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods">方法</a>，经常是由一个动词像 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 或者一个名词像 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS"><code>OPTIONS</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD"><code>HEAD</code></a> 来定义客户端的动作行为。通常客户端的操作都是获取资源（GET 方法）或者发送 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms">HTML 表单</a>（POST 方法），虽然在一些情况下也会有其他操作。</p></li><li class="lvl-2"><p>要获取的资源的路径，通常是上下文中就很明显的元素资源的 URL，它没有 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol">protocol</a>（<code>http://</code>），<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Domain">domain</a>（<code>developer.mozilla.org</code>），或是 TCP 的 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Port">port (en-US)</a>（HTTP 一般在 80 端口）。</p></li><li class="lvl-2"><p>HTTP 协议版本号。</p></li><li class="lvl-2"><p>为服务端表达其他信息的可选<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">标头</a>。</p></li><li class="lvl-2"><p>对于一些像 POST 这样的方法，报文的主体（body）就包含了发送的资源，这与响应报文的主体类似。</p></li></ul><h4 id="1-4-1HTTP响应报文">1.4.1HTTP响应报文</h4><p>响应报文包含了下面的元素：（摘自MDN）</p><ul class="lvl-0"><li class="lvl-2"><p>HTTP 协议版本号。</p></li><li class="lvl-2"><p>一个状态码（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">状态码（status code）</a>），来告知对应请求执行成功或失败，以及失败的原因。</p></li><li class="lvl-2"><p>一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。</p></li><li class="lvl-2"><p>HTTP <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">标头</a>，与请求标头类似。</p></li><li class="lvl-2"><p>可选项，比起请求报文，响应报文中更常见地包含获取资源的主体。</p></li></ul><h3 id="express基本使用">express基本使用</h3><p>Express：高度包容、快速而极简的 <a href="http://nodejs.org/">Node.js</a> Web 框架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入express</span></span><br><span class="line"><span class="keyword">const</span> &#123; request, response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建引用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建路由规则</span></span><br><span class="line"><span class="comment">//request是对请求报文的封装</span></span><br><span class="line"><span class="comment">//response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已启动，8000端口监听中。。。&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Csharp笔记</title>
      <link href="/Soiloquy-Blog.github.io/2023/01/27/Csharp%E7%AC%94%E8%AE%B0/"/>
      <url>/Soiloquy-Blog.github.io/2023/01/27/Csharp%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>C# 静态成员和实例成员</h1><ul class="lvl-0"><li class="lvl-2">静态成员（<a href="https://so.csdn.net/so/search?q=static&amp;spm=1001.2101.3001.7020">static</a> member）：又叫类成员，指的是在成员类型或返回值类型前用static关键字修饰的变量或方法，包括静态数据和静态方法；</li><li class="lvl-2">实例成员（instance member）：又称非静态成员、对象成员，是没有用static修饰的变量或方法，包括实例数据和实例方法。</li></ul><h3 id="静态成员的特点：">静态成员的特点：</h3><ul class="lvl-0"><li class="lvl-2"><p>静态成员（包括静态数据和静态方法）必须由类名调用，不能使用对象调用（静态数据可以由实例方法调用）。</p></li><li class="lvl-2"><p>静态数据属于类的级别，当类加载时，一个静态数据在内存只分配一个存储空间，无论new出多少个实例，它也只是有那一个空间。</p></li><li class="lvl-2"><p>静态方法只能调用静态数据，不能调用对象。</p></li></ul><h3 id="实例成员的特点：">实例成员的特点：</h3><ul class="lvl-0"><li class="lvl-2"><p>实例成员（包括实例数据和实例方法）必须通过对象来调用，不能使用类名调用。</p></li><li class="lvl-2"><p>类的实例数据属于类的实例级别，每新创建一个对象，都会在内存中为实例成员开辟一块新的存储空间。</p></li><li class="lvl-2"><p>实例方法可以调用实例数据和静态数据。</p></li></ul><h1>类型转换</h1><h3 id="隐式类型转换">隐式类型转换</h3><ul class="lvl-0"><li class="lvl-2"><p>不丢失精度的转换</p></li><li class="lvl-2"><p>子类向父类的转换</p></li><li class="lvl-2"><p>装箱</p></li></ul><h3 id="显式类型转换">显式类型转换</h3><ul class="lvl-0"><li class="lvl-2"><p>有可能丢失精度的转换，即cast（（T）x）T：目标类型</p></li><li class="lvl-2"><p>拆箱</p></li><li class="lvl-2"><p>使用convert类</p></li><li class="lvl-2"><p>ToString方法与各数据类型的Parse/TryParse方法</p></li></ul><h1>C#封装</h1><p><strong>封装</strong> 被定义为&quot;把一个或多个项目封闭在一个物理的或者逻辑的包中&quot;</p><p><strong>C#支持的访问修饰符：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>public：所有对象都可以访问；</p></li><li class="lvl-2"><p>private：对象本身在对象内部可以访问；</p></li><li class="lvl-2"><p>protected：只有该类对象及其子类对象可以访问，这样有助于实现继承</p></li><li class="lvl-2"><p>internal：同一个程序集的对象可以访问；</p></li><li class="lvl-2"><p>protected internal：访问限于当前程序集或派生自包含类的类型。</p></li></ul><h2 id="属性封装">属性封装</h2><ul class="lvl-0"><li class="lvl-2"><p>属性（Property)是类（class）、结构（structure）和接口（interface）的命名（named）成员</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> age;<span class="comment">//private:私有的,仅供内部进行访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Age<span class="comment">//public:公有的,任何地方都可以访问</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//获取或读取字段值</span></span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> age; &#125;<span class="comment">//属性的读取</span></span><br><span class="line">           <span class="keyword">set</span> &#123; age = <span class="keyword">value</span>; &#125;<span class="comment">//属性赋值(value为关键字)</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first.Age = <span class="number">21</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;年龄为:&#123;0&#125;&quot;</span>,first.Age);</span><br></pre></td></tr></table></figure><p><strong>字段和属性有什么区别？</strong></p><ul class="lvl-0"><li class="lvl-2"><p>字段：占用内存</p></li><li class="lvl-2"><p>属性：不占内存</p></li><li class="lvl-2"><p>属性必须依赖一个字段</p></li></ul><h2 id="方法封装">方法封装</h2><ul class="lvl-0"><li class="lvl-2"><p>第一种无参数的方法（没有返回值的方法）</p></li><li class="lvl-2"><p>第二种有参数的方法（有返回值的方法）</p></li></ul><h1>C# List<T>用法</T></h1><h2 id="List-T-的用法">List<T>的用法</T></h2><ul class="lvl-0"><li class="lvl-2"><p><strong>声明</strong>：</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; mList = <span class="keyword">new</span> List&lt;T&gt;(); <span class="comment">//T为列表中元素类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以一个集合作为参数创建List：</span></span><br><span class="line"><span class="built_in">string</span>[] temArr = &#123; <span class="string">&quot;Ha&quot;</span>, <span class="string">&quot;Hunter&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;Jay&quot;</span>, <span class="string">&quot;Jim&quot;</span>, <span class="string">&quot;Kuku&quot;</span>, <span class="string">&quot;Locu&quot;</span> &#125;;</span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; testList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(temArr);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>添加元素</strong>：List.Add(element)      List.Insert(index,element)</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; mList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">mList.Add(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在index位置添加一个元素</span></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; mList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">mList.Insert(<span class="number">1</span>, <span class="string">&quot;Hei&quot;</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>遍历List元素</strong>：</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (T element <span class="keyword">in</span> mList)  <span class="comment">//T的类型与mList声明时一样</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>删除元素</strong>:</p><ul class="lvl-2"><li class="lvl-4">List. Remove(element);</li><li class="lvl-4">List. RemoveAt(int index);   删除下标为index的元素</li><li class="lvl-4">List. RemoveRange(int index, int count); 从下标index开始，删除count个元素</li></ul></li><li class="lvl-2"><p>**判断某个元素是否在该List中：**List. Contains(element)  返回值为：true/false</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mList.Contains(<span class="string">&quot;Hunter&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;There is Hunter in the list&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    mList.Add(<span class="string">&quot;Hunter&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Add Hunter successfully.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>**给List里面元素排序：**List. Sort ()  默认是元素第一个字母按升序</p></li><li class="lvl-2"><p><strong>自定义排序</strong>:默认比较规则在CompareTo方法中定义，该方法属于IComparable<T>泛型接口。请看下面代码：</T></p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span> ：<span class="title">IComparable</span>&lt;<span class="title">Person</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//按年龄比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CompareTo</span>(<span class="params">Person p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Age - p.Age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义好默认比较规则后，就可以通过不带参数的Sort方法对集合进行排序</span></span><br></pre></td></tr></table></figure><p><strong>实际使用中，经常需要对集合按照多种不同规则进行排序，这就需要定义其他比较规则，可以在Compare方法中定义，该方法属于IComparer<T>泛型接口</T></strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">NameComparer</span> : <span class="title">IComparer</span>&lt;<span class="title">Person</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//存放排序器实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NameComparer Default = <span class="keyword">new</span> NameComparer();</span><br><span class="line">    <span class="comment">//按姓名比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Compare</span>(<span class="params">Person p1, Person p2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> System.Collections.Comparer.Default.Compare(p1.Name, p2.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照姓名对集合进行排序 </span></span><br><span class="line">persons.Sort(NameComparer.Default); </span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>**给List里面元素顺序反转：**List. Reverse ()</p></li><li class="lvl-2"><p>**List清空：**List. Clear ()</p></li><li class="lvl-2"><p>**获得List中元素数目：**List. Count ()  返回int值</p></li></ul><h2 id="List的方法和属性">List的方法和属性</h2><p>Capacity 用于获取或设置List可容纳元素的数量。当数量超过容量时，这个值会自动增长。您可以设置这个值以减少容量，也可以调用trin()方法来减少容量以适合实际的元素数目。</p><p>Count 属性，用于获取数组中当前元素数量</p><p>Item( ) 通过指定索引获取或设置元素。对于List类来说，它是一个索引器。</p><p>Add( ) 在List中添加一个对象的公有方法</p><p>AddRange( ) 公有方法，在List尾部添加实现了ICollection接口的多个元素</p><p>BinarySearch( ) 重载的公有方法，用于在排序的List内使用二分查找来定位指定元素.</p><p>Clear( ) 在List内移除所有元素</p><p>Contains( ) 测试一个元素是否在List内</p><p>CopyTo( ) 重载的公有方法，把一个List拷贝到一维数组内</p><p>Exists( ) 测试一个元素是否在List内</p><p>Find( ) 查找并返回List内的出现的第一个匹配元素</p><p>FindAll( ) 查找并返回List内的所有匹配元素</p><p>GetEnumerator( ) 重载的公有方法，返回一个用于迭代List的枚举器</p><p>Getrange( ) 拷贝指定范围的元素到新的List内</p><p>IndexOf( ) 重载的公有方法，查找并返回每一个匹配元素的索引</p><p>Insert( ) 在List内插入一个元素</p><p>InsertRange( ) 在List内插入一组元素</p><p>LastIndexOf( ) 重载的公有方法，，查找并返回最后一个匹配元素的索引</p><p>Remove( ) 移除与指定元素匹配的第一个元素</p><p>RemoveAt( ) 移除指定索引的元素</p><p>RemoveRange( ) 移除指定范围的元素</p><p>Reverse( ) 反转List内元素的顺序</p><p>Sort( ) 对List内的元素进行排序</p><p>ToArray( ) 把List内的元素拷贝到一个新的数组内</p><p>trimToSize( ) 将容量设置为List中元素的实际数目</p><h1>C# Dictionary(字典）</h1><h2 id="Dictionary的描述">Dictionary的描述</h2><p>1、从一组键（Key）到一组值（Value）的映射，每一个添加项都是由一个值及其相关连的键组成</p><p>2、任何键都必须是唯一的</p><p>3、键不能为空引用null（VB中的Nothing），若值为引用类型，则可以为空值</p><p>4、Key和Value可以是任何类型（string，int，custom class 等）</p><h2 id="Dictionary的语法">Dictionary的语法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建及初始化</span></span><br><span class="line">Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt; myDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt;();<span class="comment">//第一个参数是索引的类型，第二个参数是内容的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、添加元素</span></span><br><span class="line">myDic.Add(<span class="number">1</span>,<span class="string">&quot;C#&quot;</span>);</span><br><span class="line">myDic.Add(<span class="number">2</span>,<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">myDic.Add(<span class="number">3</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">myDic.Add(<span class="number">4</span>,<span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、通过Key(键)查找元素</span></span><br><span class="line"><span class="keyword">if</span>(myDictionary.ContainsKey(<span class="number">1</span>))&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Key:&#123;0&#125;,Value:&#123;1&#125;&quot;</span>,<span class="string">&quot;1&quot;</span>, myDic[<span class="number">1</span>]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、通过KeyValuePair遍历元素</span></span><br><span class="line"><span class="keyword">foreach</span>(KeyValuePair&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt;kvp <span class="keyword">in</span> myDic)</span><br><span class="line">&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Key = &#123;0&#125;, Value = &#123;1&#125;&quot;</span>,kvp.Key, kvp.Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、仅遍历键 Keys 属性</span></span><br><span class="line">Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt;.KeyCollection keyCol=myDic.Keys;</span><br><span class="line"><span class="keyword">foreach</span>(intkeyinkeyCol)</span><br><span class="line">&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Key = &#123;0&#125;&quot;</span>, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、仅遍历值 Valus属性</span></span><br><span class="line">Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt;.ValueCollection valueCol=myDic.Values;</span><br><span class="line"><span class="keyword">foreach</span>(stringvalueinvalueCol)</span><br><span class="line">&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Value = &#123;0&#125;&quot;</span>, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7、通过Remove方法移除指定的键值</span></span><br><span class="line">myDic.Remove(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(myDic.ContainsKey(<span class="number">1</span>))</span><br><span class="line">...&#123;</span><br><span class="line">　　Console.WriteLine(<span class="string">&quot;Key:&#123;0&#125;,Value:&#123;1&#125;&quot;</span>,<span class="string">&quot;1&quot;</span>, myDic[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;不存在 Key : 1&quot;</span>); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>补充：在类后面有有尖括号的是<strong>泛型类</strong>，需跟其他类组成一个完整的类</p><h1>C# 索引器</h1><p><strong>索引器（Indexer）</strong> 允许一个对象可以像数组一样使用下标的方式来访问。</p><p>当您为类定义一个索引器时，该类的行为就会像一个 <strong>虚拟数组（virtual array）</strong> 一样。您可以使用数组访问运算符 <strong>[ ]</strong> 来访问该类的的成员。</p><p><strong>一维索引器的语法如下：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">element-type <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// get 访问器</span></span><br><span class="line">   <span class="keyword">get</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 返回 index 指定的值</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// set 访问器</span></span><br><span class="line">   <span class="keyword">set</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 设置 index 指定的值</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例演示：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Csharp_indexer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">            stu1[<span class="string">&quot;Math&quot;</span>] = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">var</span> mathScore = stu1[ <span class="string">&quot;Math&quot;</span>];</span><br><span class="line">            Console.WriteLine(mathScore);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; scoreDictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span>? <span class="keyword">this</span>[<span class="built_in">string</span> name]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.scoreDictionary.ContainsKey(name))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.scoreDictionary[name];</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">value</span>.HasValue==<span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Value connot null!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.scoreDictionary.ContainsKey(name))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.scoreDictionary[name] = <span class="keyword">value</span>.Value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.scoreDictionary.Add(name, <span class="keyword">value</span>.Value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="索引器与数组的区别：">索引器与数组的区别：</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>索引器的索引值（Index）类型不限定为整数：</strong></p></li></ul><p>​    用来访问数组的索引值（Index）一定为整数，而索引器的索引值类型可以定义为其他类型。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>索引器允许重载</strong></p></li></ul><p>​    一个类不限定为只能定义一个索引器，只要索引器的函数签名不同，就可以定义多个索引器，可以重载它的功能。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>索引器不是一个变量</strong></p></li></ul><p>​    索引器没有直接定义数据存储的地方，而数组有。索引器具有Get和Set访问器。</p><h3 id="索引器与属性的区别：">索引器与属性的区别：</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>索引器以函数签名方式 this 来标识，而属性采用名称来标识，名称可以任意</strong></p></li><li class="lvl-2"><p><strong>索引器可以重载，而属性不能重载。</strong></p></li><li class="lvl-2"><p><strong>索引器不能用static 来进行声明，而属性可以。索引器永远属于实例成员，因此不能声明为static。</strong></p></li></ul><h1>C#类型输出</h1><h3 id="C-百分数形式输出">C#百分数形式输出</h3><p><mark><strong>百分比的格式控制符为&quot;P&quot;或&quot;p&quot;将普通数值输出为百分比形式。</strong></mark></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = Console.ReadLine();</span><br><span class="line"><span class="keyword">var</span> b = Console.ReadLine();</span><br><span class="line"><span class="built_in">double</span> percent = <span class="built_in">double</span>.Parse(b) / <span class="built_in">double</span>.Parse(a);</span><br><span class="line"><span class="built_in">string</span> q = <span class="string">$&quot;<span class="subst">&#123;percent:p3&#125;</span>&quot;</span>;</span><br><span class="line"><span class="comment">//string q2 = percent.ToString(&quot;P0&quot;); </span></span><br><span class="line"><span class="comment">//P后边跟数字，代表精度。</span></span><br><span class="line">Console.WriteLine(q);</span><br></pre></td></tr></table></figure><h3 id="C-保留小数点后指定位数">C#保留小数点后指定位数</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> d=<span class="number">1.2356</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str=d.ToString(<span class="string">&quot;0.00&quot;</span>);  <span class="comment">//小数点后有几个0即保留几位小数。</span></span><br><span class="line"><span class="built_in">string</span> str=d.ToString(<span class="string">&quot;#0.00&quot;</span>);  </span><br><span class="line"><span class="built_in">string</span> str=d.ToString(<span class="string">&quot;f2&quot;</span>);  <span class="comment">//fn 保留n位，四舍五入，&quot;F&quot;,&quot;f&quot; 不区分大小写</span></span><br><span class="line"><span class="built_in">string</span> str=String.Format(<span class="string">&quot;&#123;0:F&#125;&quot;</span>, d);  </span><br><span class="line"><span class="built_in">string</span> str=String.Format(<span class="string">&quot;&#123;0:N2&#125;&quot;</span>, d);</span><br><span class="line"><span class="built_in">double</span> <span class="keyword">do</span>=Math.Round(d, <span class="number">2</span>);  </span><br><span class="line"><span class="built_in">decimal</span> de = <span class="built_in">decimal</span>.Round(<span class="built_in">decimal</span>.Parse(d.ToString()), <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h1>C# 继承</h1><p>注：这个已有的类被称为的<strong>基类</strong>，这个新的类被称为<strong>派生类</strong></p><p><strong>派生类继承了基类的成员变量和成员方法</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">InheritanceApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Shape</span><span class="comment">//基类</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span>(<span class="params"><span class="built_in">int</span> w</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"><span class="built_in">int</span> h</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//protected可以从派生类直接访问基类的受保护成员</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> height;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 派生类</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>: <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getArea</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> (width * height);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle Rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line">         Rect.setWidth(<span class="number">5</span>);</span><br><span class="line">         Rect.setHeight(<span class="number">7</span>);</span><br><span class="line">         <span class="comment">// 打印对象的面积</span></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;总面积： &#123;0&#125;&quot;</span>,  Rect.getArea());</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base-关键字">base 关键字</h3><p><code>base</code> 关键字用于从派生类中访问基类的成员。 如果要执行以下操作时使用它：</p><ul class="lvl-0"><li class="lvl-2"><p>调用基类上已被其他方法重写的方法。</p></li><li class="lvl-2"><p>指定创建派生类实例时应调用的基类构造函数。</p></li></ul><p>仅允许基类访问在构造函数、实例方法和实例属性访问器中进行。</p><p>在静态方法中使用 <code>base</code> 关键字将产生错误。</p><p>所访问的基类是类声明中指定的基类。 例如，如果指定 <code>class ClassB : ClassA</code>，则从 ClassB 访问 ClassA 的成员，而不考虑 ClassA 的基类。</p><h1>C# 多态性</h1><p><mark>多态：只有多个类同时继承了同一个类。</mark></p><p>在 C#语言中体现多态有三种方式：虚方法，抽象类， 接口。</p><h3 id="抽象方法和虚方法">抽象方法和虚方法</h3><p>基类将方法声明为 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual"><code>virtual</code></a> 时，派生类可以使用其自己的实现<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/override"><code>override</code></a>该方法。</p><p>如果基类将成员声明为 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/abstract"><code>abstract</code></a>，则必须在直接继承自该类的任何非抽象类中重写该方法。 如果派生类本身是抽象的，则它会继承抽象成员而不会实现它们。 抽象和虚拟成员是多形性（面向对象的编程的第二个主要特征）的基础。</p><h3 id="抽象类">抽象类</h3><p>C# 允许您使用关键字 <strong>abstract</strong> 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。</p><p>请注意，下面是有关抽象类的一些规则：</p><ul class="lvl-0"><li class="lvl-2"><p>您不能创建一个抽象类的实例。</p></li><li class="lvl-2"><p>您不能在一个抽象类外部声明一个抽象方法。</p></li><li class="lvl-2"><p>通过在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</p></li></ul><h1>C#事件</h1><ol><li class="lvl-3"><p>角色：<strong>使对象或类具备通知能力的成员</strong></p></li><li class="lvl-3"><p>使用：<strong>用于对象或类间的动作协调与信息传递（消息推送）</strong></p></li></ol><h3 id="事件模型的五个组成部分">事件模型的五个组成部分</h3><ol><li class="lvl-3"><p>事件的拥有者（event source，对象）</p></li><li class="lvl-3"><p>事件成员（event，成员）</p></li><li class="lvl-3"><p>事件的响应者（event subscribe，对象）</p></li><li class="lvl-3"><p>事件处理器（event handler，成员）–本质是一个回调方法</p></li><li class="lvl-3"><p>事件订阅—把事件处理器与事件关联在一起</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Timers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Cs_teat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">double</span> <span class="title">Calc</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line">            timer.Interval = <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">var</span> boy = <span class="keyword">new</span> Boy();</span><br><span class="line">            timer.Elapsed += boy.Action;</span><br><span class="line">            timer.Start();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Boy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"><span class="built_in">object</span> sender, ElapsedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Jump!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Cs_teat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">double</span> <span class="title">Calc</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyForm form = <span class="keyword">new</span> MyForm();</span><br><span class="line">            form.Click+=form.Action;</span><br><span class="line">            form.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyForm</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Text = DateTime.Now.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义事件的声明">自定义事件的声明</h3><ul class="lvl-0"><li class="lvl-2"><p>事件声明：</p><ul class="lvl-2"><li class="lvl-4">完整声明</li><li class="lvl-4">简略声明（字段式声明，field-like）</li></ul></li><li class="lvl-2"><p>有了委托字段/属性，为什么还需要事件：为了使程序逻辑更加完善</p></li><li class="lvl-2"><p><span style="color:red">事件的本质</span>是委托字段的一个包装器</p><ul class="lvl-2"><li class="lvl-4">这个包装器对委托字段的访问起<span style="color:red">限制作用</span>，相当于一个“蒙板”</li><li class="lvl-4">封装的一个重要功能就是隐藏</li><li class="lvl-4">事件对外界隐藏了委托实例的大部分功能，<span style="color:red">仅暴露添加/移除事件处理器的功能</span></li></ul></li><li class="lvl-2"><p>用于声明事件的委托类型的命名约定</p><ul class="lvl-2"><li class="lvl-4">一般命名为 XXXEventHandler （除非是一个非常通用的事件约束）</li><li class="lvl-4">XXXXEventHandler委托的参数一般有两个（由Win32 API演化而来）</li><li class="lvl-4">触发XXX事件的方法一般命名为OnXXX，即“因何发生”<ul class="lvl-4"><li class="lvl-6">访问级别为protected，不能为public</li></ul></li></ul></li><li class="lvl-2"><p>事件的命名约定</p><ul class="lvl-2"><li class="lvl-4">带有时态的动词或者动词短语</li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyEventHandler</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> MyEventHandler MyEvent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Do something...&quot;</span>);</span><br><span class="line">        MyEvent?.Invoke(<span class="keyword">this</span>, EventArgs.Empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyClass obj = <span class="keyword">new</span> MyClass();</span><br><span class="line">        obj.MyEvent += MyEventHandlerMethod;</span><br><span class="line"></span><br><span class="line">        obj.DoSomething();</span><br><span class="line"></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyEventHandlerMethod</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Event handled.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​在这个例子中，创建了一个自定义事件 <code>MyEvent</code>，并在 <code>DoSomething</code> 方法中触发事件。在 <code>Main</code> 方法中，创建了一个 <code>MyClass</code> 实例并注册事件处理程序。在调用 <code>DoSomething</code> 方法时，事件处理程序将被调用。</p><h1>C#委托</h1><p>功能：一个函数或一组函数的封装器</p><p>声明委托：使用<code>delegate</code>关键字，与类平级</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyDelegate</span> (<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="委托的多播-Multicasting-of-a-Delegate">委托的多播(Multicasting of a Delegate)</h3><p>委托对象可使用<span style="color:red"> “+” 运算符进行合并，“-” 运算符可用于从合并的委托中移除组件委托</span>，只有相同类型的委托可被合并。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Cs_teat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> a = <span class="number">2342.31</span>;</span><br><span class="line">            <span class="built_in">double</span> b = <span class="number">223.1</span>;</span><br><span class="line">            <span class="keyword">var</span> calcutating = <span class="keyword">new</span> Calculate();</span><br><span class="line">            Cal operation = <span class="keyword">new</span> Cal(calcutating.Add);</span><br><span class="line">            <span class="built_in">double</span> c = operation(a, b);</span><br><span class="line">            Console.WriteLine(c);</span><br><span class="line">            operation += calcutating.Sub;</span><br><span class="line">            <span class="built_in">double</span> d = operation(c, b);</span><br><span class="line">            Console.WriteLine(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">double</span> <span class="title">Cal</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="built_in">double</span> x,<span class="built_in">double</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> result;</span><br><span class="line">            <span class="keyword">return</span> result = x + y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">double</span> x,<span class="built_in">double</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> result;</span><br><span class="line">            <span class="keyword">return</span> result = x - y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==Action委托：==用于参数列表为空，返回值为空</p><p>==Action&lt;&gt;委托：==用于参数列表不为空，返回值为空，例如：<code>Action&lt;string&gt; action=new Action&lt;string&gt;(SayHello);</code></p><p>==Func&lt;&gt;委托：==用于参数列表不为空，返回值不为空，例如：<code>Func&lt;int,int，double&gt; func=new Func&lt;int,int，double&gt;</code>返回值为double类型，参数都为int类型</p><h1>C#抽象类与开闭原则</h1><p>​1. 抽象类是一种特殊的类，<span style="color:red">它不能被实例化，只能被用作其他类的基类</span>，提供一个或多个抽象方法或抽象属性。</p><p>​2. 抽象类通过 <code>abstract</code> 关键字来定义，不能直接实例化。</p><p>​3. 派生类必须实现抽象类中的所有抽象成员，否则编译器会报错。</p><ul class="lvl-0"><li class="lvl-2"><p>具体类–&gt;抽象类–&gt;接口：越来越抽象，内部实现的东西越来越少</p></li><li class="lvl-2"><p>抽象类是<span style="color:red">未完全实现逻辑的类</span>（可以有字段和非public成员，他们代表了”具体逻辑“）</p></li><li class="lvl-2"><p>抽象类为复用而生：专门作为基类来使用，也具有解耦功能</p></li></ul><p>**<mark>开闭原则：</mark>**封装确定的，开放不确定的，推迟到合适的子类中去实现</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>htnl+CSS总结</title>
      <link href="/Soiloquy-Blog.github.io/2023/01/23/htnl-CSS%E6%80%BB%E7%BB%93/"/>
      <url>/Soiloquy-Blog.github.io/2023/01/23/htnl-CSS%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1>HTML</h1><h3 id="表格标签">表格标签</h3><h4 id="表格标签使用">表格标签使用</h4><ul class="lvl-0"><li class="lvl-2"><table></table>定义表格的标签</li><li class="lvl-2"><tr></tr>表示表格的行</li><li class="lvl-2"><td></td>表格的单元格</li></ul><h4 id="表格结构标签">表格结构标签</h4><ul class="lvl-0"><li class="lvl-2"><thead></thead>表格的头部</li><li class="lvl-2"><tbody></tbody>表格的主体</li></ul><h4 id="合并单元格">合并单元格</h4><ul class="lvl-0"><li class="lvl-2"><p>跨行合并：rowspan</p></li><li class="lvl-2"><p>跨列合并：colspan</p></li></ul><h3 id="列表标签">列表标签</h3><ul class="lvl-0"><li class="lvl-2"><p>无序列表：ul&gt;li</p></li><li class="lvl-2"><p>有序列表：ol&gt;li</p></li><li class="lvl-2"><p>自定义列表：dl&gt;dt+dd</p></li></ul><h3 id="表单标签">表单标签</h3><ul class="lvl-0"><li class="lvl-2"><form></form>表单域<h6 id="表单控件">表单控件</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">input</span> type=&quot;属性&quot;/&gt;</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>属性值：</p></li><li class="lvl-4"><p>button</p></li><li class="lvl-4"><p>checkout</p></li><li class="lvl-4"><p>file</p></li><li class="lvl-4"><p>hidden</p></li><li class="lvl-4"><p>image</p></li><li class="lvl-4"><p>password</p></li><li class="lvl-4"><p>radio</p></li><li class="lvl-4"><p>reset</p></li><li class="lvl-4"><p>submit</p></li><li class="lvl-4"><p>text</p></li></ul></li></ul><p>name 表单名字</p><p>value可在文本框中呈现</p><ul class="lvl-0"><li class="lvl-2"><p>label 标签：绑定表单元素</p></li><li class="lvl-2"><p>select&gt;option 选择元素</p></li><li class="lvl-2"><p>textarea：输入内容多时用</p></li></ul><h1>CSS</h1><h3 id="CSS选择器">CSS选择器</h3><ul class="lvl-0"><li class="lvl-2"><p>基础选择器：</p><ul class="lvl-2"><li class="lvl-4">标签选择器</li><li class="lvl-4">类选择器</li><li class="lvl-4">id选择器</li><li class="lvl-4">通配符选择器</li></ul></li><li class="lvl-2"><p>复合选择器</p><ul class="lvl-2"><li class="lvl-4">子集选择器</li><li class="lvl-4">并集选择器</li><li class="lvl-4">链接伪类选择器</li></ul></li></ul><h3 id="CSS字体属性">CSS字体属性</h3><ul class="lvl-0"><li class="lvl-2"><p>font-family：字体</p></li><li class="lvl-2"><p>font-size：字体大小</p></li><li class="lvl-2"><p>font-weight：字体粗细</p></li><li class="lvl-2"><p>font-style：字体样式</p></li></ul><p>line-height：行高</p><h3 id="CSS文本属性">CSS文本属性</h3><ul class="lvl-0"><li class="lvl-2"><p>颜色：color</p><ul class="lvl-2"><li class="lvl-4">表示方法：预定义，十六进制，RGB</li></ul></li><li class="lvl-2"><p>对齐文本：text-align：left/right/center</p></li><li class="lvl-2"><p>装饰文本：text-decoration</p></li><li class="lvl-2"><p>文本缩进：text-indent</p></li></ul><h3 id="元素显示模式">元素显示模式</h3><h5 id="块元素：">块元素：</h5><ul class="lvl-0"><li class="lvl-2"><p>h1~h6 , p , div , ul ol li</p></li><li class="lvl-2"><p>可设置高 宽 内外边距</p></li></ul><h5 id="行内元素：">行内元素：</h5><ul class="lvl-0"><li class="lvl-2"><p>a , strong , span等</p></li><li class="lvl-2"><p>不可设置高 宽</p></li></ul><h5 id="行内块元素：">行内块元素：</h5><ul class="lvl-0"><li class="lvl-2"><p>img input td</p></li><li class="lvl-2"><p>具有块元素和行内元素的特点</p></li></ul><h5 id="元素显示模式转换">元素显示模式转换</h5><ul class="lvl-0"><li class="lvl-2"><p>display：block 转换为块元素</p></li><li class="lvl-2"><p>display：inline 转换为行内元素</p></li><li class="lvl-2"><p>display：inline-block 转换为行内块元素</p></li></ul><h3 id="CSS背景">CSS背景</h3><ul class="lvl-0"><li class="lvl-2"><p>背景颜色：background-color：transparent（透明）</p></li><li class="lvl-2"><p>背景图片：background-image：url（）</p></li><li class="lvl-2"><p>背景平铺：background-repeat：no-repeat</p></li><li class="lvl-2"><p>背景图片位置：background-position：x y</p></li><li class="lvl-2"><p>背景图像固定：background-attachment：scroll/fixed</p></li><li class="lvl-2"><p>半透明：rgba</p></li></ul><h3 id="CSS三大特性">CSS三大特性</h3><ul class="lvl-0"><li class="lvl-2"><p>层叠性</p></li><li class="lvl-2"><p>继承性</p></li><li class="lvl-2"><p>优先级：选择器权重</p></li></ul><h3 id="盒模型">盒模型</h3><ul class="lvl-0"><li class="lvl-2"><p>边框（border）</p><ul class="lvl-2"><li class="lvl-4">border-width：粗细</li><li class="lvl-4">border-style：样式</li><li class="lvl-4">border-color：颜色</li><li class="lvl-4">border-collapse：collapse：相邻边框合并</li></ul></li><li class="lvl-2"><p>内边距（padding）</p><ul class="lvl-2"><li class="lvl-4">padding：5px 10px</li></ul></li><li class="lvl-2"><p>外边距（margin）</p></li></ul><p>外边距合并：为父元素添加：overflow：hidden</p><p>圆角边框：border-radius</p><ul class="lvl-0"><li class="lvl-2"><p>盒子阴影：box-shadow：h-shadow v-shadow blur spread color inset</p><ul class="lvl-2"><li class="lvl-4">h-shadow :水平阴影</li><li class="lvl-4">v-shadow：垂直阴影</li><li class="lvl-4">blur：虚实</li><li class="lvl-4">spread：阴影大小</li><li class="lvl-4">color：颜色</li><li class="lvl-4">inset：内阴影</li></ul></li><li class="lvl-2"><p>文字阴影：text-shadow（属性与盒子阴影相同）</p></li></ul><h3 id="浮动（float）">浮动（float）</h3><h5 id="特点：">特点：</h5><ul class="lvl-0"><li class="lvl-2"><p>脱标</p></li><li class="lvl-2"><p>不占有原来的位置</p></li></ul><h5 id="清除浮动：">清除浮动：</h5><ul class="lvl-0"><li class="lvl-2"><p>在浮动元素末尾加上：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">clear</span>:both<span class="string">&quot;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>给父级添加overflow:hidden</p></li><li class="lvl-2"><p>给父级添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="定位（position）">定位（position）</h3><h4 id="静态定位：">静态定位：</h4><p>默认定位方式，无定位。</p><h4 id="相对定位（position-relative）：">相对定位（position:relative）：</h4><ul class="lvl-0"><li class="lvl-2"><p>移动的位置是相对于自身</p></li><li class="lvl-2"><p>原来的位置继续占有</p></li></ul><h4 id="绝对定位（position-absolute）：">绝对定位（position:absolute）：</h4><ul class="lvl-0"><li class="lvl-2"><p>子绝父相</p></li><li class="lvl-2"><p>不占有原来的位置（脱标）</p></li></ul><h4 id="固定定位（position-fixed）：">固定定位（position:fixed）：</h4><ul class="lvl-0"><li class="lvl-2"><p>元素不随滚动条滚动</p></li></ul><h4 id="粘性定位（position-sticky）：">粘性定位（position:sticky）：</h4><ul class="lvl-0"><li class="lvl-2"><p>相当于固定定位和相对定位的混合</p></li><li class="lvl-2"><p>占有原来的位置</p></li></ul><p><mark>定位层叠次序（z-index）</mark></p><h3 id="元素的显示和隐藏：">元素的显示和隐藏：</h3><h4 id="visibility可见性">visibility可见性</h4><ul class="lvl-0"><li class="lvl-2"><p>visibility:visible  元素可视</p></li><li class="lvl-2"><p>visibility:hidden  元素隐藏<strong>占有原来的位置</strong></p></li></ul><h4 id="overflow溢出">overflow溢出</h4><ul class="lvl-0"><li class="lvl-2"><p>overflow:visible  默认（不隐藏）</p></li><li class="lvl-2"><p>overflow:hidden  超出的部分隐藏</p></li><li class="lvl-2"><p>overflow:hidden  无论是否超出都显示滚动条</p></li><li class="lvl-2"><p>overflow:auto  超出的部分显示滚动条，不超出不显示</p></li></ul><h3 id="flex弹性布局">flex弹性布局</h3><h4 id="flex布局父盒子常用属性">flex布局父盒子常用属性</h4><h6 id="flex-direction设置主轴方向">flex-direction设置主轴方向</h6><p>属性值：</p><ul class="lvl-0"><li class="lvl-2"><p>row，row-reverse，column，column-reverse</p></li></ul><h6 id="justify-content设置主轴子元素排列方式">justify-content设置主轴子元素排列方式</h6><p>属性值：</p><ul class="lvl-0"><li class="lvl-2"><p>flex-start，flex-end，center，space-around，space-between</p></li></ul><h6 id="flex-warp子元素是否换行">flex-warp子元素是否换行</h6><h6 id="align-items设置侧轴子元素排列方式（单行）">align-items设置侧轴子元素排列方式（单行）</h6><p>属性值：</p><ul class="lvl-0"><li class="lvl-2"><p>flex-start，flex-end，center，stretch</p></li></ul><h6 id="align-content设置侧轴子元素排列方式（多行）">align-content设置侧轴子元素排列方式（多行）</h6><p>属性值：同上</p><h4 id="flex子项常见布局">flex子项常见布局</h4><h6 id="flex属性：子项分配剩余空间">flex属性：子项分配剩余空间</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>&lt;number&gt;</span><br></pre></td></tr></table></figure><h6 id="align-self子项在侧轴的排列方式">align-self子项在侧轴的排列方式</h6><h6 id="order定义项目的排列顺序">order定义项目的排列顺序</h6><h3 id="Grid布局">Grid布局</h3><h4 id="grid-template属性：">grid-template属性：</h4><h6 id="grid-template-columns属性设置列宽">grid-template-columns属性设置列宽</h6><h6 id="grod-template-rows属性设置行高">grod-template-rows属性设置行高</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/*  声明了三列，宽度分别为 200px 100px 200px */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">100px</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="comment">/*  声明了两行，行高分别为 50px 50px  */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="repeat-函数">repeat()函数</h4><p><strong>简化重复的值</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper-1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">100px</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="comment">/*  2行，而且行高都为 50px  */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong></p><p><mark><strong>auto-fill 关键字</strong>：表示自动填充，让一行（或者一列）中尽可能的容纳更多元素</mark></p><p>eg：<strong>grid-template-columns: repeat(auto-fill, 200px)</strong></p><p><mark><strong>fr 关键字</strong>：等分关键字</mark></p><p>eg：<strong>grid-template-columns: 200px 1fr 2fr</strong></p><p>表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3</p><p><mark><strong>auto 关键字</strong>：由浏览器决定长度</mark></p><h4 id="minmax函数">minmax函数</h4><p>给网格元素最大和最小像素：grid-template-columns: 1fr 1fr minmax(300px, 2fr)</p><h4 id="grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性">grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性</h4><p><strong>说明：<code>grid-row-gap</code> 属性、<code>grid-column-gap</code> 属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式。</strong></p><h4 id="grid-template-areas-属性">grid-template-areas 属性</h4><p><code>grid-template-areas</code> 属性用于定义区域，一个区域由一个或者多个单元格组成</p><p>一般这个属性跟网格元素的 <code>grid-area</code> 一起使用，我们在这里一起介绍。 <code>grid-area</code> 属性指定项目放在哪一个区域</p><p><mark>注：</mark> <code>.</code> 符号代表空的单元格，也就是没有用到该单元格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">120px</span>  <span class="number">120px</span>  <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;. header  header&quot;</span></span><br><span class="line">    <span class="string">&quot;sidebar content content&quot;</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="grid-auto-flow-属性">grid-auto-flow 属性</h4><p><code>grid-auto-flow</code> 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是&quot;先行后列&quot;</p><table><thead><tr><th style="text-align:left">属性值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">row</td><td style="text-align:left">多的格子一行一行陈列。默认值。</td></tr><tr><td style="text-align:left">column</td><td style="text-align:left">多的格子一列一列排列。</td></tr><tr><td style="text-align:left">dense</td><td style="text-align:left">多的格子填充掉空白</td></tr><tr><td style="text-align:left">row dense</td><td style="text-align:left">行排列，填充掉空白</td></tr><tr><td style="text-align:left">row dense</td><td style="text-align:left">列排列，填充掉空白</td></tr></tbody></table><h4 id="justify-items-属性、align-items-属性以及-place-items-属性">justify-items 属性、align-items 属性以及 place-items 属性</h4><p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右），<code>align-items</code> 属性设置单元格的垂直位置（上中下）</p><table><thead><tr><th style="text-align:left">属性值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">start</td><td style="text-align:left">对齐单元格的起始边缘</td></tr><tr><td style="text-align:left">end</td><td style="text-align:left">对齐单元格的结束边缘</td></tr><tr><td style="text-align:left">center</td><td style="text-align:left">单元格内部居中</td></tr><tr><td style="text-align:left">stretch</td><td style="text-align:left">拉伸，占满单元格的整个宽度（默认值）</td></tr></tbody></table><h2 id="2D转换">2D转换</h2><h4 id="移动（translate）">移动（translate）</h4><ul class="lvl-0"><li class="lvl-2"><p>transform:translate(x,y)</p></li><li class="lvl-2"><p>transform:translateX(n)</p></li><li class="lvl-2"><p>transform:translateY(n)</p></li></ul><p><mark>注：translate中百分比是相对自身</mark></p><h4 id="选转（rotate）">选转（rotate）</h4><p>语法：<strong>transform:rotate(度数</strong>)</p><p>1.默认选转中心是元素中心点</p><p>2.正顺负逆</p><h4 id="2D转换中心点：transform-origin">2D转换中心点：transform-origin</h4><p>语法：<strong>transform-origin:x y;</strong></p><p><mark>参数可为像素，百分比，方位名词</mark></p><h4 id="缩放（scale）">缩放（scale）</h4><p>语法：<strong>transform:scale(x,y);</strong></p><p>注：1.可更换中心点</p><p>2.参数不跟单位</p><h4 id="综合写法：">综合写法：</h4><p><mark><strong>transform:translate() rotate() scale() …</strong></mark></p><p>其顺序会影响转换效果，位移一般放最前面</p><h2 id="3D转换">3D转换</h2><h4 id="3D位移：translate3d（x，y，z）">3D位移：translate3d（x，y，z）</h4><p>3D各轴可分开写</p><h4 id="透视perspective">透视perspective</h4><p><mark>指人眼单屏幕的距离</mark></p><p><mark>距离视觉点越近的在电脑屏幕的成像越大</mark></p><p><mark><strong>透视写到被观察的父盒子上</strong></mark></p><h4 id="3D旋转（rotate3d）">3D旋转（rotate3d）</h4><p><strong>可让元素在平面沿着x轴，y轴，z轴或自定义轴进行旋转</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate3d</span>(x,y,z,deg)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*x,y,z表示旋转轴的矢量*/</span></span><br></pre></td></tr></table></figure><h4 id="3D呈现（transform-style）">3D呈现（transform-style）</h4><p><mark>给父盒子添加</mark></p><p>作用：控制子盒子是否开启三维立体环境</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span><br></pre></td></tr></table></figure><h2 id="CSS动画">CSS动画</h2><h3 id="定义动画：">定义动画：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframs</span> 动画名称&#123;</span><br><span class="line">    <span class="comment">/*开始状态*/</span></span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line">        css-<span class="selector-tag">code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span>&#123;</span><br><span class="line">        css-<span class="selector-tag">code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*结束状态*/</span></span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        css-<span class="selector-tag">code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在元素中调用元素">在元素中调用元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-name</span>:move;//动画名称</span><br><span class="line"><span class="attribute">animation-duration</span>;//持续时间</span><br></pre></td></tr></table></figure><p><mark>简写：animation：名称 持续时间 曲线 何时开始 是否循环 是否反向 起始结束状态</mark></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/Soiloquy-Blog.github.io/2023/01/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/Soiloquy-Blog.github.io/2023/01/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1>Git常用命令</h1><h3 id="本地库初始化：git-init">本地库初始化：git init</h3><h3 id="设置签名：">设置签名：</h3><h5 id="git-config-global-user-name-设置全局用户名">git config --global <a href="http://user.name">user.name</a> 设置全局用户名</h5><h5 id="git-config-global-user-email-设置全局邮箱名">git config --global user.email 设置全局邮箱名</h5><h6 id="保存位置-gitconfig">保存位置 ~/.gitconfig</h6><h3 id="提交文件">提交文件</h3><ul class="lvl-0"><li class="lvl-2"><p>git status 查看文件状态</p></li><li class="lvl-2"><p>git add 添加文件到暂存区</p></li><li class="lvl-2"><p>1.git commit 提交文件到本地库 2.git commit -m “描述内容”</p></li><li class="lvl-2"><p>git remote add origin 添加远程库的别名</p></li><li class="lvl-2"><p>git push origin master 添加到远程库</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
